
MicropchipHorticultureFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ee  00800100  000076b6  0000774a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000076b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000304  008003ee  008003ee  00007a38  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007a38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007a94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000011a8  00000000  00000000  00007ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002efef  00000000  00000000  00008c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006956  00000000  00000000  00037c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000099eb  00000000  00000000  0003e5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004250  00000000  00000000  00047fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000078c6  00000000  00000000  0004c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017fca  00000000  00000000  00053ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001270  00000000  00000000  0006ba8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__dtors_end>
       4:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
       8:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
       c:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__vector_3>
      10:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__vector_3>
      14:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__vector_3>
      18:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      1c:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      20:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      24:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      28:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      2c:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      30:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      34:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      38:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      3c:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      40:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_16>
      44:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      48:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__vector_18>
      4c:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_19>
      50:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      54:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      58:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      5c:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>
      60:	0c 94 b5 2e 	jmp	0x5d6a	; 0x5d6a <__vector_24>
      64:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <setup+0x72>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <_ZZN6EspDrv5resetEvE3__c_3>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <_ZZ5setupE3__c_0+0xa>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <_ZZ14heartbeat_loopvE3__c+0x1>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <_ZZ11sensor_loopvE3__c+0xf>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <_ZZ14heartbeat_loopvE3__c_1>:
     162:	46 61 69 6c 65 64 20 74 6f 20 70 75 62 6c 69 73     Failed to publis
     172:	68 20 68 65 61 72 74 62 65 61 74 3a 20 00           h heartbeat: .

00000180 <_ZZ14heartbeat_loopvE3__c_0>:
     180:	50 75 62 6c 69 73 68 20 6f 6b 00                    Publish ok.

0000018b <_ZZ14heartbeat_loopvE3__c>:
     18b:	53 65 6e 64 69 6e 67 20 68 65 61 72 74 62 65 61     Sending heartbea
     19b:	74 3a 20 00                                         t: .

0000019f <_ZZ11sensor_loopvE3__c_0>:
     19f:	46 61 69 6c 65 64 20 74 6f 20 70 75 62 6c 69 73     Failed to publis
     1af:	68 20 73 65 6e 73 6f 72 20 64 61 74 61 3a 20 00     h sensor data: .

000001bf <_ZZ11sensor_loopvE3__c>:
     1bf:	53 65 6e 64 69 6e 67 20 73 65 6e 73 6f 72 3a 20     Sending sensor: 
	...

000001d0 <_ZZ11connectMQTTvE3__c_4>:
     1d0:	57 69 6c 6c 20 72 65 73 65 74 20 61 6e 64 20 74     Will reset and t
     1e0:	72 79 20 61 67 61 69 6e 2e 2e 2e 00                 ry again....

000001ec <_ZZ11connectMQTTvE3__c_3>:
     1ec:	4d 51 54 54 20 63 6f 6e 6e 65 63 74 20 66 61 69     MQTT connect fai
     1fc:	6c 65 64 00                                         led.

00000200 <_ZZ11connectMQTTvE3__c_2>:
     200:	53 75 62 73 63 72 69 62 65 64 20 66 61 69 6c 65     Subscribed faile
     210:	64 3a 20 00                                         d: .

00000214 <_ZZ11connectMQTTvE3__c_1>:
     214:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 73 75 62     Successfully sub
     224:	73 63 72 69 62 65 64 00                             scribed.

0000022c <_ZZ11connectMQTTvE3__c_0>:
     22c:	50 75 62 6c 69 73 68 20 63 6f 6e 6e 65 63 74 65     Publish connecte
     23c:	64 20 6d 65 73 73 61 67 65 20 66 61 69 6c 65 64     d message failed
     24c:	3a 20 00                                            : .

0000024f <_ZZ11connectMQTTvE3__c>:
     24f:	43 6f 6e 6e 65 63 74 65 64 20 74 6f 20 4d 51 54     Connected to MQT
     25f:	54 20 62 72 6f 6b 65 72 00                          T broker.

00000268 <_ZZ8callbackPcPhjE3__c>:
     268:	52 65 63 65 69 76 65 64 20 73 6f 6d 65 20 64 61     Received some da
     278:	74 61 3a 20 00                                      ta: .

0000027d <_ZZ5setupE3__c_10>:
     27d:	45 52 52 4f 52 21 20 53 6f 69 6c 20 73 65 6e 73     ERROR! Soil sens
     28d:	6f 72 20 6e 6f 74 20 66 6f 75 6e 64 00              or not found.

0000029a <_ZZ5setupE3__c_9>:
     29a:	43 6f 6e 6e 65 63 74 69 6e 67 20 74 6f 20 73 6f     Connecting to so
     2aa:	69 6c 20 73 65 6e 73 6f 72 2e 2e 2e 00              il sensor....

000002b7 <_ZZ5setupE3__c_8>:
     2b7:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 63 6f 6e     Successfully con
     2c7:	6e 65 63 74 65 64 20 74 6f 20 43 4f 32 20 73 65     nected to CO2 se
     2d7:	6e 73 6f 72 21 00                                   nsor!.

000002dd <_ZZ5setupE3__c_7>:
     2dd:	43 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64 20 61     Could not find a
     2ed:	20 76 61 6c 69 64 20 43 4f 32 20 73 65 6e 73 6f      valid CO2 senso
     2fd:	72 2c 20 63 68 65 63 6b 20 77 69 72 69 6e 67 21     r, check wiring!
	...

0000030e <_ZZ5setupE3__c_6>:
     30e:	43 6f 6e 6e 65 63 74 69 6e 67 20 74 6f 20 43 4f     Connecting to CO
     31e:	32 20 73 65 6e 73 6f 72 2e 2e 2e 00                 2 sensor....

0000032a <_ZZ5setupE3__c_5>:
     32a:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 63 6f 6e     Successfully con
     33a:	6e 65 63 74 65 64 20 74 6f 20 42 4d 45 32 38 30     nected to BME280
     34a:	20 73 65 6e 73 6f 72 21 00                           sensor!.

00000353 <_ZZ5setupE3__c_4>:
     353:	43 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64 20 61     Could not find a
     363:	20 76 61 6c 69 64 20 42 4d 45 32 38 30 20 73 65      valid BME280 se
     373:	6e 73 6f 72 2c 20 63 68 65 63 6b 20 77 69 72 69     nsor, check wiri
     383:	6e 67 21 00                                         ng!.

00000387 <_ZZ5setupE3__c_3>:
     387:	43 6f 6e 6e 65 63 74 69 6e 67 20 74 6f 20 42 4d     Connecting to BM
     397:	45 32 38 30 20 73 65 6e 73 6f 72 2e 2e 2e 00        E280 sensor....

000003a6 <_ZZ5setupE3__c_2>:
     3a6:	43 6f 6e 6e 65 63 74 65 64 20 74 6f 20 57 69 66     Connected to Wif
     3b6:	69 21 00                                            i!.

000003b9 <_ZZ5setupE3__c_1>:
     3b9:	46 61 69 6c 65 64 20 74 6f 20 63 6f 6e 6e 65 63     Failed to connec
     3c9:	74 2c 20 72 65 73 65 74 74 69 6e 67 00              t, resetting.

000003d6 <_ZZ5setupE3__c_0>:
     3d6:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 63 6f     Attempting to co
     3e6:	6e 6e 65 63 74 20 74 6f 20 57 69 46 69 20 6e 65     nnect to WiFi ne
     3f6:	74 77 6f 72 6b 2e 2e 2e 00                          twork....

000003ff <_ZZ5setupE3__c>:
     3ff:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 68 61 72     Initializing har
     40f:	64 77 61 72 65 20 73 65 74 74 69 6e 67 73 2e 2e     dware settings..
     41f:	2e 00                                               ..

00000421 <digital_pin_to_timer_PGM>:
     421:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     431:	00 00 00 00 00                                      .....

00000436 <digital_pin_to_bit_mask_PGM>:
     436:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     446:	04 08 10 20 80                                      ... .

0000044b <digital_pin_to_port_PGM>:
     44b:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     45b:	03 03 03 03 02                                      .....

00000460 <port_to_input_PGM>:
     460:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000046a <port_to_output_PGM>:
     46a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000474 <port_to_mode_PGM>:
     474:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000047e <_ZZN12WiFiEspClass4initEP6StreamE3__c>:
     47e:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 45 53 50     Initializing ESP
     48e:	20 6d 6f 64 75 6c 65 00                              module.

00000496 <_ZZN13WiFiEspClient4stopEvE3__c>:
     496:	44 69 73 63 6f 6e 6e 65 63 74 69 6e 67 20 00        Disconnecting .

000004a5 <_ZZN13WiFiEspClient5writeEPKhjE3__c>:
     4a5:	46 61 69 6c 65 64 20 74 6f 20 77 72 69 74 65 20     Failed to write 
     4b5:	74 6f 20 73 6f 63 6b 65 74 00                       to socket.

000004bf <_ZZN13WiFiEspClient7connectEPKcjhE3__c_0>:
     4bf:	4e 6f 20 73 6f 63 6b 65 74 20 61 76 61 69 6c 61     No socket availa
     4cf:	62 6c 65 00                                         ble.

000004d3 <_ZZN13WiFiEspClient7connectEPKcjhE3__c>:
     4d3:	43 6f 6e 6e 65 63 74 69 6e 67 20 74 6f 00           Connecting to.

000004e1 <_ZZN13WiFiEspClient7connectE9IPAddressjE3__c>:
     4e1:	25 64 2e 25 64 2e 25 64 2e 25 64 00                 %d.%d.%d.%d.

000004ed <_ZZN6EspDrv9readUntilEiPKcbE3__c>:
     4ed:	3e 3e 3e 20 54 49 4d 45 4f 55 54 20 3e 3e 3e 00     >>> TIMEOUT >>>.

000004fd <_ZZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_PciE3__c_3>:
     4fd:	4e 6f 20 74 61 67 20 66 6f 75 6e 64 00              No tag found.

0000050a <_ZZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_PciE3__c_1>:
     50a:	45 6e 64 20 74 61 67 20 6e 6f 74 20 66 6f 75 6e     End tag not foun
     51a:	64 00                                               d.

0000051c <_ZZN6EspDrv8sendDataEhPKhjE3__c_2>:
     51c:	44 61 74 61 20 70 61 63 6b 65 74 20 73 65 6e 64     Data packet send
     52c:	20 65 72 72 6f 72 20 28 32 29 00                     error (2).

00000537 <_ZZN6EspDrv8sendDataEhPKhjE3__c_1>:
     537:	44 61 74 61 20 70 61 63 6b 65 74 20 73 65 6e 64     Data packet send
     547:	20 65 72 72 6f 72 20 28 31 29 00                     error (1).

00000552 <_ZZN6EspDrv8sendDataEhPKhjE3__c_0>:
     552:	41 54 2b 43 49 50 53 45 4e 44 3d 25 64 2c 25 75     AT+CIPSEND=%d,%u
	...

00000563 <_ZZN6EspDrv7getDataEhPhbPbE3__c_1>:
     563:	54 49 4d 45 4f 55 54 3a 00                          TIMEOUT:.

0000056c <_ZZN6EspDrv7getDataEhPhbPbE3__c>:
     56c:	54 61 67 20 43 4c 4f 53 45 44 20 6e 6f 74 20 66     Tag CLOSED not f
     57c:	6f 75 6e 64 00                                      ound.

00000581 <_ZZN6EspDrv10stopClientEhE3__c_0>:
     581:	41 54 2b 43 49 50 43 4c 4f 53 45 3d 25 64 00        AT+CIPCLOSE=%d.

00000590 <_ZZN6EspDrv11startClientEPKcjhhE3__c_3>:
     590:	41 54 2b 43 49 50 53 54 41 52 54 3d 25 64 2c 22     AT+CIPSTART=%d,"
     5a0:	55 44 50 22 2c 22 25 73 22 2c 30 2c 25 75 2c 32     UDP","%s",0,%u,2
	...

000005b1 <_ZZN6EspDrv11startClientEPKcjhhE3__c_2>:
     5b1:	41 54 2b 43 49 50 53 54 41 52 54 3d 25 64 2c 22     AT+CIPSTART=%d,"
     5c1:	53 53 4c 22 2c 22 25 73 22 2c 25 75 00              SSL","%s",%u.

000005ce <_ZZN6EspDrv11startClientEPKcjhhE3__c_1>:
     5ce:	41 54 2b 43 49 50 53 53 4c 53 49 5a 45 3d 34 30     AT+CIPSSLSIZE=40
     5de:	39 36 00                                            96.

000005e1 <_ZZN6EspDrv11startClientEPKcjhhE3__c_0>:
     5e1:	41 54 2b 43 49 50 53 54 41 52 54 3d 25 64 2c 22     AT+CIPSTART=%d,"
     5f1:	54 43 50 22 2c 22 25 73 22 2c 25 75 00              TCP","%s",%u.

000005fe <_ZZN6EspDrv12getFwVersionEvE3__c_0>:
     5fe:	41 54 2b 47 4d 52 00                                AT+GMR.

00000605 <_ZZN6EspDrv12getFwVersionEvE3__c_1>:
     605:	53 44 4b 20 76 65 72 73 69 6f 6e 3a 00              SDK version:.

00000612 <_ZZN6EspDrv12getFwVersionEvE3__c_2>:
     612:	0d 0a 00                                            ...

00000615 <_ZZN6EspDrv14getClientStateEhE3__c_1>:
     615:	41 54 2b 43 49 50 53 54 41 54 55 53 00              AT+CIPSTATUS.

00000622 <_ZZN6EspDrv14getClientStateEhE3__c_0>:
     622:	2b 43 49 50 53 54 41 54 55 53 3a 25 64 2c 00        +CIPSTATUS:%d,.

00000631 <_ZZN6EspDrv19getConnectionStatusEvE3__c_0>:
     631:	41 54 2b 43 49 50 53 54 41 54 55 53 00              AT+CIPSTATUS.

0000063e <_ZZN6EspDrv19getConnectionStatusEvE3__c_1>:
     63e:	53 54 41 54 55 53 3a 00                             STATUS:.

00000646 <_ZZN6EspDrv19getConnectionStatusEvE3__c_2>:
     646:	0d 0a 00                                            ...

00000649 <_ZZN6EspDrv11wifiConnectEPKcS1_E3__c_2>:
     649:	46 61 69 6c 65 64 20 63 6f 6e 6e 65 63 74 69 6e     Failed connectin
     659:	67 20 74 6f 00                                      g to.

0000065e <_ZZN6EspDrv11wifiConnectEPKcS1_E3__c_1>:
     65e:	43 6f 6e 6e 65 63 74 65 64 20 74 6f 00              Connected to.

0000066b <_ZZN6EspDrv11wifiConnectEPKcS1_E3__c_0>:
     66b:	41 54 2b 43 57 4a 41 50 5f 43 55 52 3d 22 25 73     AT+CWJAP_CUR="%s
     67b:	22 2c 22 25 73 22 00                                ","%s".

00000682 <_ZZN6EspDrv5resetEvE3__c_6>:
     682:	41 54 2b 43 57 44 48 43 50 3d 31 2c 31 00           AT+CWDHCP=1,1.

00000690 <_ZZN6EspDrv5resetEvE3__c_5>:
     690:	41 54 2b 43 57 41 55 54 4f 43 4f 4e 4e 3d 30 00     AT+CWAUTOCONN=0.

000006a0 <_ZZN6EspDrv5resetEvE3__c_4>:
     6a0:	41 54 2b 43 49 50 44 49 4e 46 4f 3d 31 00           AT+CIPDINFO=1.

000006ae <_ZZN6EspDrv5resetEvE3__c_3>:
     6ae:	41 54 2b 43 49 50 4d 55 58 3d 31 00                 AT+CIPMUX=1.

000006ba <_ZZN6EspDrv5resetEvE3__c_2>:
     6ba:	41 54 2b 43 57 4d 4f 44 45 3d 31 00                 AT+CWMODE=1.

000006c6 <_ZZN6EspDrv5resetEvE3__c_1>:
     6c6:	41 54 45 30 00                                      ATE0.

000006cb <_ZZN6EspDrv5resetEvE3__c_0>:
     6cb:	41 54 2b 52 53 54 00                                AT+RST.

000006d2 <_ZZN6EspDrv14wifiDriverInitEP6StreamE3__c_3>:
     6d2:	49 6e 69 74 69 6c 69 7a 61 74 69 6f 6e 20 73 75     Initilization su
     6e2:	63 63 65 73 73 66 75 6c 20 2d 00                    ccessful -.

000006ed <_ZZN6EspDrv14wifiDriverInitEP6StreamE3__c_2>:
     6ed:	57 61 72 6e 69 6e 67 3a 20 55 6e 73 75 70 70 6f     Warning: Unsuppo
     6fd:	72 74 65 64 20 66 69 72 6d 77 61 72 65 00           rted firmware.

0000070b <_ZZN6EspDrv14wifiDriverInitEP6StreamE3__c_1>:
     70b:	43 61 6e 6e 6f 74 20 69 6e 69 74 69 61 6c 69 7a     Cannot initializ
     71b:	65 20 45 53 50 20 6d 6f 64 75 6c 65 00              e ESP module.

00000728 <_ZZN6EspDrv14wifiDriverInitEP6StreamE3__c_0>:
     728:	41 54 00 00                                         AT..

0000072c <__ctors_start>:
     72c:	4e 07       	cpc	r20, r30
     72e:	95 0a       	sbc	r9, r21
     730:	42 1f       	adc	r20, r18
     732:	36 22       	and	r3, r22
     734:	4c 24       	eor	r4, r12
     736:	be 25       	eor	r27, r14
     738:	15 2d       	mov	r17, r5

0000073a <__ctors_end>:
     73a:	82 07       	cpc	r24, r18
     73c:	25 2d       	mov	r18, r5

0000073e <__dtors_end>:
     73e:	11 24       	eor	r1, r1
     740:	1f be       	out	0x3f, r1	; 63
     742:	cf ef       	ldi	r28, 0xFF	; 255
     744:	d8 e0       	ldi	r29, 0x08	; 8
     746:	de bf       	out	0x3e, r29	; 62
     748:	cd bf       	out	0x3d, r28	; 61

0000074a <__do_copy_data>:
     74a:	13 e0       	ldi	r17, 0x03	; 3
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b1 e0       	ldi	r27, 0x01	; 1
     750:	e6 eb       	ldi	r30, 0xB6	; 182
     752:	f6 e7       	ldi	r31, 0x76	; 118
     754:	02 c0       	rjmp	.+4      	; 0x75a <__do_copy_data+0x10>
     756:	05 90       	lpm	r0, Z+
     758:	0d 92       	st	X+, r0
     75a:	ae 3e       	cpi	r26, 0xEE	; 238
     75c:	b1 07       	cpc	r27, r17
     75e:	d9 f7       	brne	.-10     	; 0x756 <__do_copy_data+0xc>

00000760 <__do_clear_bss>:
     760:	26 e0       	ldi	r18, 0x06	; 6
     762:	ae ee       	ldi	r26, 0xEE	; 238
     764:	b3 e0       	ldi	r27, 0x03	; 3
     766:	01 c0       	rjmp	.+2      	; 0x76a <.do_clear_bss_start>

00000768 <.do_clear_bss_loop>:
     768:	1d 92       	st	X+, r1

0000076a <.do_clear_bss_start>:
     76a:	a2 3f       	cpi	r26, 0xF2	; 242
     76c:	b2 07       	cpc	r27, r18
     76e:	e1 f7       	brne	.-8      	; 0x768 <.do_clear_bss_loop>

00000770 <__do_global_ctors>:
     770:	13 e0       	ldi	r17, 0x03	; 3
     772:	cd e9       	ldi	r28, 0x9D	; 157
     774:	d3 e0       	ldi	r29, 0x03	; 3
     776:	04 c0       	rjmp	.+8      	; 0x780 <__do_global_ctors+0x10>
     778:	21 97       	sbiw	r28, 0x01	; 1
     77a:	fe 01       	movw	r30, r28
     77c:	0e 94 4c 33 	call	0x6698	; 0x6698 <__tablejump2__>
     780:	c6 39       	cpi	r28, 0x96	; 150
     782:	d1 07       	cpc	r29, r17
     784:	c9 f7       	brne	.-14     	; 0x778 <__do_global_ctors+0x8>
     786:	0e 94 1b 0b 	call	0x1636	; 0x1636 <main>
     78a:	0c 94 4e 3b 	jmp	0x769c	; 0x769c <__do_global_dtors>

0000078e <__bad_interrupt>:
     78e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000792 <_Z8callbackPcPhj>:
     byte* payload: char array with payload of MQTT packet
     unsigned int length: length of the payload
   Return: None
   Description:
 *****************************************************/
void callback(char* topic, byte* payload, unsigned int length) {
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <_Z8callbackPcPhj+0xe>
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <_Z8callbackPcPhj+0x10>
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <_Z8callbackPcPhj+0x12>
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
  }
  message_buff[i] = '\0';

  Serial.print(F("Received some data: "));
  Serial.println(String(message_buff));
}
     7a8:	ed b6       	in	r14, 0x3d	; 61
     7aa:	fe b6       	in	r15, 0x3e	; 62
   Description:
 *****************************************************/
void callback(char* topic, byte* payload, unsigned int length) {
  // handle message arrived
  int i = 0;
  char message_buff[length + 1];
     7ac:	ca 01       	movw	r24, r20
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	2d b7       	in	r18, 0x3d	; 61
     7b2:	3e b7       	in	r19, 0x3e	; 62
     7b4:	28 1b       	sub	r18, r24
     7b6:	39 0b       	sbc	r19, r25
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	3e bf       	out	0x3e, r19	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	2d bf       	out	0x3d, r18	; 61
     7c2:	0d b7       	in	r16, 0x3d	; 61
     7c4:	1e b7       	in	r17, 0x3e	; 62
     7c6:	0f 5f       	subi	r16, 0xFF	; 255
     7c8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ca:	fb 01       	movw	r30, r22
     7cc:	d8 01       	movw	r26, r16
     7ce:	9b 01       	movw	r18, r22
     7d0:	24 0f       	add	r18, r20
     7d2:	35 1f       	adc	r19, r21
  for (i = 0; i < length; i++) {
     7d4:	e2 17       	cp	r30, r18
     7d6:	f3 07       	cpc	r31, r19
     7d8:	19 f0       	breq	.+6      	; 0x7e0 <_Z8callbackPcPhj+0x4e>
    message_buff[i] = payload[i];
     7da:	81 91       	ld	r24, Z+
     7dc:	8d 93       	st	X+, r24
 *****************************************************/
void callback(char* topic, byte* payload, unsigned int length) {
  // handle message arrived
  int i = 0;
  char message_buff[length + 1];
  for (i = 0; i < length; i++) {
     7de:	fa cf       	rjmp	.-12     	; 0x7d4 <_Z8callbackPcPhj+0x42>
    message_buff[i] = payload[i];
  }
  message_buff[i] = '\0';
     7e0:	f8 01       	movw	r30, r16
     7e2:	e4 0f       	add	r30, r20
     7e4:	f5 1f       	adc	r31, r21
     7e6:	10 82       	st	Z, r1

  Serial.print(F("Received some data: "));
     7e8:	68 e6       	ldi	r22, 0x68	; 104
     7ea:	72 e0       	ldi	r23, 0x02	; 2
     7ec:	87 e0       	ldi	r24, 0x07	; 7
     7ee:	95 e0       	ldi	r25, 0x05	; 5
     7f0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(String(message_buff));
     7f4:	b8 01       	movw	r22, r16
     7f6:	ce 01       	movw	r24, r28
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <_ZN6StringC1EPKc>
     7fe:	be 01       	movw	r22, r28
     800:	6f 5f       	subi	r22, 0xFF	; 255
     802:	7f 4f       	sbci	r23, 0xFF	; 255
     804:	87 e0       	ldi	r24, 0x07	; 7
     806:	95 e0       	ldi	r25, 0x05	; 5
     808:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print7printlnERK6String>
     80c:	ce 01       	movw	r24, r28
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN6StringD1Ev>
}
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	fe be       	out	0x3e, r15	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	ed be       	out	0x3d, r14	; 61
     81e:	26 96       	adiw	r28, 0x06	; 6
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	08 95       	ret

00000838 <_Z11connectMQTTv>:
   Inputs: None
   Return: boolean
   Description:
 *****************************************************/
boolean connectMQTT()
{
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	00 d0       	rcall	.+0      	; 0x83e <_Z11connectMQTTv+0x6>
     83e:	00 d0       	rcall	.+0      	; 0x840 <_Z11connectMQTTv+0x8>
     840:	00 d0       	rcall	.+0      	; 0x842 <_Z11connectMQTTv+0xa>
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
  if (client.connect((char*) mqtt_username, (char*) mqtt_username, (char*) mqtt_password)) {
     846:	26 e0       	ldi	r18, 0x06	; 6
     848:	31 e0       	ldi	r19, 0x01	; 1
     84a:	4e e1       	ldi	r20, 0x1E	; 30
     84c:	51 e0       	ldi	r21, 0x01	; 1
     84e:	ba 01       	movw	r22, r20
     850:	8e ee       	ldi	r24, 0xEE	; 238
     852:	93 e0       	ldi	r25, 0x03	; 3
     854:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN12PubSubClient7connectEPKcS1_S1_>
     858:	88 23       	and	r24, r24
     85a:	09 f4       	brne	.+2      	; 0x85e <_Z11connectMQTTv+0x26>
     85c:	5e c0       	rjmp	.+188    	; 0x91a <__stack+0x1b>
    Serial.println(F("Connected to MQTT broker"));
     85e:	6f e4       	ldi	r22, 0x4F	; 79
     860:	72 e0       	ldi	r23, 0x02	; 2
     862:	87 e0       	ldi	r24, 0x07	; 7
     864:	95 e0       	ldi	r25, 0x05	; 5
     866:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>

    if (client.publish((char*) pub_topic, "{\"event_data\":{\"mqtt_connected\":true}}")) {
     86a:	44 ec       	ldi	r20, 0xC4	; 196
     86c:	51 e0       	ldi	r21, 0x01	; 1
     86e:	68 e5       	ldi	r22, 0x58	; 88
     870:	71 e0       	ldi	r23, 0x01	; 1
     872:	8e ee       	ldi	r24, 0xEE	; 238
     874:	93 e0       	ldi	r25, 0x03	; 3
     876:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN12PubSubClient7publishEPKcS1_>
     87a:	88 23       	and	r24, r24
     87c:	39 f0       	breq	.+14     	; 0x88c <_Z11connectMQTTv+0x54>
      Serial.println("Publish connected message ok");
     87e:	6b ee       	ldi	r22, 0xEB	; 235
     880:	71 e0       	ldi	r23, 0x01	; 1
     882:	87 e0       	ldi	r24, 0x07	; 7
     884:	95 e0       	ldi	r25, 0x05	; 5
     886:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>
     88a:	1b c0       	rjmp	.+54     	; 0x8c2 <_Z11connectMQTTv+0x8a>
    } else {
      Serial.print(F("Publish connected message failed: "));
     88c:	6c e2       	ldi	r22, 0x2C	; 44
     88e:	72 e0       	ldi	r23, 0x02	; 2
     890:	87 e0       	ldi	r24, 0x07	; 7
     892:	95 e0       	ldi	r25, 0x05	; 5
     894:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(String(client.state()));
     898:	8e ee       	ldi	r24, 0xEE	; 238
     89a:	93 e0       	ldi	r25, 0x03	; 3
     89c:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <_ZN12PubSubClient5stateEv>
     8a0:	4a e0       	ldi	r20, 0x0A	; 10
     8a2:	bc 01       	movw	r22, r24
     8a4:	ce 01       	movw	r24, r28
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	0e 94 0d 10 	call	0x201a	; 0x201a <_ZN6StringC1Eih>
     8ac:	be 01       	movw	r22, r28
     8ae:	6f 5f       	subi	r22, 0xFF	; 255
     8b0:	7f 4f       	sbci	r23, 0xFF	; 255
     8b2:	87 e0       	ldi	r24, 0x07	; 7
     8b4:	95 e0       	ldi	r25, 0x05	; 5
     8b6:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print7printlnERK6String>
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN6StringD1Ev>
    }

    if (client.subscribe((char *)sub_topic, 1)) {
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	63 e3       	ldi	r22, 0x33	; 51
     8c6:	71 e0       	ldi	r23, 0x01	; 1
     8c8:	8e ee       	ldi	r24, 0xEE	; 238
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <_ZN12PubSubClient9subscribeEPKch>
     8d0:	88 23       	and	r24, r24
     8d2:	39 f0       	breq	.+14     	; 0x8e2 <_Z11connectMQTTv+0xaa>
      Serial.println(F("Successfully subscribed"));
     8d4:	64 e1       	ldi	r22, 0x14	; 20
     8d6:	72 e0       	ldi	r23, 0x02	; 2
     8d8:	87 e0       	ldi	r24, 0x07	; 7
     8da:	95 e0       	ldi	r25, 0x05	; 5
     8dc:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
     8e0:	2a c0       	rjmp	.+84     	; 0x936 <__stack+0x37>
    } else {
      Serial.print(F("Subscribed failed: "));
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	72 e0       	ldi	r23, 0x02	; 2
     8e6:	87 e0       	ldi	r24, 0x07	; 7
     8e8:	95 e0       	ldi	r25, 0x05	; 5
     8ea:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(String(client.state()));
     8ee:	8e ee       	ldi	r24, 0xEE	; 238
     8f0:	93 e0       	ldi	r25, 0x03	; 3
     8f2:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <_ZN12PubSubClient5stateEv>
     8f6:	4a e0       	ldi	r20, 0x0A	; 10
     8f8:	bc 01       	movw	r22, r24
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	0e 94 0d 10 	call	0x201a	; 0x201a <_ZN6StringC1Eih>
     902:	be 01       	movw	r22, r28
     904:	6f 5f       	subi	r22, 0xFF	; 255
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	87 e0       	ldi	r24, 0x07	; 7
     90a:	95 e0       	ldi	r25, 0x05	; 5
     90c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print7printlnERK6String>
     910:	ce 01       	movw	r24, r28
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN6StringD1Ev>
     918:	0e c0       	rjmp	.+28     	; 0x936 <__stack+0x37>
    }
  } else {
    Serial.println(F("MQTT connect failed"));
     91a:	6c ee       	ldi	r22, 0xEC	; 236
     91c:	71 e0       	ldi	r23, 0x01	; 1
     91e:	87 e0       	ldi	r24, 0x07	; 7
     920:	95 e0       	ldi	r25, 0x05	; 5
     922:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("Will reset and try again..."));
     926:	60 ed       	ldi	r22, 0xD0	; 208
     928:	71 e0       	ldi	r23, 0x01	; 1
     92a:	87 e0       	ldi	r24, 0x07	; 7
     92c:	95 e0       	ldi	r25, 0x05	; 5
     92e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    abort();
     932:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <abort>
  }
  return client.connected();
     936:	8e ee       	ldi	r24, 0xEE	; 238
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN12PubSubClient9connectedEv>
}
     93e:	26 96       	adiw	r28, 0x06	; 6
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     950:	26 e0       	ldi	r18, 0x06	; 6
     952:	40 e8       	ldi	r20, 0x80	; 128
     954:	55 e2       	ldi	r21, 0x25	; 37
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	87 e0       	ldi	r24, 0x07	; 7
     95c:	95 e0       	ldi	r25, 0x05	; 5
     95e:	0e 94 ca 09 	call	0x1394	; 0x1394 <_ZN14HardwareSerial5beginEmh>
   sensor I2C comms, and I/O mode of pins
 *****************************************************/
void setup() {

  Serial.begin(9600);
  soft.begin(9600);
     962:	40 e8       	ldi	r20, 0x80	; 128
     964:	55 e2       	ldi	r21, 0x25	; 37
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	84 ea       	ldi	r24, 0xA4	; 164
     96c:	94 e0       	ldi	r25, 0x04	; 4
     96e:	0e 94 2c 21 	call	0x4258	; 0x4258 <_ZN14SoftwareSerial5beginEl>
  while (!Serial) {}

  Serial.println(F("Initializing hardware settings..."));
     972:	6f ef       	ldi	r22, 0xFF	; 255
     974:	73 e0       	ldi	r23, 0x03	; 3
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	95 e0       	ldi	r25, 0x05	; 5
     97a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>

  Serial.println(F("Attempting to connect to WiFi network..."));
     97e:	66 ed       	ldi	r22, 0xD6	; 214
     980:	73 e0       	ldi	r23, 0x03	; 3
     982:	87 e0       	ldi	r24, 0x07	; 7
     984:	95 e0       	ldi	r25, 0x05	; 5
     986:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
  WiFi.init(&soft);
     98a:	84 ea       	ldi	r24, 0xA4	; 164
     98c:	94 e0       	ldi	r25, 0x04	; 4
     98e:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN12WiFiEspClass4initEP6Stream>
  WiFi.begin(myssid, myssidpw);
     992:	4d e8       	ldi	r20, 0x8D	; 141
     994:	51 e0       	ldi	r21, 0x01	; 1
     996:	6d e9       	ldi	r22, 0x9D	; 157
     998:	71 e0       	ldi	r23, 0x01	; 1
     99a:	8b ef       	ldi	r24, 0xFB	; 251
     99c:	95 e0       	ldi	r25, 0x05	; 5
     99e:	0e 94 04 22 	call	0x4408	; 0x4408 <_ZN12WiFiEspClass5beginEPKcS1_>
  delay(5000);
     9a2:	68 e8       	ldi	r22, 0x88	; 136
     9a4:	73 e1       	ldi	r23, 0x13	; 19
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>

  while (WiFi.status() != WL_CONNECTED) {
     9ae:	8b ef       	ldi	r24, 0xFB	; 251
     9b0:	95 e0       	ldi	r25, 0x05	; 5
     9b2:	0e 94 13 22 	call	0x4426	; 0x4426 <_ZN12WiFiEspClass6statusEv>
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	99 f0       	breq	.+38     	; 0x9e0 <setup+0x90>
    Serial.println(F("Failed to connect, resetting"));
     9ba:	69 eb       	ldi	r22, 0xB9	; 185
     9bc:	73 e0       	ldi	r23, 0x03	; 3
     9be:	87 e0       	ldi	r24, 0x07	; 7
     9c0:	95 e0       	ldi	r25, 0x05	; 5
     9c2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    WiFi.begin(myssid, myssidpw);
     9c6:	4d e8       	ldi	r20, 0x8D	; 141
     9c8:	51 e0       	ldi	r21, 0x01	; 1
     9ca:	6d e9       	ldi	r22, 0x9D	; 157
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	8b ef       	ldi	r24, 0xFB	; 251
     9d0:	95 e0       	ldi	r25, 0x05	; 5
     9d2:	0e 94 04 22 	call	0x4408	; 0x4408 <_ZN12WiFiEspClass5beginEPKcS1_>
    delay(1000);
     9d6:	68 ee       	ldi	r22, 0xE8	; 232
     9d8:	73 e0       	ldi	r23, 0x03	; 3
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	e5 cf       	rjmp	.-54     	; 0x9aa <setup+0x5a>
  }
  Serial.println(F("Connected to Wifi!"));
     9e0:	66 ea       	ldi	r22, 0xA6	; 166
     9e2:	73 e0       	ldi	r23, 0x03	; 3
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	95 e0       	ldi	r25, 0x05	; 5
     9e8:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
  connectMQTT();
     9ec:	0e 94 1c 04 	call	0x838	; 0x838 <_Z11connectMQTTv>

  Serial.println(F("Connecting to BME280 sensor..."));
     9f0:	67 e8       	ldi	r22, 0x87	; 135
     9f2:	73 e0       	ldi	r23, 0x03	; 3
     9f4:	87 e0       	ldi	r24, 0x07	; 7
     9f6:	95 e0       	ldi	r25, 0x05	; 5
     9f8:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (!bme.begin()) {
     9fc:	8e ec       	ldi	r24, 0xCE	; 206
     9fe:	94 e0       	ldi	r25, 0x04	; 4
     a00:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN15Adafruit_BME2805beginEv>
     a04:	81 11       	cpse	r24, r1
     a06:	07 c0       	rjmp	.+14     	; 0xa16 <setup+0xc6>
    Serial.println(F("Could not find a valid BME280 sensor, check wiring!"));
     a08:	63 e5       	ldi	r22, 0x53	; 83
     a0a:	73 e0       	ldi	r23, 0x03	; 3
     a0c:	87 e0       	ldi	r24, 0x07	; 7
     a0e:	95 e0       	ldi	r25, 0x05	; 5
     a10:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
     a14:	ff cf       	rjmp	.-2      	; 0xa14 <setup+0xc4>
    while (1);
  }
  Serial.println(F("Successfully connected to BME280 sensor!"));
     a16:	6a e2       	ldi	r22, 0x2A	; 42
     a18:	73 e0       	ldi	r23, 0x03	; 3
     a1a:	87 e0       	ldi	r24, 0x07	; 7
     a1c:	95 e0       	ldi	r25, 0x05	; 5
     a1e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>

  Serial.println(F("Connecting to CO2 sensor..."));
     a22:	6e e0       	ldi	r22, 0x0E	; 14
     a24:	73 e0       	ldi	r23, 0x03	; 3
     a26:	87 e0       	ldi	r24, 0x07	; 7
     a28:	95 e0       	ldi	r25, 0x05	; 5
     a2a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (!co2sensor.begin(co2SensorPin)) {
     a2e:	6f e0       	ldi	r22, 0x0F	; 15
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	83 ec       	ldi	r24, 0xC3	; 195
     a34:	94 e0       	ldi	r25, 0x04	; 4
     a36:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <_ZN10co2_sensor5beginEi>
     a3a:	81 11       	cpse	r24, r1
     a3c:	07 c0       	rjmp	.+14     	; 0xa4c <setup+0xfc>
    Serial.println(F("Could not find a valid CO2 sensor, check wiring!"));
     a3e:	6d ed       	ldi	r22, 0xDD	; 221
     a40:	72 e0       	ldi	r23, 0x02	; 2
     a42:	87 e0       	ldi	r24, 0x07	; 7
     a44:	95 e0       	ldi	r25, 0x05	; 5
     a46:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
     a4a:	ff cf       	rjmp	.-2      	; 0xa4a <setup+0xfa>
    while (1);
  }
  Serial.println(F("Successfully connected to CO2 sensor!"));
     a4c:	67 eb       	ldi	r22, 0xB7	; 183
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	87 e0       	ldi	r24, 0x07	; 7
     a52:	95 e0       	ldi	r25, 0x05	; 5
     a54:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>

  Serial.println(F("Connecting to soil sensor..."));
     a58:	6a e9       	ldi	r22, 0x9A	; 154
     a5a:	72 e0       	ldi	r23, 0x02	; 2
     a5c:	87 e0       	ldi	r24, 0x07	; 7
     a5e:	95 e0       	ldi	r25, 0x05	; 5
     a60:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (!soilSensor.begin(0x36)) {
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	4f ef       	ldi	r20, 0xFF	; 255
     a68:	66 e3       	ldi	r22, 0x36	; 54
     a6a:	85 ec       	ldi	r24, 0xC5	; 197
     a6c:	94 e0       	ldi	r25, 0x04	; 4
     a6e:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN15Adafruit_seesaw5beginEhab>
     a72:	81 11       	cpse	r24, r1
     a74:	07 c0       	rjmp	.+14     	; 0xa84 <setup+0x134>
    Serial.println(F("ERROR! Soil sensor not found"));
     a76:	6d e7       	ldi	r22, 0x7D	; 125
     a78:	72 e0       	ldi	r23, 0x02	; 2
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	95 e0       	ldi	r25, 0x05	; 5
     a7e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
     a82:	ff cf       	rjmp	.-2      	; 0xa82 <setup+0x132>
    while (1);
  } else {
    Serial.print("Soil sensor started! version: ");
     a84:	68 e0       	ldi	r22, 0x08	; 8
     a86:	72 e0       	ldi	r23, 0x02	; 2
     a88:	87 e0       	ldi	r24, 0x07	; 7
     a8a:	95 e0       	ldi	r25, 0x05	; 5
     a8c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    Serial.println(soilSensor.getVersion(), HEX);
     a90:	85 ec       	ldi	r24, 0xC5	; 197
     a92:	94 e0       	ldi	r25, 0x04	; 4
     a94:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <_ZN15Adafruit_seesaw10getVersionEv>
     a98:	ab 01       	movw	r20, r22
     a9a:	bc 01       	movw	r22, r24
     a9c:	20 e1       	ldi	r18, 0x10	; 16
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	87 e0       	ldi	r24, 0x07	; 7
     aa2:	95 e0       	ldi	r25, 0x05	; 5
     aa4:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZN5Print7printlnEmi>
  }

  pinMode(phSensorPin, INPUT);
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	8e e0       	ldi	r24, 0x0E	; 14
     aac:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>

  Serial.println("Setup is complete!");
     ab0:	67 e2       	ldi	r22, 0x27	; 39
     ab2:	72 e0       	ldi	r23, 0x02	; 2
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	95 e0       	ldi	r25, 0x05	; 5
     ab8:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>

00000abc <_Z14heartbeat_loopv>:
   Inputs: None
   Return: None
   Description:  Initializes serial communications,
   sensor I2C comms, and I/O mode of pins
 *****************************************************/
void heartbeat_loop() {
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	2c 97       	sbiw	r28, 0x0c	; 12
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
  if ((millis() - heartbeat_timer) > heartbeat_period) {
     ad4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
     ad8:	00 91 95 04 	lds	r16, 0x0495	; 0x800495 <_ZL15heartbeat_timer>
     adc:	10 91 96 04 	lds	r17, 0x0496	; 0x800496 <_ZL15heartbeat_timer+0x1>
     ae0:	01 2e       	mov	r0, r17
     ae2:	00 0c       	add	r0, r0
     ae4:	22 0b       	sbc	r18, r18
     ae6:	33 0b       	sbc	r19, r19
     ae8:	dc 01       	movw	r26, r24
     aea:	cb 01       	movw	r24, r22
     aec:	80 1b       	sub	r24, r16
     aee:	91 0b       	sbc	r25, r17
     af0:	a2 0b       	sbc	r26, r18
     af2:	b3 0b       	sbc	r27, r19
     af4:	81 36       	cpi	r24, 0x61	; 97
     af6:	9a 4e       	sbci	r25, 0xEA	; 234
     af8:	af 4f       	sbci	r26, 0xFF	; 255
     afa:	bf 4f       	sbci	r27, 0xFF	; 255
     afc:	08 f4       	brcc	.+2      	; 0xb00 <_Z14heartbeat_loopv+0x44>
     afe:	5d c0       	rjmp	.+186    	; 0xbba <_Z14heartbeat_loopv+0xfe>
    heartbeat_timer = millis();
     b00:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
     b04:	70 93 96 04 	sts	0x0496, r23	; 0x800496 <_ZL15heartbeat_timer+0x1>
     b08:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <_ZL15heartbeat_timer>
    String payload = "{\"event_data\":{\"millis\":";
     b0c:	6a e3       	ldi	r22, 0x3A	; 58
     b0e:	72 e0       	ldi	r23, 0x02	; 2
     b10:	ce 01       	movw	r24, r28
     b12:	07 96       	adiw	r24, 0x07	; 7
     b14:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <_ZN6StringC1EPKc>
    payload += millis();
     b18:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
     b1c:	ab 01       	movw	r20, r22
     b1e:	bc 01       	movw	r22, r24
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
	String & operator += (unsigned long num)	{concat(num); return (*this);}
     b20:	ce 01       	movw	r24, r28
     b22:	07 96       	adiw	r24, 0x07	; 7
     b24:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN6String6concatEm>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     b28:	63 e5       	ldi	r22, 0x53	; 83
     b2a:	72 e0       	ldi	r23, 0x02	; 2
     b2c:	ce 01       	movw	r24, r28
     b2e:	07 96       	adiw	r24, 0x07	; 7
     b30:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN6String6concatEPKc>
    payload += ",\"heartbeat\":true}}";

    if (client.loop()) {
     b34:	8e ee       	ldi	r24, 0xEE	; 238
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <_ZN12PubSubClient4loopEv>
     b3c:	88 23       	and	r24, r24
     b3e:	c9 f1       	breq	.+114    	; 0xbb2 <_Z14heartbeat_loopv+0xf6>
      Serial.print(F("Sending heartbeat: "));
     b40:	6b e8       	ldi	r22, 0x8B	; 139
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	87 e0       	ldi	r24, 0x07	; 7
     b46:	95 e0       	ldi	r25, 0x05	; 5
     b48:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(payload);
     b4c:	be 01       	movw	r22, r28
     b4e:	69 5f       	subi	r22, 0xF9	; 249
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	87 e0       	ldi	r24, 0x07	; 7
     b54:	95 e0       	ldi	r25, 0x05	; 5
     b56:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print7printlnERK6String>

      if (client.publish((char *) pub_topic, (char*) payload.c_str()) ) {
     b5a:	4f 81       	ldd	r20, Y+7	; 0x07
     b5c:	58 85       	ldd	r21, Y+8	; 0x08
     b5e:	68 e5       	ldi	r22, 0x58	; 88
     b60:	71 e0       	ldi	r23, 0x01	; 1
     b62:	8e ee       	ldi	r24, 0xEE	; 238
     b64:	93 e0       	ldi	r25, 0x03	; 3
     b66:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN12PubSubClient7publishEPKcS1_>
     b6a:	88 23       	and	r24, r24
     b6c:	39 f0       	breq	.+14     	; 0xb7c <_Z14heartbeat_loopv+0xc0>
        Serial.println(F("Publish ok"));
     b6e:	60 e8       	ldi	r22, 0x80	; 128
     b70:	71 e0       	ldi	r23, 0x01	; 1
     b72:	87 e0       	ldi	r24, 0x07	; 7
     b74:	95 e0       	ldi	r25, 0x05	; 5
     b76:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
     b7a:	1b c0       	rjmp	.+54     	; 0xbb2 <_Z14heartbeat_loopv+0xf6>
      } else {
        Serial.print(F("Failed to publish heartbeat: "));
     b7c:	62 e6       	ldi	r22, 0x62	; 98
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	87 e0       	ldi	r24, 0x07	; 7
     b82:	95 e0       	ldi	r25, 0x05	; 5
     b84:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(String(client.state()));
     b88:	8e ee       	ldi	r24, 0xEE	; 238
     b8a:	93 e0       	ldi	r25, 0x03	; 3
     b8c:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <_ZN12PubSubClient5stateEv>
     b90:	4a e0       	ldi	r20, 0x0A	; 10
     b92:	bc 01       	movw	r22, r24
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	0e 94 0d 10 	call	0x201a	; 0x201a <_ZN6StringC1Eih>
     b9c:	be 01       	movw	r22, r28
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	87 e0       	ldi	r24, 0x07	; 7
     ba4:	95 e0       	ldi	r25, 0x05	; 5
     ba6:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print7printlnERK6String>
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN6StringD1Ev>
   sensor I2C comms, and I/O mode of pins
 *****************************************************/
void heartbeat_loop() {
  if ((millis() - heartbeat_timer) > heartbeat_period) {
    heartbeat_timer = millis();
    String payload = "{\"event_data\":{\"millis\":";
     bb2:	ce 01       	movw	r24, r28
     bb4:	07 96       	adiw	r24, 0x07	; 7
     bb6:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN6StringD1Ev>
        Serial.print(F("Failed to publish heartbeat: "));
        Serial.println(String(client.state()));
      }
    }
  }
}
     bba:	2c 96       	adiw	r28, 0x0c	; 12
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <_Z10getPHlevelv>:
   Inputs: None
   Return: None
   Description:  
 *****************************************************/
float getPHlevel() {
  float phAnalogReading = analogRead(phSensorPin) * vref / 1024.0;
     bd0:	8e e0       	ldi	r24, 0x0E	; 14
     bd2:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <analogRead>
  float phLevel = 3.5 * phAnalogReading + phOffset;
  return phLevel;
     bd6:	bc 01       	movw	r22, r24
     bd8:	99 0f       	add	r25, r25
     bda:	88 0b       	sbc	r24, r24
     bdc:	99 0b       	sbc	r25, r25
     bde:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatsisf>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 ea       	ldi	r20, 0xA0	; 160
     be8:	50 e4       	ldi	r21, 0x40	; 64
     bea:	0e 94 81 08 	call	0x1102	; 0x1102 <__mulsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e8       	ldi	r20, 0x80	; 128
     bf4:	5a e3       	ldi	r21, 0x3A	; 58
     bf6:	0e 94 81 08 	call	0x1102	; 0x1102 <__mulsf3>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e6       	ldi	r20, 0x60	; 96
     c00:	50 e4       	ldi	r21, 0x40	; 64
     c02:	0e 94 81 08 	call	0x1102	; 0x1102 <__mulsf3>
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	a9 01       	movw	r20, r18
     c0c:	0e 94 87 07 	call	0xf0e	; 0xf0e <__addsf3>
}
     c10:	08 95       	ret

00000c12 <_Z11sensor_loopv>:
   Function: sensor_loop
   Inputs: None
   Return: None
   Description:
 *****************************************************/
void sensor_loop() {
     c12:	4f 92       	push	r4
     c14:	5f 92       	push	r5
     c16:	6f 92       	push	r6
     c18:	7f 92       	push	r7
     c1a:	8f 92       	push	r8
     c1c:	9f 92       	push	r9
     c1e:	af 92       	push	r10
     c20:	bf 92       	push	r11
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	60 97       	sbiw	r28, 0x10	; 16
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
  float moistureLevel = 0.0;
  float phLevel = 0.0;
  float co2Level = 0.0;


  if ((millis() - sensor_timer) > sensor_period) {
     c42:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
     c46:	00 91 93 04 	lds	r16, 0x0493	; 0x800493 <_ZL12sensor_timer>
     c4a:	10 91 94 04 	lds	r17, 0x0494	; 0x800494 <_ZL12sensor_timer+0x1>
     c4e:	01 2e       	mov	r0, r17
     c50:	00 0c       	add	r0, r0
     c52:	22 0b       	sbc	r18, r18
     c54:	33 0b       	sbc	r19, r19
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	80 1b       	sub	r24, r16
     c5c:	91 0b       	sbc	r25, r17
     c5e:	a2 0b       	sbc	r26, r18
     c60:	b3 0b       	sbc	r27, r19
     c62:	89 38       	cpi	r24, 0x89	; 137
     c64:	93 41       	sbci	r25, 0x13	; 19
     c66:	a1 05       	cpc	r26, r1
     c68:	b1 05       	cpc	r27, r1
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <_Z11sensor_loopv+0x5c>
     c6c:	ba c0       	rjmp	.+372    	; 0xde2 <_Z11sensor_loopv+0x1d0>
    sensor_timer = millis();
     c6e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
     c72:	70 93 94 04 	sts	0x0494, r23	; 0x800494 <_ZL12sensor_timer+0x1>
     c76:	60 93 93 04 	sts	0x0493, r22	; 0x800493 <_ZL12sensor_timer>
    tempC = bme.readTemperature();
     c7a:	8e ec       	ldi	r24, 0xCE	; 206
     c7c:	94 e0       	ldi	r25, 0x04	; 4
     c7e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN15Adafruit_BME28015readTemperatureEv>
     c82:	2b 01       	movw	r4, r22
     c84:	3c 01       	movw	r6, r24
    humidity = bme.readHumidity();
     c86:	8e ec       	ldi	r24, 0xCE	; 206
     c88:	94 e0       	ldi	r25, 0x04	; 4
     c8a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN15Adafruit_BME28012readHumidityEv>
     c8e:	4b 01       	movw	r8, r22
     c90:	5c 01       	movw	r10, r24
    moistureLevel = soilSensor.touchRead(0);
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	85 ec       	ldi	r24, 0xC5	; 197
     c96:	94 e0       	ldi	r25, 0x04	; 4
     c98:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <_ZN15Adafruit_seesaw9touchReadEh>
     c9c:	8c 01       	movw	r16, r24
    phLevel = getPHlevel();
     c9e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_Z10getPHlevelv>
     ca2:	6b 01       	movw	r12, r22
     ca4:	7c 01       	movw	r14, r24
    co2Level = co2sensor.readCO2level();
     ca6:	83 ec       	ldi	r24, 0xC3	; 195
     ca8:	94 e0       	ldi	r25, 0x04	; 4
     caa:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <_ZN10co2_sensor12readCO2levelEv>
     cae:	6d 87       	std	Y+13, r22	; 0x0d
     cb0:	7e 87       	std	Y+14, r23	; 0x0e
     cb2:	8f 87       	std	Y+15, r24	; 0x0f
     cb4:	98 8b       	std	Y+16, r25	; 0x10

    String payload = "{\"event_data\":{\"temperature\":";
     cb6:	67 e6       	ldi	r22, 0x67	; 103
     cb8:	72 e0       	ldi	r23, 0x02	; 2
     cba:	ce 01       	movw	r24, r28
     cbc:	07 96       	adiw	r24, 0x07	; 7
     cbe:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <_ZN6StringC1EPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
	String & operator += (unsigned long num)	{concat(num); return (*this);}
	String & operator += (float num)		{concat(num); return (*this);}
     cc2:	b3 01       	movw	r22, r6
     cc4:	a2 01       	movw	r20, r4
     cc6:	ce 01       	movw	r24, r28
     cc8:	07 96       	adiw	r24, 0x07	; 7
     cca:	0e 94 a7 10 	call	0x214e	; 0x214e <_ZN6String6concatEf>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     cce:	65 e8       	ldi	r22, 0x85	; 133
     cd0:	72 e0       	ldi	r23, 0x02	; 2
     cd2:	ce 01       	movw	r24, r28
     cd4:	07 96       	adiw	r24, 0x07	; 7
     cd6:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN6String6concatEPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
	String & operator += (unsigned long num)	{concat(num); return (*this);}
	String & operator += (float num)		{concat(num); return (*this);}
     cda:	b5 01       	movw	r22, r10
     cdc:	a4 01       	movw	r20, r8
     cde:	ce 01       	movw	r24, r28
     ce0:	07 96       	adiw	r24, 0x07	; 7
     ce2:	0e 94 a7 10 	call	0x214e	; 0x214e <_ZN6String6concatEf>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     ce6:	62 e9       	ldi	r22, 0x92	; 146
     ce8:	72 e0       	ldi	r23, 0x02	; 2
     cea:	ce 01       	movw	r24, r28
     cec:	07 96       	adiw	r24, 0x07	; 7
     cee:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN6String6concatEPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
	String & operator += (unsigned long num)	{concat(num); return (*this);}
	String & operator += (float num)		{concat(num); return (*this);}
     cf2:	b8 01       	movw	r22, r16
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__floatunsisf>
     cfc:	ab 01       	movw	r20, r22
     cfe:	bc 01       	movw	r22, r24
     d00:	ce 01       	movw	r24, r28
     d02:	07 96       	adiw	r24, 0x07	; 7
     d04:	0e 94 a7 10 	call	0x214e	; 0x214e <_ZN6String6concatEf>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     d08:	6f e9       	ldi	r22, 0x9F	; 159
     d0a:	72 e0       	ldi	r23, 0x02	; 2
     d0c:	ce 01       	movw	r24, r28
     d0e:	07 96       	adiw	r24, 0x07	; 7
     d10:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN6String6concatEPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
	String & operator += (unsigned long num)	{concat(num); return (*this);}
	String & operator += (float num)		{concat(num); return (*this);}
     d14:	b7 01       	movw	r22, r14
     d16:	a6 01       	movw	r20, r12
     d18:	ce 01       	movw	r24, r28
     d1a:	07 96       	adiw	r24, 0x07	; 7
     d1c:	0e 94 a7 10 	call	0x214e	; 0x214e <_ZN6String6concatEf>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     d20:	66 ea       	ldi	r22, 0xA6	; 166
     d22:	72 e0       	ldi	r23, 0x02	; 2
     d24:	ce 01       	movw	r24, r28
     d26:	07 96       	adiw	r24, 0x07	; 7
     d28:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN6String6concatEPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
	String & operator += (unsigned long num)	{concat(num); return (*this);}
	String & operator += (float num)		{concat(num); return (*this);}
     d2c:	4d 85       	ldd	r20, Y+13	; 0x0d
     d2e:	5e 85       	ldd	r21, Y+14	; 0x0e
     d30:	6f 85       	ldd	r22, Y+15	; 0x0f
     d32:	78 89       	ldd	r23, Y+16	; 0x10
     d34:	ce 01       	movw	r24, r28
     d36:	07 96       	adiw	r24, 0x07	; 7
     d38:	0e 94 a7 10 	call	0x214e	; 0x214e <_ZN6String6concatEf>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     d3c:	68 ee       	ldi	r22, 0xE8	; 232
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	ce 01       	movw	r24, r28
     d42:	07 96       	adiw	r24, 0x07	; 7
     d44:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN6String6concatEPKc>
    payload += phLevel;
    payload += ",\"co2\":";
    payload += co2Level;
    payload += "}}";

    if (client.loop()) {
     d48:	8e ee       	ldi	r24, 0xEE	; 238
     d4a:	93 e0       	ldi	r25, 0x03	; 3
     d4c:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <_ZN12PubSubClient4loopEv>
     d50:	88 23       	and	r24, r24
     d52:	c9 f1       	breq	.+114    	; 0xdc6 <_Z11sensor_loopv+0x1b4>
      Serial.print(F("Sending sensor: "));
     d54:	6f eb       	ldi	r22, 0xBF	; 191
     d56:	71 e0       	ldi	r23, 0x01	; 1
     d58:	87 e0       	ldi	r24, 0x07	; 7
     d5a:	95 e0       	ldi	r25, 0x05	; 5
     d5c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(payload);
     d60:	be 01       	movw	r22, r28
     d62:	69 5f       	subi	r22, 0xF9	; 249
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	87 e0       	ldi	r24, 0x07	; 7
     d68:	95 e0       	ldi	r25, 0x05	; 5
     d6a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print7printlnERK6String>

      if (client.publish((char *) pub_topic, (char*) payload.c_str()) ) {
     d6e:	4f 81       	ldd	r20, Y+7	; 0x07
     d70:	58 85       	ldd	r21, Y+8	; 0x08
     d72:	68 e5       	ldi	r22, 0x58	; 88
     d74:	71 e0       	ldi	r23, 0x01	; 1
     d76:	8e ee       	ldi	r24, 0xEE	; 238
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN12PubSubClient7publishEPKcS1_>
     d7e:	88 23       	and	r24, r24
     d80:	39 f0       	breq	.+14     	; 0xd90 <_Z11sensor_loopv+0x17e>
        Serial.println("Publish ok");
     d82:	6e ea       	ldi	r22, 0xAE	; 174
     d84:	72 e0       	ldi	r23, 0x02	; 2
     d86:	87 e0       	ldi	r24, 0x07	; 7
     d88:	95 e0       	ldi	r25, 0x05	; 5
     d8a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>
     d8e:	1b c0       	rjmp	.+54     	; 0xdc6 <_Z11sensor_loopv+0x1b4>
      } else {
        Serial.print(F("Failed to publish sensor data: "));
     d90:	6f e9       	ldi	r22, 0x9F	; 159
     d92:	71 e0       	ldi	r23, 0x01	; 1
     d94:	87 e0       	ldi	r24, 0x07	; 7
     d96:	95 e0       	ldi	r25, 0x05	; 5
     d98:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(String(client.state()));
     d9c:	8e ee       	ldi	r24, 0xEE	; 238
     d9e:	93 e0       	ldi	r25, 0x03	; 3
     da0:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <_ZN12PubSubClient5stateEv>
     da4:	4a e0       	ldi	r20, 0x0A	; 10
     da6:	bc 01       	movw	r22, r24
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	0e 94 0d 10 	call	0x201a	; 0x201a <_ZN6StringC1Eih>
     db0:	be 01       	movw	r22, r28
     db2:	6f 5f       	subi	r22, 0xFF	; 255
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	87 e0       	ldi	r24, 0x07	; 7
     db8:	95 e0       	ldi	r25, 0x05	; 5
     dba:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print7printlnERK6String>
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN6StringD1Ev>
      }
    }

    Serial.println();
     dc6:	87 e0       	ldi	r24, 0x07	; 7
     dc8:	95 e0       	ldi	r25, 0x05	; 5
     dca:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN5Print7printlnEv>
    delay(2000);
     dce:	60 ed       	ldi	r22, 0xD0	; 208
     dd0:	77 e0       	ldi	r23, 0x07	; 7
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    humidity = bme.readHumidity();
    moistureLevel = soilSensor.touchRead(0);
    phLevel = getPHlevel();
    co2Level = co2sensor.readCO2level();

    String payload = "{\"event_data\":{\"temperature\":";
     dda:	ce 01       	movw	r24, r28
     ddc:	07 96       	adiw	r24, 0x07	; 7
     dde:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN6StringD1Ev>
    }

    Serial.println();
    delay(2000);
  }
}
     de2:	60 96       	adiw	r28, 0x10	; 16
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	7f 90       	pop	r7
     e08:	6f 90       	pop	r6
     e0a:	5f 90       	pop	r5
     e0c:	4f 90       	pop	r4
     e0e:	08 95       	ret

00000e10 <loop>:
   Function: loop
   Inputs: None
   Return: None
   Description:
 *****************************************************/
void loop() {
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
  if (!client.connected()) {
     e1c:	8e ee       	ldi	r24, 0xEE	; 238
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN12PubSubClient9connectedEv>
     e24:	81 11       	cpse	r24, r1
     e26:	2c c0       	rjmp	.+88     	; 0xe80 <loop+0x70>
    long now = millis();
     e28:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    if (now - lastReconnectAttempt > 1000) {
     e2c:	00 91 8f 04 	lds	r16, 0x048F	; 0x80048f <lastReconnectAttempt>
     e30:	10 91 90 04 	lds	r17, 0x0490	; 0x800490 <lastReconnectAttempt+0x1>
     e34:	20 91 91 04 	lds	r18, 0x0491	; 0x800491 <lastReconnectAttempt+0x2>
     e38:	30 91 92 04 	lds	r19, 0x0492	; 0x800492 <lastReconnectAttempt+0x3>
     e3c:	6b 01       	movw	r12, r22
     e3e:	7c 01       	movw	r14, r24
     e40:	c0 1a       	sub	r12, r16
     e42:	d1 0a       	sbc	r13, r17
     e44:	e2 0a       	sbc	r14, r18
     e46:	f3 0a       	sbc	r15, r19
     e48:	49 ee       	ldi	r20, 0xE9	; 233
     e4a:	c4 16       	cp	r12, r20
     e4c:	43 e0       	ldi	r20, 0x03	; 3
     e4e:	d4 06       	cpc	r13, r20
     e50:	e1 04       	cpc	r14, r1
     e52:	f1 04       	cpc	r15, r1
     e54:	cc f0       	brlt	.+50     	; 0xe88 <loop+0x78>
      lastReconnectAttempt = now;
     e56:	60 93 8f 04 	sts	0x048F, r22	; 0x80048f <lastReconnectAttempt>
     e5a:	70 93 90 04 	sts	0x0490, r23	; 0x800490 <lastReconnectAttempt+0x1>
     e5e:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <lastReconnectAttempt+0x2>
     e62:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <lastReconnectAttempt+0x3>
      // Attempt to reconnect
      if (connectMQTT()) {
     e66:	0e 94 1c 04 	call	0x838	; 0x838 <_Z11connectMQTTv>
     e6a:	88 23       	and	r24, r24
     e6c:	69 f0       	breq	.+26     	; 0xe88 <loop+0x78>
        lastReconnectAttempt = 0;
     e6e:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <lastReconnectAttempt>
     e72:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <lastReconnectAttempt+0x1>
     e76:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <lastReconnectAttempt+0x2>
     e7a:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <lastReconnectAttempt+0x3>
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <loop+0x78>
      }
    }
  } else {
    client.loop();
     e80:	8e ee       	ldi	r24, 0xEE	; 238
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <_ZN12PubSubClient4loopEv>
  }
  heartbeat_loop();
     e88:	0e 94 5e 05 	call	0xabc	; 0xabc <_Z14heartbeat_loopv>
  sensor_loop();
}
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	df 90       	pop	r13
     e96:	cf 90       	pop	r12
    }
  } else {
    client.loop();
  }
  heartbeat_loop();
  sensor_loop();
     e98:	0c 94 09 06 	jmp	0xc12	; 0xc12 <_Z11sensor_loopv>

00000e9c <_GLOBAL__sub_I_myssid>:
 *****************************************************/
float getPHlevel() {
  float phAnalogReading = analogRead(phSensorPin) * vref / 1024.0;
  float phLevel = 3.5 * phAnalogReading + phOffset;
  return phLevel;
}
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     ea0:	00 e0       	ldi	r16, 0x00	; 0
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	95 e0       	ldi	r25, 0x05	; 5
     eac:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN9IPAddressC1Ehhhh>
void heartbeat_loop();
float getPHlevel();


//Declare instances of sensors and wifi objects
Adafruit_BME280 bme;
     eb0:	8e ec       	ldi	r24, 0xCE	; 206
     eb2:	94 e0       	ldi	r25, 0x04	; 4
     eb4:	0e 94 03 11 	call	0x2206	; 0x2206 <_ZN15Adafruit_BME280C1Ev>
Adafruit_seesaw soilSensor;
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	85 ec       	ldi	r24, 0xC5	; 197
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN15Adafruit_seesawC1EP7TwoWire>
co2_sensor co2sensor;
     ec4:	83 ec       	ldi	r24, 0xC3	; 195
     ec6:	94 e0       	ldi	r25, 0x04	; 4
     ec8:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <_ZN10co2_sensorC1Ev>
SoftwareSerial soft(2, 3); // RX, TX
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	43 e0       	ldi	r20, 0x03	; 3
     ed0:	62 e0       	ldi	r22, 0x02	; 2
     ed2:	84 ea       	ldi	r24, 0xA4	; 164
     ed4:	94 e0       	ldi	r25, 0x04	; 4
     ed6:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN14SoftwareSerialC1Ehhb>
WiFiEspClient wifiClient;
     eda:	87 e9       	ldi	r24, 0x97	; 151
     edc:	94 e0       	ldi	r25, 0x04	; 4
     ede:	0e 94 81 23 	call	0x4702	; 0x4702 <_ZN13WiFiEspClientC1Ev>


/*****************************************************
   Declares an instance of a PubSubClient
 *****************************************************/
PubSubClient client(server, port, callback, wifiClient);
     ee2:	40 91 78 01 	lds	r20, 0x0178	; 0x800178 <port>
     ee6:	50 91 79 01 	lds	r21, 0x0179	; 0x800179 <port+0x1>
     eea:	07 e9       	ldi	r16, 0x97	; 151
     eec:	14 e0       	ldi	r17, 0x04	; 4
     eee:	29 ec       	ldi	r18, 0xC9	; 201
     ef0:	33 e0       	ldi	r19, 0x03	; 3
     ef2:	6a e7       	ldi	r22, 0x7A	; 122
     ef4:	71 e0       	ldi	r23, 0x01	; 1
     ef6:	8e ee       	ldi	r24, 0xEE	; 238
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN12PubSubClientC1EPKcjPFvPcPhjER6Client>
 *****************************************************/
float getPHlevel() {
  float phAnalogReading = analogRead(phSensorPin) * vref / 1024.0;
  float phLevel = 3.5 * phAnalogReading + phOffset;
  return phLevel;
}
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <_GLOBAL__sub_D_myssid>:

//Declare instances of sensors and wifi objects
Adafruit_BME280 bme;
Adafruit_seesaw soilSensor;
co2_sensor co2sensor;
SoftwareSerial soft(2, 3); // RX, TX
     f04:	84 ea       	ldi	r24, 0xA4	; 164
     f06:	94 e0       	ldi	r25, 0x04	; 4
     f08:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <_ZN14SoftwareSerialD1Ev>

00000f0c <__subsf3>:
     f0c:	50 58       	subi	r21, 0x80	; 128

00000f0e <__addsf3>:
     f0e:	bb 27       	eor	r27, r27
     f10:	aa 27       	eor	r26, r26
     f12:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__addsf3x>
     f16:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_round>
     f1a:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_pscA>
     f1e:	38 f0       	brcs	.+14     	; 0xf2e <__addsf3+0x20>
     f20:	0e 94 40 08 	call	0x1080	; 0x1080 <__fp_pscB>
     f24:	20 f0       	brcs	.+8      	; 0xf2e <__addsf3+0x20>
     f26:	39 f4       	brne	.+14     	; 0xf36 <__addsf3+0x28>
     f28:	9f 3f       	cpi	r25, 0xFF	; 255
     f2a:	19 f4       	brne	.+6      	; 0xf32 <__addsf3+0x24>
     f2c:	26 f4       	brtc	.+8      	; 0xf36 <__addsf3+0x28>
     f2e:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_nan>
     f32:	0e f4       	brtc	.+2      	; 0xf36 <__addsf3+0x28>
     f34:	e0 95       	com	r30
     f36:	e7 fb       	bst	r30, 7
     f38:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_inf>

00000f3c <__addsf3x>:
     f3c:	e9 2f       	mov	r30, r25
     f3e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_split3>
     f42:	58 f3       	brcs	.-42     	; 0xf1a <__addsf3+0xc>
     f44:	ba 17       	cp	r27, r26
     f46:	62 07       	cpc	r22, r18
     f48:	73 07       	cpc	r23, r19
     f4a:	84 07       	cpc	r24, r20
     f4c:	95 07       	cpc	r25, r21
     f4e:	20 f0       	brcs	.+8      	; 0xf58 <__addsf3x+0x1c>
     f50:	79 f4       	brne	.+30     	; 0xf70 <__addsf3x+0x34>
     f52:	a6 f5       	brtc	.+104    	; 0xfbc <__addsf3x+0x80>
     f54:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_zero>
     f58:	0e f4       	brtc	.+2      	; 0xf5c <__addsf3x+0x20>
     f5a:	e0 95       	com	r30
     f5c:	0b 2e       	mov	r0, r27
     f5e:	ba 2f       	mov	r27, r26
     f60:	a0 2d       	mov	r26, r0
     f62:	0b 01       	movw	r0, r22
     f64:	b9 01       	movw	r22, r18
     f66:	90 01       	movw	r18, r0
     f68:	0c 01       	movw	r0, r24
     f6a:	ca 01       	movw	r24, r20
     f6c:	a0 01       	movw	r20, r0
     f6e:	11 24       	eor	r1, r1
     f70:	ff 27       	eor	r31, r31
     f72:	59 1b       	sub	r21, r25
     f74:	99 f0       	breq	.+38     	; 0xf9c <__addsf3x+0x60>
     f76:	59 3f       	cpi	r21, 0xF9	; 249
     f78:	50 f4       	brcc	.+20     	; 0xf8e <__addsf3x+0x52>
     f7a:	50 3e       	cpi	r21, 0xE0	; 224
     f7c:	68 f1       	brcs	.+90     	; 0xfd8 <__addsf3x+0x9c>
     f7e:	1a 16       	cp	r1, r26
     f80:	f0 40       	sbci	r31, 0x00	; 0
     f82:	a2 2f       	mov	r26, r18
     f84:	23 2f       	mov	r18, r19
     f86:	34 2f       	mov	r19, r20
     f88:	44 27       	eor	r20, r20
     f8a:	58 5f       	subi	r21, 0xF8	; 248
     f8c:	f3 cf       	rjmp	.-26     	; 0xf74 <__addsf3x+0x38>
     f8e:	46 95       	lsr	r20
     f90:	37 95       	ror	r19
     f92:	27 95       	ror	r18
     f94:	a7 95       	ror	r26
     f96:	f0 40       	sbci	r31, 0x00	; 0
     f98:	53 95       	inc	r21
     f9a:	c9 f7       	brne	.-14     	; 0xf8e <__addsf3x+0x52>
     f9c:	7e f4       	brtc	.+30     	; 0xfbc <__addsf3x+0x80>
     f9e:	1f 16       	cp	r1, r31
     fa0:	ba 0b       	sbc	r27, r26
     fa2:	62 0b       	sbc	r22, r18
     fa4:	73 0b       	sbc	r23, r19
     fa6:	84 0b       	sbc	r24, r20
     fa8:	ba f0       	brmi	.+46     	; 0xfd8 <__addsf3x+0x9c>
     faa:	91 50       	subi	r25, 0x01	; 1
     fac:	a1 f0       	breq	.+40     	; 0xfd6 <__addsf3x+0x9a>
     fae:	ff 0f       	add	r31, r31
     fb0:	bb 1f       	adc	r27, r27
     fb2:	66 1f       	adc	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	c2 f7       	brpl	.-16     	; 0xfaa <__addsf3x+0x6e>
     fba:	0e c0       	rjmp	.+28     	; 0xfd8 <__addsf3x+0x9c>
     fbc:	ba 0f       	add	r27, r26
     fbe:	62 1f       	adc	r22, r18
     fc0:	73 1f       	adc	r23, r19
     fc2:	84 1f       	adc	r24, r20
     fc4:	48 f4       	brcc	.+18     	; 0xfd8 <__addsf3x+0x9c>
     fc6:	87 95       	ror	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	b7 95       	ror	r27
     fce:	f7 95       	ror	r31
     fd0:	9e 3f       	cpi	r25, 0xFE	; 254
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <__addsf3x+0x9a>
     fd4:	b0 cf       	rjmp	.-160    	; 0xf36 <__addsf3+0x28>
     fd6:	93 95       	inc	r25
     fd8:	88 0f       	add	r24, r24
     fda:	08 f0       	brcs	.+2      	; 0xfde <__addsf3x+0xa2>
     fdc:	99 27       	eor	r25, r25
     fde:	ee 0f       	add	r30, r30
     fe0:	97 95       	ror	r25
     fe2:	87 95       	ror	r24
     fe4:	08 95       	ret

00000fe6 <__floatunsisf>:
     fe6:	e8 94       	clt
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <__floatsisf+0x12>

00000fea <__floatsisf>:
     fea:	97 fb       	bst	r25, 7
     fec:	3e f4       	brtc	.+14     	; 0xffc <__floatsisf+0x12>
     fee:	90 95       	com	r25
     ff0:	80 95       	com	r24
     ff2:	70 95       	com	r23
     ff4:	61 95       	neg	r22
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	99 23       	and	r25, r25
     ffe:	a9 f0       	breq	.+42     	; 0x102a <__floatsisf+0x40>
    1000:	f9 2f       	mov	r31, r25
    1002:	96 e9       	ldi	r25, 0x96	; 150
    1004:	bb 27       	eor	r27, r27
    1006:	93 95       	inc	r25
    1008:	f6 95       	lsr	r31
    100a:	87 95       	ror	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	f1 11       	cpse	r31, r1
    1014:	f8 cf       	rjmp	.-16     	; 0x1006 <__floatsisf+0x1c>
    1016:	fa f4       	brpl	.+62     	; 0x1056 <__floatsisf+0x6c>
    1018:	bb 0f       	add	r27, r27
    101a:	11 f4       	brne	.+4      	; 0x1020 <__floatsisf+0x36>
    101c:	60 ff       	sbrs	r22, 0
    101e:	1b c0       	rjmp	.+54     	; 0x1056 <__floatsisf+0x6c>
    1020:	6f 5f       	subi	r22, 0xFF	; 255
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8f 4f       	sbci	r24, 0xFF	; 255
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <__floatsisf+0x6c>
    102a:	88 23       	and	r24, r24
    102c:	11 f0       	breq	.+4      	; 0x1032 <__floatsisf+0x48>
    102e:	96 e9       	ldi	r25, 0x96	; 150
    1030:	11 c0       	rjmp	.+34     	; 0x1054 <__floatsisf+0x6a>
    1032:	77 23       	and	r23, r23
    1034:	21 f0       	breq	.+8      	; 0x103e <__floatsisf+0x54>
    1036:	9e e8       	ldi	r25, 0x8E	; 142
    1038:	87 2f       	mov	r24, r23
    103a:	76 2f       	mov	r23, r22
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <__floatsisf+0x5e>
    103e:	66 23       	and	r22, r22
    1040:	71 f0       	breq	.+28     	; 0x105e <__floatsisf+0x74>
    1042:	96 e8       	ldi	r25, 0x86	; 134
    1044:	86 2f       	mov	r24, r22
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	2a f0       	brmi	.+10     	; 0x1056 <__floatsisf+0x6c>
    104c:	9a 95       	dec	r25
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	88 1f       	adc	r24, r24
    1054:	da f7       	brpl	.-10     	; 0x104c <__floatsisf+0x62>
    1056:	88 0f       	add	r24, r24
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	97 f9       	bld	r25, 7
    105e:	08 95       	ret

00001060 <__fp_inf>:
    1060:	97 f9       	bld	r25, 7
    1062:	9f 67       	ori	r25, 0x7F	; 127
    1064:	80 e8       	ldi	r24, 0x80	; 128
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	08 95       	ret

0000106c <__fp_nan>:
    106c:	9f ef       	ldi	r25, 0xFF	; 255
    106e:	80 ec       	ldi	r24, 0xC0	; 192
    1070:	08 95       	ret

00001072 <__fp_pscA>:
    1072:	00 24       	eor	r0, r0
    1074:	0a 94       	dec	r0
    1076:	16 16       	cp	r1, r22
    1078:	17 06       	cpc	r1, r23
    107a:	18 06       	cpc	r1, r24
    107c:	09 06       	cpc	r0, r25
    107e:	08 95       	ret

00001080 <__fp_pscB>:
    1080:	00 24       	eor	r0, r0
    1082:	0a 94       	dec	r0
    1084:	12 16       	cp	r1, r18
    1086:	13 06       	cpc	r1, r19
    1088:	14 06       	cpc	r1, r20
    108a:	05 06       	cpc	r0, r21
    108c:	08 95       	ret

0000108e <__fp_round>:
    108e:	09 2e       	mov	r0, r25
    1090:	03 94       	inc	r0
    1092:	00 0c       	add	r0, r0
    1094:	11 f4       	brne	.+4      	; 0x109a <__fp_round+0xc>
    1096:	88 23       	and	r24, r24
    1098:	52 f0       	brmi	.+20     	; 0x10ae <__fp_round+0x20>
    109a:	bb 0f       	add	r27, r27
    109c:	40 f4       	brcc	.+16     	; 0x10ae <__fp_round+0x20>
    109e:	bf 2b       	or	r27, r31
    10a0:	11 f4       	brne	.+4      	; 0x10a6 <__fp_round+0x18>
    10a2:	60 ff       	sbrs	r22, 0
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <__fp_round+0x20>
    10a6:	6f 5f       	subi	r22, 0xFF	; 255
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	8f 4f       	sbci	r24, 0xFF	; 255
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	08 95       	ret

000010b0 <__fp_split3>:
    10b0:	57 fd       	sbrc	r21, 7
    10b2:	90 58       	subi	r25, 0x80	; 128
    10b4:	44 0f       	add	r20, r20
    10b6:	55 1f       	adc	r21, r21
    10b8:	59 f0       	breq	.+22     	; 0x10d0 <__fp_splitA+0x10>
    10ba:	5f 3f       	cpi	r21, 0xFF	; 255
    10bc:	71 f0       	breq	.+28     	; 0x10da <__fp_splitA+0x1a>
    10be:	47 95       	ror	r20

000010c0 <__fp_splitA>:
    10c0:	88 0f       	add	r24, r24
    10c2:	97 fb       	bst	r25, 7
    10c4:	99 1f       	adc	r25, r25
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <__fp_splitA+0x20>
    10c8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ca:	79 f0       	breq	.+30     	; 0x10ea <__fp_splitA+0x2a>
    10cc:	87 95       	ror	r24
    10ce:	08 95       	ret
    10d0:	12 16       	cp	r1, r18
    10d2:	13 06       	cpc	r1, r19
    10d4:	14 06       	cpc	r1, r20
    10d6:	55 1f       	adc	r21, r21
    10d8:	f2 cf       	rjmp	.-28     	; 0x10be <__fp_split3+0xe>
    10da:	46 95       	lsr	r20
    10dc:	f1 df       	rcall	.-30     	; 0x10c0 <__fp_splitA>
    10de:	08 c0       	rjmp	.+16     	; 0x10f0 <__fp_splitA+0x30>
    10e0:	16 16       	cp	r1, r22
    10e2:	17 06       	cpc	r1, r23
    10e4:	18 06       	cpc	r1, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	f1 cf       	rjmp	.-30     	; 0x10cc <__fp_splitA+0xc>
    10ea:	86 95       	lsr	r24
    10ec:	71 05       	cpc	r23, r1
    10ee:	61 05       	cpc	r22, r1
    10f0:	08 94       	sec
    10f2:	08 95       	ret

000010f4 <__fp_zero>:
    10f4:	e8 94       	clt

000010f6 <__fp_szero>:
    10f6:	bb 27       	eor	r27, r27
    10f8:	66 27       	eor	r22, r22
    10fa:	77 27       	eor	r23, r23
    10fc:	cb 01       	movw	r24, r22
    10fe:	97 f9       	bld	r25, 7
    1100:	08 95       	ret

00001102 <__mulsf3>:
    1102:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3x>
    1106:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_round>
    110a:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_pscA>
    110e:	38 f0       	brcs	.+14     	; 0x111e <__mulsf3+0x1c>
    1110:	0e 94 40 08 	call	0x1080	; 0x1080 <__fp_pscB>
    1114:	20 f0       	brcs	.+8      	; 0x111e <__mulsf3+0x1c>
    1116:	95 23       	and	r25, r21
    1118:	11 f0       	breq	.+4      	; 0x111e <__mulsf3+0x1c>
    111a:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_inf>
    111e:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_nan>
    1122:	11 24       	eor	r1, r1
    1124:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_szero>

00001128 <__mulsf3x>:
    1128:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_split3>
    112c:	70 f3       	brcs	.-36     	; 0x110a <__mulsf3+0x8>

0000112e <__mulsf3_pse>:
    112e:	95 9f       	mul	r25, r21
    1130:	c1 f3       	breq	.-16     	; 0x1122 <__mulsf3+0x20>
    1132:	95 0f       	add	r25, r21
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	55 1f       	adc	r21, r21
    1138:	62 9f       	mul	r22, r18
    113a:	f0 01       	movw	r30, r0
    113c:	72 9f       	mul	r23, r18
    113e:	bb 27       	eor	r27, r27
    1140:	f0 0d       	add	r31, r0
    1142:	b1 1d       	adc	r27, r1
    1144:	63 9f       	mul	r22, r19
    1146:	aa 27       	eor	r26, r26
    1148:	f0 0d       	add	r31, r0
    114a:	b1 1d       	adc	r27, r1
    114c:	aa 1f       	adc	r26, r26
    114e:	64 9f       	mul	r22, r20
    1150:	66 27       	eor	r22, r22
    1152:	b0 0d       	add	r27, r0
    1154:	a1 1d       	adc	r26, r1
    1156:	66 1f       	adc	r22, r22
    1158:	82 9f       	mul	r24, r18
    115a:	22 27       	eor	r18, r18
    115c:	b0 0d       	add	r27, r0
    115e:	a1 1d       	adc	r26, r1
    1160:	62 1f       	adc	r22, r18
    1162:	73 9f       	mul	r23, r19
    1164:	b0 0d       	add	r27, r0
    1166:	a1 1d       	adc	r26, r1
    1168:	62 1f       	adc	r22, r18
    116a:	83 9f       	mul	r24, r19
    116c:	a0 0d       	add	r26, r0
    116e:	61 1d       	adc	r22, r1
    1170:	22 1f       	adc	r18, r18
    1172:	74 9f       	mul	r23, r20
    1174:	33 27       	eor	r19, r19
    1176:	a0 0d       	add	r26, r0
    1178:	61 1d       	adc	r22, r1
    117a:	23 1f       	adc	r18, r19
    117c:	84 9f       	mul	r24, r20
    117e:	60 0d       	add	r22, r0
    1180:	21 1d       	adc	r18, r1
    1182:	82 2f       	mov	r24, r18
    1184:	76 2f       	mov	r23, r22
    1186:	6a 2f       	mov	r22, r26
    1188:	11 24       	eor	r1, r1
    118a:	9f 57       	subi	r25, 0x7F	; 127
    118c:	50 40       	sbci	r21, 0x00	; 0
    118e:	9a f0       	brmi	.+38     	; 0x11b6 <__mulsf3_pse+0x88>
    1190:	f1 f0       	breq	.+60     	; 0x11ce <__mulsf3_pse+0xa0>
    1192:	88 23       	and	r24, r24
    1194:	4a f0       	brmi	.+18     	; 0x11a8 <__mulsf3_pse+0x7a>
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	bb 1f       	adc	r27, r27
    119c:	66 1f       	adc	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	88 1f       	adc	r24, r24
    11a2:	91 50       	subi	r25, 0x01	; 1
    11a4:	50 40       	sbci	r21, 0x00	; 0
    11a6:	a9 f7       	brne	.-22     	; 0x1192 <__mulsf3_pse+0x64>
    11a8:	9e 3f       	cpi	r25, 0xFE	; 254
    11aa:	51 05       	cpc	r21, r1
    11ac:	80 f0       	brcs	.+32     	; 0x11ce <__mulsf3_pse+0xa0>
    11ae:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_inf>
    11b2:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_szero>
    11b6:	5f 3f       	cpi	r21, 0xFF	; 255
    11b8:	e4 f3       	brlt	.-8      	; 0x11b2 <__mulsf3_pse+0x84>
    11ba:	98 3e       	cpi	r25, 0xE8	; 232
    11bc:	d4 f3       	brlt	.-12     	; 0x11b2 <__mulsf3_pse+0x84>
    11be:	86 95       	lsr	r24
    11c0:	77 95       	ror	r23
    11c2:	67 95       	ror	r22
    11c4:	b7 95       	ror	r27
    11c6:	f7 95       	ror	r31
    11c8:	e7 95       	ror	r30
    11ca:	9f 5f       	subi	r25, 0xFF	; 255
    11cc:	c1 f7       	brne	.-16     	; 0x11be <__mulsf3_pse+0x90>
    11ce:	fe 2b       	or	r31, r30
    11d0:	88 0f       	add	r24, r24
    11d2:	91 1d       	adc	r25, r1
    11d4:	96 95       	lsr	r25
    11d6:	87 95       	ror	r24
    11d8:	97 f9       	bld	r25, 7
    11da:	08 95       	ret

000011dc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    11dc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    11de:	91 8d       	ldd	r25, Z+25	; 0x19
    11e0:	22 8d       	ldd	r18, Z+26	; 0x1a
    11e2:	89 2f       	mov	r24, r25
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	80 5c       	subi	r24, 0xC0	; 192
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	82 1b       	sub	r24, r18
    11ec:	91 09       	sbc	r25, r1
}
    11ee:	8f 73       	andi	r24, 0x3F	; 63
    11f0:	99 27       	eor	r25, r25
    11f2:	08 95       	ret

000011f4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    11f4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    11f6:	91 8d       	ldd	r25, Z+25	; 0x19
    11f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    11fa:	98 17       	cp	r25, r24
    11fc:	31 f0       	breq	.+12     	; 0x120a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    11fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1200:	e8 0f       	add	r30, r24
    1202:	f1 1d       	adc	r31, r1
    1204:	85 8d       	ldd	r24, Z+29	; 0x1d
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    120e:	08 95       	ret

00001210 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1210:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1212:	91 8d       	ldd	r25, Z+25	; 0x19
    1214:	82 8d       	ldd	r24, Z+26	; 0x1a
    1216:	98 17       	cp	r25, r24
    1218:	61 f0       	breq	.+24     	; 0x1232 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    121a:	82 8d       	ldd	r24, Z+26	; 0x1a
    121c:	df 01       	movw	r26, r30
    121e:	a8 0f       	add	r26, r24
    1220:	b1 1d       	adc	r27, r1
    1222:	5d 96       	adiw	r26, 0x1d	; 29
    1224:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1226:	92 8d       	ldd	r25, Z+26	; 0x1a
    1228:	9f 5f       	subi	r25, 0xFF	; 255
    122a:	9f 73       	andi	r25, 0x3F	; 63
    122c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1236:	08 95       	ret

00001238 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1238:	fc 01       	movw	r30, r24
    123a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    123c:	44 8d       	ldd	r20, Z+28	; 0x1c
    123e:	25 2f       	mov	r18, r21
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	84 2f       	mov	r24, r20
    1244:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1246:	82 1b       	sub	r24, r18
    1248:	93 0b       	sbc	r25, r19
    124a:	54 17       	cp	r21, r20
    124c:	10 f0       	brcs	.+4      	; 0x1252 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    124e:	cf 96       	adiw	r24, 0x3f	; 63
    1250:	08 95       	ret
  return tail - head - 1;
    1252:	01 97       	sbiw	r24, 0x01	; 1
}
    1254:	08 95       	ret

00001256 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1256:	8b e8       	ldi	r24, 0x8B	; 139
    1258:	9a e0       	ldi	r25, 0x0A	; 10
    125a:	89 2b       	or	r24, r25
    125c:	49 f0       	breq	.+18     	; 0x1270 <_Z14serialEventRunv+0x1a>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	89 2b       	or	r24, r25
    1264:	29 f0       	breq	.+10     	; 0x1270 <_Z14serialEventRunv+0x1a>
    1266:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_Z17Serial0_availablev>
    126a:	81 11       	cpse	r24, r1
    126c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1270:	08 95       	ret

00001272 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1272:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1274:	84 8d       	ldd	r24, Z+28	; 0x1c
    1276:	df 01       	movw	r26, r30
    1278:	a8 0f       	add	r26, r24
    127a:	b1 1d       	adc	r27, r1
    127c:	a3 5a       	subi	r26, 0xA3	; 163
    127e:	bf 4f       	sbci	r27, 0xFF	; 255
    1280:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1282:	84 8d       	ldd	r24, Z+28	; 0x1c
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	8f 73       	andi	r24, 0x3F	; 63
    128a:	99 27       	eor	r25, r25
    128c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    128e:	a6 89       	ldd	r26, Z+22	; 0x16
    1290:	b7 89       	ldd	r27, Z+23	; 0x17
    1292:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1294:	a0 89       	ldd	r26, Z+16	; 0x10
    1296:	b1 89       	ldd	r27, Z+17	; 0x11
    1298:	8c 91       	ld	r24, X
    129a:	83 70       	andi	r24, 0x03	; 3
    129c:	80 64       	ori	r24, 0x40	; 64
    129e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    12a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    12a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    12a4:	98 13       	cpse	r25, r24
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    12a8:	02 88       	ldd	r0, Z+18	; 0x12
    12aa:	f3 89       	ldd	r31, Z+19	; 0x13
    12ac:	e0 2d       	mov	r30, r0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 7d       	andi	r24, 0xDF	; 223
    12b2:	80 83       	st	Z, r24
    12b4:	08 95       	ret

000012b6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	ec 01       	movw	r28, r24
  _written = true;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    12c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12cc:	98 13       	cpse	r25, r24
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <_ZN14HardwareSerial5writeEh+0x24>
    12d0:	e8 89       	ldd	r30, Y+16	; 0x10
    12d2:	f9 89       	ldd	r31, Y+17	; 0x11
    12d4:	80 81       	ld	r24, Z
    12d6:	85 fd       	sbrc	r24, 5
    12d8:	26 c0       	rjmp	.+76     	; 0x1326 <_ZN14HardwareSerial5writeEh+0x70>
    12da:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    12dc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	0f 5f       	subi	r16, 0xFF	; 255
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	0f 73       	andi	r16, 0x3F	; 63
    12e6:	11 27       	eor	r17, r17
    12e8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    12ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12ec:	e8 12       	cpse	r14, r24
    12ee:	0c c0       	rjmp	.+24     	; 0x1308 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	07 fc       	sbrc	r0, 7
    12f4:	fa cf       	rjmp	.-12     	; 0x12ea <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    12f6:	e8 89       	ldd	r30, Y+16	; 0x10
    12f8:	f9 89       	ldd	r31, Y+17	; 0x11
    12fa:	80 81       	ld	r24, Z
    12fc:	85 ff       	sbrs	r24, 5
    12fe:	f5 cf       	rjmp	.-22     	; 0x12ea <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1300:	ce 01       	movw	r24, r28
    1302:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1306:	f1 cf       	rjmp	.-30     	; 0x12ea <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1308:	8b 8d       	ldd	r24, Y+27	; 0x1b
    130a:	fe 01       	movw	r30, r28
    130c:	e8 0f       	add	r30, r24
    130e:	f1 1d       	adc	r31, r1
    1310:	e3 5a       	subi	r30, 0xA3	; 163
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1316:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1318:	f8 94       	cli
    _tx_buffer_head = i;
    131a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    131c:	ea 89       	ldd	r30, Y+18	; 0x12
    131e:	fb 89       	ldd	r31, Y+19	; 0x13
    1320:	80 81       	ld	r24, Z
    1322:	80 62       	ori	r24, 0x20	; 32
    1324:	0a c0       	rjmp	.+20     	; 0x133a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1326:	9f b7       	in	r25, 0x3f	; 63
    1328:	f8 94       	cli
      *_udr = c;
    132a:	ee 89       	ldd	r30, Y+22	; 0x16
    132c:	ff 89       	ldd	r31, Y+23	; 0x17
    132e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1330:	e8 89       	ldd	r30, Y+16	; 0x10
    1332:	f9 89       	ldd	r31, Y+17	; 0x11
    1334:	80 81       	ld	r24, Z
    1336:	83 70       	andi	r24, 0x03	; 3
    1338:	80 64       	ori	r24, 0x40	; 64
    133a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    133c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	08 95       	ret

00001350 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1356:	88 8d       	ldd	r24, Y+24	; 0x18
    1358:	88 23       	and	r24, r24
    135a:	c9 f0       	breq	.+50     	; 0x138e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    135c:	ea 89       	ldd	r30, Y+18	; 0x12
    135e:	fb 89       	ldd	r31, Y+19	; 0x13
    1360:	80 81       	ld	r24, Z
    1362:	85 fd       	sbrc	r24, 5
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <_ZN14HardwareSerial5flushEv+0x20>
    1366:	a8 89       	ldd	r26, Y+16	; 0x10
    1368:	b9 89       	ldd	r27, Y+17	; 0x11
    136a:	8c 91       	ld	r24, X
    136c:	86 fd       	sbrc	r24, 6
    136e:	0f c0       	rjmp	.+30     	; 0x138e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	07 fc       	sbrc	r0, 7
    1374:	f5 cf       	rjmp	.-22     	; 0x1360 <_ZN14HardwareSerial5flushEv+0x10>
    1376:	80 81       	ld	r24, Z
    1378:	85 ff       	sbrs	r24, 5
    137a:	f2 cf       	rjmp	.-28     	; 0x1360 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    137c:	a8 89       	ldd	r26, Y+16	; 0x10
    137e:	b9 89       	ldd	r27, Y+17	; 0x11
    1380:	8c 91       	ld	r24, X
    1382:	85 ff       	sbrs	r24, 5
    1384:	ed cf       	rjmp	.-38     	; 0x1360 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1386:	ce 01       	movw	r24, r28
    1388:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    138c:	e7 cf       	rjmp	.-50     	; 0x135c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1394:	cf 92       	push	r12
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	ec 01       	movw	r28, r24
    13a4:	6a 01       	movw	r12, r20
    13a6:	7b 01       	movw	r14, r22
    13a8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    13aa:	e8 89       	ldd	r30, Y+16	; 0x10
    13ac:	f9 89       	ldd	r31, Y+17	; 0x11
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    13b2:	41 15       	cp	r20, r1
    13b4:	51 4e       	sbci	r21, 0xE1	; 225
    13b6:	61 05       	cpc	r22, r1
    13b8:	71 05       	cpc	r23, r1
    13ba:	b1 f0       	breq	.+44     	; 0x13e8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	79 e0       	ldi	r23, 0x09	; 9
    13c0:	8d e3       	ldi	r24, 0x3D	; 61
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a7 01       	movw	r20, r14
    13c6:	96 01       	movw	r18, r12
    13c8:	0e 94 a6 32 	call	0x654c	; 0x654c <__udivmodsi4>
    13cc:	da 01       	movw	r26, r20
    13ce:	c9 01       	movw	r24, r18
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	a1 09       	sbc	r26, r1
    13d4:	b1 09       	sbc	r27, r1
    13d6:	b6 95       	lsr	r27
    13d8:	a7 95       	ror	r26
    13da:	97 95       	ror	r25
    13dc:	87 95       	ror	r24
    13de:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    13e0:	21 15       	cp	r18, r1
    13e2:	80 e1       	ldi	r24, 0x10	; 16
    13e4:	38 07       	cpc	r19, r24
    13e6:	a8 f0       	brcs	.+42     	; 0x1412 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    13e8:	e8 89       	ldd	r30, Y+16	; 0x10
    13ea:	f9 89       	ldd	r31, Y+17	; 0x11
    13ec:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    13ee:	60 e8       	ldi	r22, 0x80	; 128
    13f0:	74 e8       	ldi	r23, 0x84	; 132
    13f2:	8e e1       	ldi	r24, 0x1E	; 30
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a7 01       	movw	r20, r14
    13f8:	96 01       	movw	r18, r12
    13fa:	0e 94 a6 32 	call	0x654c	; 0x654c <__udivmodsi4>
    13fe:	da 01       	movw	r26, r20
    1400:	c9 01       	movw	r24, r18
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	a1 09       	sbc	r26, r1
    1406:	b1 09       	sbc	r27, r1
    1408:	b6 95       	lsr	r27
    140a:	a7 95       	ror	r26
    140c:	97 95       	ror	r25
    140e:	87 95       	ror	r24
    1410:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1412:	ec 85       	ldd	r30, Y+12	; 0x0c
    1414:	fd 85       	ldd	r31, Y+13	; 0x0d
    1416:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1418:	ee 85       	ldd	r30, Y+14	; 0x0e
    141a:	ff 85       	ldd	r31, Y+15	; 0x0f
    141c:	20 83       	st	Z, r18

  _written = false;
    141e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1420:	ec 89       	ldd	r30, Y+20	; 0x14
    1422:	fd 89       	ldd	r31, Y+21	; 0x15
    1424:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1426:	ea 89       	ldd	r30, Y+18	; 0x12
    1428:	fb 89       	ldd	r31, Y+19	; 0x13
    142a:	80 81       	ld	r24, Z
    142c:	80 61       	ori	r24, 0x10	; 16
    142e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1430:	ea 89       	ldd	r30, Y+18	; 0x12
    1432:	fb 89       	ldd	r31, Y+19	; 0x13
    1434:	80 81       	ld	r24, Z
    1436:	88 60       	ori	r24, 0x08	; 8
    1438:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    143a:	ea 89       	ldd	r30, Y+18	; 0x12
    143c:	fb 89       	ldd	r31, Y+19	; 0x13
    143e:	80 81       	ld	r24, Z
    1440:	80 68       	ori	r24, 0x80	; 128
    1442:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1444:	ea 89       	ldd	r30, Y+18	; 0x12
    1446:	fb 89       	ldd	r31, Y+19	; 0x13
    1448:	80 81       	ld	r24, Z
    144a:	8f 7d       	andi	r24, 0xDF	; 223
    144c:	80 83       	st	Z, r24
}
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	08 95       	ret

0000145e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	08 95       	ret

00001464 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1464:	08 95       	ret

00001466 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	2f 93       	push	r18
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	ef 93       	push	r30
    1478:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    147a:	e0 91 17 05 	lds	r30, 0x0517	; 0x800517 <Serial+0x10>
    147e:	f0 91 18 05 	lds	r31, 0x0518	; 0x800518 <Serial+0x11>
    1482:	80 81       	ld	r24, Z
    1484:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <Serial+0x16>
    1488:	f0 91 1e 05 	lds	r31, 0x051E	; 0x80051e <Serial+0x17>
    148c:	82 fd       	sbrc	r24, 2
    148e:	12 c0       	rjmp	.+36     	; 0x14b4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1490:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1492:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <Serial+0x19>
    1496:	8f 5f       	subi	r24, 0xFF	; 255
    1498:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    149a:	20 91 21 05 	lds	r18, 0x0521	; 0x800521 <Serial+0x1a>
    149e:	82 17       	cp	r24, r18
    14a0:	51 f0       	breq	.+20     	; 0x14b6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    14a2:	e0 91 20 05 	lds	r30, 0x0520	; 0x800520 <Serial+0x19>
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	e9 5f       	subi	r30, 0xF9	; 249
    14aa:	fa 4f       	sbci	r31, 0xFA	; 250
    14ac:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    14ae:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <Serial+0x19>
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    14b4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    14b6:	ff 91       	pop	r31
    14b8:	ef 91       	pop	r30
    14ba:	9f 91       	pop	r25
    14bc:	8f 91       	pop	r24
    14be:	2f 91       	pop	r18
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	18 95       	reti

000014ca <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    14ca:	1f 92       	push	r1
    14cc:	0f 92       	push	r0
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	0f 92       	push	r0
    14d2:	11 24       	eor	r1, r1
    14d4:	2f 93       	push	r18
    14d6:	3f 93       	push	r19
    14d8:	4f 93       	push	r20
    14da:	5f 93       	push	r21
    14dc:	6f 93       	push	r22
    14de:	7f 93       	push	r23
    14e0:	8f 93       	push	r24
    14e2:	9f 93       	push	r25
    14e4:	af 93       	push	r26
    14e6:	bf 93       	push	r27
    14e8:	ef 93       	push	r30
    14ea:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    14ec:	87 e0       	ldi	r24, 0x07	; 7
    14ee:	95 e0       	ldi	r25, 0x05	; 5
    14f0:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1516:	87 e0       	ldi	r24, 0x07	; 7
    1518:	95 e0       	ldi	r25, 0x05	; 5
    151a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN14HardwareSerial9availableEv>
    151e:	21 e0       	ldi	r18, 0x01	; 1
    1520:	89 2b       	or	r24, r25
    1522:	09 f4       	brne	.+2      	; 0x1526 <_Z17Serial0_availablev+0x10>
    1524:	20 e0       	ldi	r18, 0x00	; 0
}
    1526:	82 2f       	mov	r24, r18
    1528:	08 95       	ret

0000152a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    152a:	e7 e0       	ldi	r30, 0x07	; 7
    152c:	f5 e0       	ldi	r31, 0x05	; 5
    152e:	13 82       	std	Z+3, r1	; 0x03
    1530:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1532:	88 ee       	ldi	r24, 0xE8	; 232
    1534:	93 e0       	ldi	r25, 0x03	; 3
    1536:	a0 e0       	ldi	r26, 0x00	; 0
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	84 83       	std	Z+4, r24	; 0x04
    153c:	95 83       	std	Z+5, r25	; 0x05
    153e:	a6 83       	std	Z+6, r26	; 0x06
    1540:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1542:	8d eb       	ldi	r24, 0xBD	; 189
    1544:	92 e0       	ldi	r25, 0x02	; 2
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	85 ec       	ldi	r24, 0xC5	; 197
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	95 87       	std	Z+13, r25	; 0x0d
    1550:	84 87       	std	Z+12, r24	; 0x0c
    1552:	84 ec       	ldi	r24, 0xC4	; 196
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	97 87       	std	Z+15, r25	; 0x0f
    1558:	86 87       	std	Z+14, r24	; 0x0e
    155a:	80 ec       	ldi	r24, 0xC0	; 192
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	91 8b       	std	Z+17, r25	; 0x11
    1560:	80 8b       	std	Z+16, r24	; 0x10
    1562:	81 ec       	ldi	r24, 0xC1	; 193
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	93 8b       	std	Z+19, r25	; 0x13
    1568:	82 8b       	std	Z+18, r24	; 0x12
    156a:	82 ec       	ldi	r24, 0xC2	; 194
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	95 8b       	std	Z+21, r25	; 0x15
    1570:	84 8b       	std	Z+20, r24	; 0x14
    1572:	86 ec       	ldi	r24, 0xC6	; 198
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	97 8b       	std	Z+23, r25	; 0x17
    1578:	86 8b       	std	Z+22, r24	; 0x16
    157a:	11 8e       	std	Z+25, r1	; 0x19
    157c:	12 8e       	std	Z+26, r1	; 0x1a
    157e:	13 8e       	std	Z+27, r1	; 0x1b
    1580:	14 8e       	std	Z+28, r1	; 0x1c
    1582:	08 95       	ret

00001584 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    1584:	8f 92       	push	r8
    1586:	9f 92       	push	r9
    1588:	af 92       	push	r10
    158a:	bf 92       	push	r11
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	7c 01       	movw	r14, r24
    159e:	8b 01       	movw	r16, r22
    15a0:	4c 01       	movw	r8, r24
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	88 0e       	add	r8, r24
    15a6:	91 1c       	adc	r9, r1
    15a8:	57 01       	movw	r10, r14
    15aa:	e5 e0       	ldi	r30, 0x05	; 5
    15ac:	ae 0e       	add	r10, r30
    15ae:	b1 1c       	adc	r11, r1
    size_t n = 0;
    15b0:	c0 e0       	ldi	r28, 0x00	; 0
    15b2:	d0 e0       	ldi	r29, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    15b4:	f4 01       	movw	r30, r8
    15b6:	61 91       	ld	r22, Z+
    15b8:	4f 01       	movw	r8, r30
    15ba:	4a e0       	ldi	r20, 0x0A	; 10
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	c8 01       	movw	r24, r16
    15c0:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN5Print5printEhi>
    15c4:	6c 01       	movw	r12, r24
        n += p.print('.');
    15c6:	6e e2       	ldi	r22, 0x2E	; 46
    15c8:	c8 01       	movw	r24, r16
    15ca:	0e 94 9d 0b 	call	0x173a	; 0x173a <_ZN5Print5printEc>
    15ce:	8c 0d       	add	r24, r12
    15d0:	9d 1d       	adc	r25, r13
    15d2:	c8 0f       	add	r28, r24
    15d4:	d9 1f       	adc	r29, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    15d6:	8a 14       	cp	r8, r10
    15d8:	9b 04       	cpc	r9, r11
    15da:	61 f7       	brne	.-40     	; 0x15b4 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    15dc:	4a e0       	ldi	r20, 0x0A	; 10
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	f7 01       	movw	r30, r14
    15e2:	65 81       	ldd	r22, Z+5	; 0x05
    15e4:	c8 01       	movw	r24, r16
    15e6:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN5Print5printEhi>
    return n;
}
    15ea:	8c 0f       	add	r24, r28
    15ec:	9d 1f       	adc	r25, r29
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	df 90       	pop	r13
    15fc:	cf 90       	pop	r12
    15fe:	bf 90       	pop	r11
    1600:	af 90       	pop	r10
    1602:	9f 90       	pop	r9
    1604:	8f 90       	pop	r8
    1606:	08 95       	ret

00001608 <_ZN9IPAddressC1Ev>:
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    1608:	2f ec       	ldi	r18, 0xCF	; 207
    160a:	32 e0       	ldi	r19, 0x02	; 2
    160c:	fc 01       	movw	r30, r24
    160e:	31 83       	std	Z+1, r19	; 0x01
    1610:	20 83       	st	Z, r18
{
    _address.dword = 0;
    1612:	12 82       	std	Z+2, r1	; 0x02
    1614:	13 82       	std	Z+3, r1	; 0x03
    1616:	14 82       	std	Z+4, r1	; 0x04
    1618:	15 82       	std	Z+5, r1	; 0x05
    161a:	08 95       	ret

0000161c <_ZN9IPAddressC1Ehhhh>:
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    161c:	0f 93       	push	r16
    161e:	fc 01       	movw	r30, r24
    1620:	8f ec       	ldi	r24, 0xCF	; 207
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    1628:	62 83       	std	Z+2, r22	; 0x02
    _address.bytes[1] = second_octet;
    162a:	43 83       	std	Z+3, r20	; 0x03
    _address.bytes[2] = third_octet;
    162c:	24 83       	std	Z+4, r18	; 0x04
    _address.bytes[3] = fourth_octet;
    162e:	05 83       	std	Z+5, r16	; 0x05
}
    1630:	0f 91       	pop	r16
    1632:	08 95       	ret

00001634 <initVariant>:
    1634:	08 95       	ret

00001636 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1636:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <init>

	initVariant();
    163a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    163e:	0e 94 a8 04 	call	0x950	; 0x950 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1642:	cb e2       	ldi	r28, 0x2B	; 43
    1644:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    1646:	0e 94 08 07 	call	0xe10	; 0xe10 <loop>
		if (serialEventRun) serialEventRun();
    164a:	20 97       	sbiw	r28, 0x00	; 0
    164c:	e1 f3       	breq	.-8      	; 0x1646 <main+0x10>
    164e:	0e 94 2b 09 	call	0x1256	; 0x1256 <_Z14serialEventRunv>
    1652:	f9 cf       	rjmp	.-14     	; 0x1646 <main+0x10>

00001654 <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	6c 01       	movw	r12, r24
    1666:	7a 01       	movw	r14, r20
    1668:	8b 01       	movw	r16, r22
    166a:	c0 e0       	ldi	r28, 0x00	; 0
    166c:	d0 e0       	ldi	r29, 0x00	; 0
    166e:	ce 15       	cp	r28, r14
    1670:	df 05       	cpc	r29, r15
    1672:	81 f0       	breq	.+32     	; 0x1694 <_ZN5Print5writeEPKhj+0x40>
    1674:	d8 01       	movw	r26, r16
    1676:	6d 91       	ld	r22, X+
    1678:	8d 01       	movw	r16, r26
    167a:	d6 01       	movw	r26, r12
    167c:	ed 91       	ld	r30, X+
    167e:	fc 91       	ld	r31, X
    1680:	01 90       	ld	r0, Z+
    1682:	f0 81       	ld	r31, Z
    1684:	e0 2d       	mov	r30, r0
    1686:	c6 01       	movw	r24, r12
    1688:	09 95       	icall
    168a:	89 2b       	or	r24, r25
    168c:	11 f0       	breq	.+4      	; 0x1692 <_ZN5Print5writeEPKhj+0x3e>
    168e:	21 96       	adiw	r28, 0x01	; 1
    1690:	ee cf       	rjmp	.-36     	; 0x166e <_ZN5Print5writeEPKhj+0x1a>
    1692:	7e 01       	movw	r14, r28
    1694:	c7 01       	movw	r24, r14
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
    16a6:	08 95       	ret

000016a8 <_ZN5Print5writeEPKc>:
    16a8:	61 15       	cp	r22, r1
    16aa:	71 05       	cpc	r23, r1
    16ac:	79 f0       	breq	.+30     	; 0x16cc <_ZN5Print5writeEPKc+0x24>
    16ae:	fb 01       	movw	r30, r22
    16b0:	01 90       	ld	r0, Z+
    16b2:	00 20       	and	r0, r0
    16b4:	e9 f7       	brne	.-6      	; 0x16b0 <_ZN5Print5writeEPKc+0x8>
    16b6:	31 97       	sbiw	r30, 0x01	; 1
    16b8:	af 01       	movw	r20, r30
    16ba:	46 1b       	sub	r20, r22
    16bc:	57 0b       	sbc	r21, r23
    16be:	dc 01       	movw	r26, r24
    16c0:	ed 91       	ld	r30, X+
    16c2:	fc 91       	ld	r31, X
    16c4:	02 80       	ldd	r0, Z+2	; 0x02
    16c6:	f3 81       	ldd	r31, Z+3	; 0x03
    16c8:	e0 2d       	mov	r30, r0
    16ca:	09 94       	ijmp
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	08 95       	ret

000016d2 <_ZN5Print5printEPK19__FlashStringHelper>:
    16d2:	ef 92       	push	r14
    16d4:	ff 92       	push	r15
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	8c 01       	movw	r16, r24
    16e0:	7b 01       	movw	r14, r22
    16e2:	c0 e0       	ldi	r28, 0x00	; 0
    16e4:	d0 e0       	ldi	r29, 0x00	; 0
    16e6:	f7 01       	movw	r30, r14
    16e8:	ec 0f       	add	r30, r28
    16ea:	fd 1f       	adc	r31, r29
    16ec:	64 91       	lpm	r22, Z
    16ee:	66 23       	and	r22, r22
    16f0:	61 f0       	breq	.+24     	; 0x170a <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    16f2:	d8 01       	movw	r26, r16
    16f4:	ed 91       	ld	r30, X+
    16f6:	fc 91       	ld	r31, X
    16f8:	01 90       	ld	r0, Z+
    16fa:	f0 81       	ld	r31, Z
    16fc:	e0 2d       	mov	r30, r0
    16fe:	c8 01       	movw	r24, r16
    1700:	09 95       	icall
    1702:	89 2b       	or	r24, r25
    1704:	11 f0       	breq	.+4      	; 0x170a <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1706:	21 96       	adiw	r28, 0x01	; 1
    1708:	ee cf       	rjmp	.-36     	; 0x16e6 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    170a:	ce 01       	movw	r24, r28
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	08 95       	ret

0000171a <_ZN5Print5printERK6String>:
    171a:	db 01       	movw	r26, r22
    171c:	14 96       	adiw	r26, 0x04	; 4
    171e:	4d 91       	ld	r20, X+
    1720:	5c 91       	ld	r21, X
    1722:	15 97       	sbiw	r26, 0x05	; 5
    1724:	6d 91       	ld	r22, X+
    1726:	7c 91       	ld	r23, X
    1728:	dc 01       	movw	r26, r24
    172a:	ed 91       	ld	r30, X+
    172c:	fc 91       	ld	r31, X
    172e:	02 80       	ldd	r0, Z+2	; 0x02
    1730:	f3 81       	ldd	r31, Z+3	; 0x03
    1732:	e0 2d       	mov	r30, r0
    1734:	09 94       	ijmp

00001736 <_ZN5Print5printEPKc>:
    1736:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <_ZN5Print5writeEPKc>

0000173a <_ZN5Print5printEc>:
    173a:	dc 01       	movw	r26, r24
    173c:	ed 91       	ld	r30, X+
    173e:	fc 91       	ld	r31, X
    1740:	01 90       	ld	r0, Z+
    1742:	f0 81       	ld	r31, Z
    1744:	e0 2d       	mov	r30, r0
    1746:	09 94       	ijmp

00001748 <_ZN5Print7printlnEv>:
    1748:	6c ea       	ldi	r22, 0xAC	; 172
    174a:	73 e0       	ldi	r23, 0x03	; 3
    174c:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <_ZN5Print5writeEPKc>

00001750 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	ec 01       	movw	r28, r24
    175a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
    175e:	8c 01       	movw	r16, r24
    1760:	ce 01       	movw	r24, r28
    1762:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN5Print7printlnEv>
    1766:	80 0f       	add	r24, r16
    1768:	91 1f       	adc	r25, r17
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	08 95       	ret

00001774 <_ZN5Print7printlnERK6String>:
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	ec 01       	movw	r28, r24
    177e:	0e 94 8d 0b 	call	0x171a	; 0x171a <_ZN5Print5printERK6String>
    1782:	8c 01       	movw	r16, r24
    1784:	ce 01       	movw	r24, r28
    1786:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN5Print7printlnEv>
    178a:	80 0f       	add	r24, r16
    178c:	91 1f       	adc	r25, r17
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	08 95       	ret

00001798 <_ZN5Print7printlnEPKc>:
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	ec 01       	movw	r28, r24
    17a2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN5Print5writeEPKc>
    17a6:	8c 01       	movw	r16, r24
    17a8:	ce 01       	movw	r24, r28
    17aa:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN5Print7printlnEv>
    17ae:	80 0f       	add	r24, r16
    17b0:	91 1f       	adc	r25, r17
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	08 95       	ret

000017bc <_ZN5Print11printNumberEmh>:
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	a1 97       	sbiw	r28, 0x21	; 33
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	7c 01       	movw	r14, r24
    17e2:	fa 01       	movw	r30, r20
    17e4:	cb 01       	movw	r24, r22
    17e6:	19 a2       	std	Y+33, r1	; 0x21
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	08 f4       	brcc	.+2      	; 0x17ee <_ZN5Print11printNumberEmh+0x32>
    17ec:	2a e0       	ldi	r18, 0x0A	; 10
    17ee:	8e 01       	movw	r16, r28
    17f0:	0f 5d       	subi	r16, 0xDF	; 223
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	82 2e       	mov	r8, r18
    17f6:	91 2c       	mov	r9, r1
    17f8:	a1 2c       	mov	r10, r1
    17fa:	b1 2c       	mov	r11, r1
    17fc:	bf 01       	movw	r22, r30
    17fe:	a5 01       	movw	r20, r10
    1800:	94 01       	movw	r18, r8
    1802:	0e 94 a6 32 	call	0x654c	; 0x654c <__udivmodsi4>
    1806:	f9 01       	movw	r30, r18
    1808:	ca 01       	movw	r24, r20
    180a:	01 50       	subi	r16, 0x01	; 1
    180c:	11 09       	sbc	r17, r1
    180e:	6a 30       	cpi	r22, 0x0A	; 10
    1810:	10 f4       	brcc	.+4      	; 0x1816 <_ZN5Print11printNumberEmh+0x5a>
    1812:	60 5d       	subi	r22, 0xD0	; 208
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <_ZN5Print11printNumberEmh+0x5c>
    1816:	69 5c       	subi	r22, 0xC9	; 201
    1818:	d8 01       	movw	r26, r16
    181a:	6c 93       	st	X, r22
    181c:	23 2b       	or	r18, r19
    181e:	24 2b       	or	r18, r20
    1820:	25 2b       	or	r18, r21
    1822:	61 f7       	brne	.-40     	; 0x17fc <_ZN5Print11printNumberEmh+0x40>
    1824:	b8 01       	movw	r22, r16
    1826:	c7 01       	movw	r24, r14
    1828:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN5Print5writeEPKc>
    182c:	a1 96       	adiw	r28, 0x21	; 33
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	bf 90       	pop	r11
    1846:	af 90       	pop	r10
    1848:	9f 90       	pop	r9
    184a:	8f 90       	pop	r8
    184c:	08 95       	ret

0000184e <_ZN5Print5printEmi>:
    184e:	21 15       	cp	r18, r1
    1850:	31 05       	cpc	r19, r1
    1852:	41 f4       	brne	.+16     	; 0x1864 <_ZN5Print5printEmi+0x16>
    1854:	dc 01       	movw	r26, r24
    1856:	ed 91       	ld	r30, X+
    1858:	fc 91       	ld	r31, X
    185a:	01 90       	ld	r0, Z+
    185c:	f0 81       	ld	r31, Z
    185e:	e0 2d       	mov	r30, r0
    1860:	64 2f       	mov	r22, r20
    1862:	09 94       	ijmp
    1864:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <_ZN5Print11printNumberEmh>

00001868 <_ZN5Print5printEhi>:
    1868:	9a 01       	movw	r18, r20
    186a:	46 2f       	mov	r20, r22
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	0c 94 27 0c 	jmp	0x184e	; 0x184e <_ZN5Print5printEmi>

00001876 <_ZN5Print7printlnEhi>:
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	ec 01       	movw	r28, r24
    1880:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN5Print5printEhi>
    1884:	8c 01       	movw	r16, r24
    1886:	ce 01       	movw	r24, r28
    1888:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN5Print7printlnEv>
    188c:	80 0f       	add	r24, r16
    188e:	91 1f       	adc	r25, r17
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	08 95       	ret

0000189a <_ZN5Print5printEji>:
    189a:	9a 01       	movw	r18, r20
    189c:	ab 01       	movw	r20, r22
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	0c 94 27 0c 	jmp	0x184e	; 0x184e <_ZN5Print5printEmi>

000018a6 <_ZN5Print7printlnEmi>:
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	ec 01       	movw	r28, r24
    18b0:	0e 94 27 0c 	call	0x184e	; 0x184e <_ZN5Print5printEmi>
    18b4:	8c 01       	movw	r16, r24
    18b6:	ce 01       	movw	r24, r28
    18b8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN5Print7printlnEv>
    18bc:	80 0f       	add	r24, r16
    18be:	91 1f       	adc	r25, r17
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	08 95       	ret

000018ca <_ZN5Print5printEli>:
    18ca:	cf 92       	push	r12
    18cc:	df 92       	push	r13
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	21 15       	cp	r18, r1
    18dc:	31 05       	cpc	r19, r1
    18de:	81 f4       	brne	.+32     	; 0x1900 <_ZN5Print5printEli+0x36>
    18e0:	dc 01       	movw	r26, r24
    18e2:	ed 91       	ld	r30, X+
    18e4:	fc 91       	ld	r31, X
    18e6:	01 90       	ld	r0, Z+
    18e8:	f0 81       	ld	r31, Z
    18ea:	e0 2d       	mov	r30, r0
    18ec:	64 2f       	mov	r22, r20
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	09 94       	ijmp
    1900:	2a 30       	cpi	r18, 0x0A	; 10
    1902:	31 05       	cpc	r19, r1
    1904:	01 f5       	brne	.+64     	; 0x1946 <_ZN5Print5printEli+0x7c>
    1906:	77 ff       	sbrs	r23, 7
    1908:	1d c0       	rjmp	.+58     	; 0x1944 <_ZN5Print5printEli+0x7a>
    190a:	6a 01       	movw	r12, r20
    190c:	7b 01       	movw	r14, r22
    190e:	ec 01       	movw	r28, r24
    1910:	6d e2       	ldi	r22, 0x2D	; 45
    1912:	0e 94 9d 0b 	call	0x173a	; 0x173a <_ZN5Print5printEc>
    1916:	8c 01       	movw	r16, r24
    1918:	44 27       	eor	r20, r20
    191a:	55 27       	eor	r21, r21
    191c:	ba 01       	movw	r22, r20
    191e:	4c 19       	sub	r20, r12
    1920:	5d 09       	sbc	r21, r13
    1922:	6e 09       	sbc	r22, r14
    1924:	7f 09       	sbc	r23, r15
    1926:	2a e0       	ldi	r18, 0x0A	; 10
    1928:	ce 01       	movw	r24, r28
    192a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN5Print11printNumberEmh>
    192e:	80 0f       	add	r24, r16
    1930:	91 1f       	adc	r25, r17
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	08 95       	ret
    1944:	2a e0       	ldi	r18, 0x0A	; 10
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	ff 90       	pop	r15
    1950:	ef 90       	pop	r14
    1952:	df 90       	pop	r13
    1954:	cf 90       	pop	r12
    1956:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <_ZN5Print11printNumberEmh>

0000195a <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1964:	0e 94 65 0c 	call	0x18ca	; 0x18ca <_ZN5Print5printEli>
    1968:	8c 01       	movw	r16, r24
  n += println();
    196a:	ce 01       	movw	r24, r28
    196c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN5Print7printlnEv>
  return n;
}
    1970:	80 0f       	add	r24, r16
    1972:	91 1f       	adc	r25, r17
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	08 95       	ret

0000197e <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    197e:	7f 92       	push	r7
    1980:	8f 92       	push	r8
    1982:	9f 92       	push	r9
    1984:	af 92       	push	r10
    1986:	bf 92       	push	r11
    1988:	cf 92       	push	r12
    198a:	df 92       	push	r13
    198c:	ef 92       	push	r14
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	8c 01       	movw	r16, r24
    199a:	6a 01       	movw	r12, r20
    199c:	7b 01       	movw	r14, r22
    199e:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    19a0:	9a 01       	movw	r18, r20
    19a2:	ab 01       	movw	r20, r22
    19a4:	c7 01       	movw	r24, r14
    19a6:	b6 01       	movw	r22, r12
    19a8:	0e 94 7d 32 	call	0x64fa	; 0x64fa <__unordsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	19 f0       	breq	.+6      	; 0x19b6 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    19b0:	61 ed       	ldi	r22, 0xD1	; 209
    19b2:	72 e0       	ldi	r23, 0x02	; 2
    19b4:	27 c0       	rjmp	.+78     	; 0x1a04 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    19b6:	46 01       	movw	r8, r12
    19b8:	57 01       	movw	r10, r14
    19ba:	e8 94       	clt
    19bc:	b7 f8       	bld	r11, 7
    19be:	2f ef       	ldi	r18, 0xFF	; 255
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	5f e7       	ldi	r21, 0x7F	; 127
    19c6:	c5 01       	movw	r24, r10
    19c8:	b4 01       	movw	r22, r8
    19ca:	0e 94 7d 32 	call	0x64fa	; 0x64fa <__unordsf2>
    19ce:	81 11       	cpse	r24, r1
    19d0:	0d c0       	rjmp	.+26     	; 0x19ec <_ZN5Print10printFloatEdh+0x6e>
    19d2:	2f ef       	ldi	r18, 0xFF	; 255
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	5f e7       	ldi	r21, 0x7F	; 127
    19da:	c5 01       	movw	r24, r10
    19dc:	b4 01       	movw	r22, r8
    19de:	0e 94 ae 31 	call	0x635c	; 0x635c <__cmpsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	1c f4       	brge	.+6      	; 0x19ec <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    19e6:	65 ed       	ldi	r22, 0xD5	; 213
    19e8:	72 e0       	ldi	r23, 0x02	; 2
    19ea:	0c c0       	rjmp	.+24     	; 0x1a04 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    19ec:	2f ef       	ldi	r18, 0xFF	; 255
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	5f e4       	ldi	r21, 0x4F	; 79
    19f4:	c7 01       	movw	r24, r14
    19f6:	b6 01       	movw	r22, r12
    19f8:	0e 94 78 32 	call	0x64f0	; 0x64f0 <__gesf2>
    19fc:	18 16       	cp	r1, r24
    19fe:	94 f4       	brge	.+36     	; 0x1a24 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1a00:	69 ed       	ldi	r22, 0xD9	; 217
    1a02:	72 e0       	ldi	r23, 0x02	; 2
    1a04:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	df 90       	pop	r13
    1a14:	cf 90       	pop	r12
    1a16:	bf 90       	pop	r11
    1a18:	af 90       	pop	r10
    1a1a:	9f 90       	pop	r9
    1a1c:	8f 90       	pop	r8
    1a1e:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1a20:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1a24:	2f ef       	ldi	r18, 0xFF	; 255
    1a26:	3f ef       	ldi	r19, 0xFF	; 255
    1a28:	4f e7       	ldi	r20, 0x7F	; 127
    1a2a:	5f ec       	ldi	r21, 0xCF	; 207
    1a2c:	c7 01       	movw	r24, r14
    1a2e:	b6 01       	movw	r22, r12
    1a30:	0e 94 ae 31 	call	0x635c	; 0x635c <__cmpsf2>
    1a34:	87 fd       	sbrc	r24, 7
    1a36:	e4 cf       	rjmp	.-56     	; 0x1a00 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	a9 01       	movw	r20, r18
    1a3e:	c7 01       	movw	r24, r14
    1a40:	b6 01       	movw	r22, r12
    1a42:	0e 94 ae 31 	call	0x635c	; 0x635c <__cmpsf2>
    1a46:	87 ff       	sbrs	r24, 7
    1a48:	0a c0       	rjmp	.+20     	; 0x1a5e <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1a4a:	6d e2       	ldi	r22, 0x2D	; 45
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	0e 94 9d 0b 	call	0x173a	; 0x173a <_ZN5Print5printEc>
    1a52:	ec 01       	movw	r28, r24
     number = -number;
    1a54:	f7 fa       	bst	r15, 7
    1a56:	f0 94       	com	r15
    1a58:	f7 f8       	bld	r15, 7
    1a5a:	f0 94       	com	r15
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1a5e:	c0 e0       	ldi	r28, 0x00	; 0
    1a60:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1a62:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1a6c:	7b 14       	cp	r7, r11
    1a6e:	41 f0       	breq	.+16     	; 0x1a80 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e2       	ldi	r20, 0x20	; 32
    1a76:	51 e4       	ldi	r21, 0x41	; 65
    1a78:	0e 94 b3 31 	call	0x6366	; 0x6366 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1a7c:	b3 94       	inc	r11
    1a7e:	f6 cf       	rjmp	.-20     	; 0x1a6c <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1a80:	a7 01       	movw	r20, r14
    1a82:	96 01       	movw	r18, r12
    1a84:	0e 94 87 07 	call	0xf0e	; 0xf0e <__addsf3>
    1a88:	6b 01       	movw	r12, r22
    1a8a:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1a8c:	0e 94 25 32 	call	0x644a	; 0x644a <__fixunssfsi>
    1a90:	4b 01       	movw	r8, r22
    1a92:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1a94:	2a e0       	ldi	r18, 0x0A	; 10
    1a96:	ab 01       	movw	r20, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	c8 01       	movw	r24, r16
    1a9c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1aa0:	c8 0f       	add	r28, r24
    1aa2:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1aa4:	77 20       	and	r7, r7
    1aa6:	b9 f1       	breq	.+110    	; 0x1b16 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1aa8:	c5 01       	movw	r24, r10
    1aaa:	b4 01       	movw	r22, r8
    1aac:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__floatunsisf>
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	c7 01       	movw	r24, r14
    1ab6:	b6 01       	movw	r22, r12
    1ab8:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
    1abc:	6b 01       	movw	r12, r22
    1abe:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1ac0:	6e e2       	ldi	r22, 0x2E	; 46
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	0e 94 9d 0b 	call	0x173a	; 0x173a <_ZN5Print5printEc>
    1ac8:	c8 0f       	add	r28, r24
    1aca:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e2       	ldi	r20, 0x20	; 32
    1ad2:	51 e4       	ldi	r21, 0x41	; 65
    1ad4:	c7 01       	movw	r24, r14
    1ad6:	b6 01       	movw	r22, r12
    1ad8:	0e 94 81 08 	call	0x1102	; 0x1102 <__mulsf3>
    1adc:	4b 01       	movw	r8, r22
    1ade:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1ae0:	0e 94 25 32 	call	0x644a	; 0x644a <__fixunssfsi>
    1ae4:	6b 01       	movw	r12, r22
    1ae6:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1ae8:	4a e0       	ldi	r20, 0x0A	; 10
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	c8 01       	movw	r24, r16
    1aee:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN5Print5printEji>
    1af2:	c8 0f       	add	r28, r24
    1af4:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1af6:	b6 01       	movw	r22, r12
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__floatunsisf>
    1b00:	9b 01       	movw	r18, r22
    1b02:	ac 01       	movw	r20, r24
    1b04:	c5 01       	movw	r24, r10
    1b06:	b4 01       	movw	r22, r8
    1b08:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
    1b0c:	6b 01       	movw	r12, r22
    1b0e:	7c 01       	movw	r14, r24
    1b10:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1b12:	71 10       	cpse	r7, r1
    1b14:	db cf       	rjmp	.-74     	; 0x1acc <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1b16:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	df 90       	pop	r13
    1b26:	cf 90       	pop	r12
    1b28:	bf 90       	pop	r11
    1b2a:	af 90       	pop	r10
    1b2c:	9f 90       	pop	r9
    1b2e:	8f 90       	pop	r8
    1b30:	7f 90       	pop	r7
    1b32:	08 95       	ret

00001b34 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1b34:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <_ZN5Print10printFloatEdh>

00001b38 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
    1b42:	2f 93       	push	r18
    1b44:	3f 93       	push	r19
    1b46:	8f 93       	push	r24
    1b48:	9f 93       	push	r25
    1b4a:	af 93       	push	r26
    1b4c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1b4e:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <timer0_millis>
    1b52:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <timer0_millis+0x1>
    1b56:	a0 91 a7 05 	lds	r26, 0x05A7	; 0x8005a7 <timer0_millis+0x2>
    1b5a:	b0 91 a8 05 	lds	r27, 0x05A8	; 0x8005a8 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1b5e:	30 91 a4 05 	lds	r19, 0x05A4	; 0x8005a4 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1b62:	23 e0       	ldi	r18, 0x03	; 3
    1b64:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1b66:	2d 37       	cpi	r18, 0x7D	; 125
    1b68:	20 f4       	brcc	.+8      	; 0x1b72 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	a1 1d       	adc	r26, r1
    1b6e:	b1 1d       	adc	r27, r1
    1b70:	05 c0       	rjmp	.+10     	; 0x1b7c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1b72:	26 e8       	ldi	r18, 0x86	; 134
    1b74:	23 0f       	add	r18, r19
		m += 1;
    1b76:	02 96       	adiw	r24, 0x02	; 2
    1b78:	a1 1d       	adc	r26, r1
    1b7a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1b7c:	20 93 a4 05 	sts	0x05A4, r18	; 0x8005a4 <timer0_fract>
	timer0_millis = m;
    1b80:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <timer0_millis>
    1b84:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <timer0_millis+0x1>
    1b88:	a0 93 a7 05 	sts	0x05A7, r26	; 0x8005a7 <timer0_millis+0x2>
    1b8c:	b0 93 a8 05 	sts	0x05A8, r27	; 0x8005a8 <timer0_millis+0x3>
	timer0_overflow_count++;
    1b90:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <timer0_overflow_count>
    1b94:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <timer0_overflow_count+0x1>
    1b98:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <timer0_overflow_count+0x2>
    1b9c:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <timer0_overflow_count+0x3>
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	a1 1d       	adc	r26, r1
    1ba4:	b1 1d       	adc	r27, r1
    1ba6:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <timer0_overflow_count>
    1baa:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <timer0_overflow_count+0x1>
    1bae:	a0 93 ab 05 	sts	0x05AB, r26	; 0x8005ab <timer0_overflow_count+0x2>
    1bb2:	b0 93 ac 05 	sts	0x05AC, r27	; 0x8005ac <timer0_overflow_count+0x3>
}
    1bb6:	bf 91       	pop	r27
    1bb8:	af 91       	pop	r26
    1bba:	9f 91       	pop	r25
    1bbc:	8f 91       	pop	r24
    1bbe:	3f 91       	pop	r19
    1bc0:	2f 91       	pop	r18
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	0f 90       	pop	r0
    1bc8:	1f 90       	pop	r1
    1bca:	18 95       	reti

00001bcc <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1bcc:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1bce:	f8 94       	cli
	m = timer0_millis;
    1bd0:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <timer0_millis>
    1bd4:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <timer0_millis+0x1>
    1bd8:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <timer0_millis+0x2>
    1bdc:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <timer0_millis+0x3>
	SREG = oldSREG;
    1be0:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1be2:	08 95       	ret

00001be4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1be4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1be6:	f8 94       	cli
	m = timer0_overflow_count;
    1be8:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <timer0_overflow_count>
    1bec:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <timer0_overflow_count+0x1>
    1bf0:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <timer0_overflow_count+0x2>
    1bf4:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1bf8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1bfa:	a8 9b       	sbis	0x15, 0	; 21
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <micros+0x24>
    1bfe:	2f 3f       	cpi	r18, 0xFF	; 255
    1c00:	19 f0       	breq	.+6      	; 0x1c08 <micros+0x24>
		m++;
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	a1 1d       	adc	r26, r1
    1c06:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1c08:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1c0a:	ba 2f       	mov	r27, r26
    1c0c:	a9 2f       	mov	r26, r25
    1c0e:	98 2f       	mov	r25, r24
    1c10:	88 27       	eor	r24, r24
    1c12:	82 0f       	add	r24, r18
    1c14:	91 1d       	adc	r25, r1
    1c16:	a1 1d       	adc	r26, r1
    1c18:	b1 1d       	adc	r27, r1
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	42 e0       	ldi	r20, 0x02	; 2
    1c20:	66 0f       	add	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	4a 95       	dec	r20
    1c2a:	d1 f7       	brne	.-12     	; 0x1c20 <micros+0x3c>
}
    1c2c:	08 95       	ret

00001c2e <delay>:

void delay(unsigned long ms)
{
    1c2e:	8f 92       	push	r8
    1c30:	9f 92       	push	r9
    1c32:	af 92       	push	r10
    1c34:	bf 92       	push	r11
    1c36:	cf 92       	push	r12
    1c38:	df 92       	push	r13
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	6b 01       	movw	r12, r22
    1c40:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1c42:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <micros>
    1c46:	4b 01       	movw	r8, r22
    1c48:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1c4a:	c1 14       	cp	r12, r1
    1c4c:	d1 04       	cpc	r13, r1
    1c4e:	e1 04       	cpc	r14, r1
    1c50:	f1 04       	cpc	r15, r1
    1c52:	01 f1       	breq	.+64     	; 0x1c94 <delay+0x66>
		yield();
    1c54:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1c58:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <micros>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	88 19       	sub	r24, r8
    1c62:	99 09       	sbc	r25, r9
    1c64:	aa 09       	sbc	r26, r10
    1c66:	bb 09       	sbc	r27, r11
    1c68:	88 3e       	cpi	r24, 0xE8	; 232
    1c6a:	93 40       	sbci	r25, 0x03	; 3
    1c6c:	a1 05       	cpc	r26, r1
    1c6e:	b1 05       	cpc	r27, r1
    1c70:	60 f3       	brcs	.-40     	; 0x1c4a <delay+0x1c>
			ms--;
    1c72:	21 e0       	ldi	r18, 0x01	; 1
    1c74:	c2 1a       	sub	r12, r18
    1c76:	d1 08       	sbc	r13, r1
    1c78:	e1 08       	sbc	r14, r1
    1c7a:	f1 08       	sbc	r15, r1
			start += 1000;
    1c7c:	88 ee       	ldi	r24, 0xE8	; 232
    1c7e:	88 0e       	add	r8, r24
    1c80:	83 e0       	ldi	r24, 0x03	; 3
    1c82:	98 1e       	adc	r9, r24
    1c84:	a1 1c       	adc	r10, r1
    1c86:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1c88:	c1 14       	cp	r12, r1
    1c8a:	d1 04       	cpc	r13, r1
    1c8c:	e1 04       	cpc	r14, r1
    1c8e:	f1 04       	cpc	r15, r1
    1c90:	19 f7       	brne	.-58     	; 0x1c58 <delay+0x2a>
    1c92:	db cf       	rjmp	.-74     	; 0x1c4a <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	df 90       	pop	r13
    1c9a:	cf 90       	pop	r12
    1c9c:	bf 90       	pop	r11
    1c9e:	af 90       	pop	r10
    1ca0:	9f 90       	pop	r9
    1ca2:	8f 90       	pop	r8
    1ca4:	08 95       	ret

00001ca6 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	91 05       	cpc	r25, r1
    1caa:	38 f0       	brcs	.+14     	; 0x1cba <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1cb4:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <delayMicroseconds+0x10>
    1cba:	08 95       	ret

00001cbc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1cbc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1cbe:	84 b5       	in	r24, 0x24	; 36
    1cc0:	82 60       	ori	r24, 0x02	; 2
    1cc2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1cc4:	84 b5       	in	r24, 0x24	; 36
    1cc6:	81 60       	ori	r24, 0x01	; 1
    1cc8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1cca:	85 b5       	in	r24, 0x25	; 37
    1ccc:	82 60       	ori	r24, 0x02	; 2
    1cce:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1cd0:	85 b5       	in	r24, 0x25	; 37
    1cd2:	81 60       	ori	r24, 0x01	; 1
    1cd4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1cd6:	ee e6       	ldi	r30, 0x6E	; 110
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	81 60       	ori	r24, 0x01	; 1
    1cde:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1ce0:	e1 e8       	ldi	r30, 0x81	; 129
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1ce6:	80 81       	ld	r24, Z
    1ce8:	82 60       	ori	r24, 0x02	; 2
    1cea:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1cec:	80 81       	ld	r24, Z
    1cee:	81 60       	ori	r24, 0x01	; 1
    1cf0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1cf2:	e0 e8       	ldi	r30, 0x80	; 128
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	81 60       	ori	r24, 0x01	; 1
    1cfa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1cfc:	e1 eb       	ldi	r30, 0xB1	; 177
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	84 60       	ori	r24, 0x04	; 4
    1d04:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1d06:	e0 eb       	ldi	r30, 0xB0	; 176
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	81 60       	ori	r24, 0x01	; 1
    1d0e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1d10:	ea e7       	ldi	r30, 0x7A	; 122
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	84 60       	ori	r24, 0x04	; 4
    1d18:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1d1a:	80 81       	ld	r24, Z
    1d1c:	82 60       	ori	r24, 0x02	; 2
    1d1e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1d20:	80 81       	ld	r24, Z
    1d22:	81 60       	ori	r24, 0x01	; 1
    1d24:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1d26:	80 81       	ld	r24, Z
    1d28:	80 68       	ori	r24, 0x80	; 128
    1d2a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1d2c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1d30:	08 95       	ret

00001d32 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1d32:	8e 30       	cpi	r24, 0x0E	; 14
    1d34:	08 f0       	brcs	.+2      	; 0x1d38 <analogRead+0x6>
    1d36:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1d38:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <analog_reference>
    1d3c:	90 e4       	ldi	r25, 0x40	; 64
    1d3e:	29 9f       	mul	r18, r25
    1d40:	90 01       	movw	r18, r0
    1d42:	11 24       	eor	r1, r1
    1d44:	87 70       	andi	r24, 0x07	; 7
    1d46:	82 2b       	or	r24, r18
    1d48:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1d4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1d50:	80 64       	ori	r24, 0x40	; 64
    1d52:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1d56:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1d5a:	86 fd       	sbrc	r24, 6
    1d5c:	fc cf       	rjmp	.-8      	; 0x1d56 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1d5e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    1d62:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1d66:	90 e0       	ldi	r25, 0x00	; 0
}
    1d68:	92 2b       	or	r25, r18
    1d6a:	08 95       	ret

00001d6c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1d6c:	83 30       	cpi	r24, 0x03	; 3
    1d6e:	81 f0       	breq	.+32     	; 0x1d90 <turnOffPWM+0x24>
    1d70:	28 f4       	brcc	.+10     	; 0x1d7c <turnOffPWM+0x10>
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	99 f0       	breq	.+38     	; 0x1d9c <turnOffPWM+0x30>
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	a1 f0       	breq	.+40     	; 0x1da2 <turnOffPWM+0x36>
    1d7a:	08 95       	ret
    1d7c:	87 30       	cpi	r24, 0x07	; 7
    1d7e:	a9 f0       	breq	.+42     	; 0x1daa <turnOffPWM+0x3e>
    1d80:	88 30       	cpi	r24, 0x08	; 8
    1d82:	b9 f0       	breq	.+46     	; 0x1db2 <turnOffPWM+0x46>
    1d84:	84 30       	cpi	r24, 0x04	; 4
    1d86:	d1 f4       	brne	.+52     	; 0x1dbc <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1d88:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d8c:	8f 7d       	andi	r24, 0xDF	; 223
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1d90:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d94:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1d96:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d9a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1d9c:	84 b5       	in	r24, 0x24	; 36
    1d9e:	8f 77       	andi	r24, 0x7F	; 127
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1da2:	84 b5       	in	r24, 0x24	; 36
    1da4:	8f 7d       	andi	r24, 0xDF	; 223
    1da6:	84 bd       	out	0x24, r24	; 36
    1da8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1daa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1dae:	8f 77       	andi	r24, 0x7F	; 127
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1db2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1db6:	8f 7d       	andi	r24, 0xDF	; 223
    1db8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1dbc:	08 95       	ret

00001dbe <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	ea 5c       	subi	r30, 0xCA	; 202
    1dc8:	fb 4f       	sbci	r31, 0xFB	; 251
    1dca:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1dcc:	fc 01       	movw	r30, r24
    1dce:	e5 5b       	subi	r30, 0xB5	; 181
    1dd0:	fb 4f       	sbci	r31, 0xFB	; 251
    1dd2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1dd4:	88 23       	and	r24, r24
    1dd6:	61 f1       	breq	.+88     	; 0x1e30 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	fc 01       	movw	r30, r24
    1de0:	ec 58       	subi	r30, 0x8C	; 140
    1de2:	fb 4f       	sbci	r31, 0xFB	; 251
    1de4:	c5 91       	lpm	r28, Z+
    1de6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1de8:	fc 01       	movw	r30, r24
    1dea:	e6 59       	subi	r30, 0x96	; 150
    1dec:	fb 4f       	sbci	r31, 0xFB	; 251
    1dee:	a5 91       	lpm	r26, Z+
    1df0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1df2:	61 11       	cpse	r22, r1
    1df4:	09 c0       	rjmp	.+18     	; 0x1e08 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1df6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1df8:	f8 94       	cli
		*reg &= ~bit;
    1dfa:	88 81       	ld	r24, Y
    1dfc:	20 95       	com	r18
    1dfe:	82 23       	and	r24, r18
    1e00:	88 83       	st	Y, r24
		*out &= ~bit;
    1e02:	ec 91       	ld	r30, X
    1e04:	2e 23       	and	r18, r30
    1e06:	0b c0       	rjmp	.+22     	; 0x1e1e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1e08:	62 30       	cpi	r22, 0x02	; 2
    1e0a:	61 f4       	brne	.+24     	; 0x1e24 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1e0c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1e0e:	f8 94       	cli
		*reg &= ~bit;
    1e10:	88 81       	ld	r24, Y
    1e12:	32 2f       	mov	r19, r18
    1e14:	30 95       	com	r19
    1e16:	83 23       	and	r24, r19
    1e18:	88 83       	st	Y, r24
		*out |= bit;
    1e1a:	ec 91       	ld	r30, X
    1e1c:	2e 2b       	or	r18, r30
    1e1e:	2c 93       	st	X, r18
		SREG = oldSREG;
    1e20:	9f bf       	out	0x3f, r25	; 63
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1e24:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1e26:	f8 94       	cli
		*reg |= bit;
    1e28:	e8 81       	ld	r30, Y
    1e2a:	2e 2b       	or	r18, r30
    1e2c:	28 83       	st	Y, r18
		SREG = oldSREG;
    1e2e:	8f bf       	out	0x3f, r24	; 63
	}
}
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	08 95       	ret

00001e36 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	f9 01       	movw	r30, r18
    1e42:	ef 5d       	subi	r30, 0xDF	; 223
    1e44:	fb 4f       	sbci	r31, 0xFB	; 251
    1e46:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1e48:	f9 01       	movw	r30, r18
    1e4a:	ea 5c       	subi	r30, 0xCA	; 202
    1e4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e4e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1e50:	f9 01       	movw	r30, r18
    1e52:	e5 5b       	subi	r30, 0xB5	; 181
    1e54:	fb 4f       	sbci	r31, 0xFB	; 251
    1e56:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1e58:	cc 23       	and	r28, r28
    1e5a:	c1 f0       	breq	.+48     	; 0x1e8c <digitalWrite+0x56>
    1e5c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e5e:	81 11       	cpse	r24, r1
    1e60:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <turnOffPWM>

	out = portOutputRegister(port);
    1e64:	ec 2f       	mov	r30, r28
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	e6 59       	subi	r30, 0x96	; 150
    1e6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e70:	a5 91       	lpm	r26, Z+
    1e72:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1e74:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1e76:	f8 94       	cli

	if (val == LOW) {
    1e78:	11 11       	cpse	r17, r1
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <digitalWrite+0x4e>
		*out &= ~bit;
    1e7c:	8c 91       	ld	r24, X
    1e7e:	d0 95       	com	r29
    1e80:	d8 23       	and	r29, r24
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1e84:	ec 91       	ld	r30, X
    1e86:	de 2b       	or	r29, r30
    1e88:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1e8a:	9f bf       	out	0x3f, r25	; 63
}
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	08 95       	ret

00001e94 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	f9 01       	movw	r30, r18
    1e9e:	ef 5d       	subi	r30, 0xDF	; 223
    1ea0:	fb 4f       	sbci	r31, 0xFB	; 251
    1ea2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	ea 5c       	subi	r30, 0xCA	; 202
    1ea8:	fb 4f       	sbci	r31, 0xFB	; 251
    1eaa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1eac:	f9 01       	movw	r30, r18
    1eae:	e5 5b       	subi	r30, 0xB5	; 181
    1eb0:	fb 4f       	sbci	r31, 0xFB	; 251
    1eb2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1eb4:	cc 23       	and	r28, r28
    1eb6:	91 f0       	breq	.+36     	; 0x1edc <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1eb8:	81 11       	cpse	r24, r1
    1eba:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1ebe:	ec 2f       	mov	r30, r28
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	ee 0f       	add	r30, r30
    1ec4:	ff 1f       	adc	r31, r31
    1ec6:	e0 5a       	subi	r30, 0xA0	; 160
    1ec8:	fb 4f       	sbci	r31, 0xFB	; 251
    1eca:	a5 91       	lpm	r26, Z+
    1ecc:	b4 91       	lpm	r27, Z
    1ece:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1ed0:	ed 23       	and	r30, r29
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	21 f4       	brne	.+8      	; 0x1ee0 <digitalRead+0x4c>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <digitalRead+0x4c>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	08 95       	ret

00001ee6 <_ZN6StringD1Ev>:
unsigned char String::concat(long num)
{
	char buf[2 + 3 * sizeof(long)];
	ltoa(num, buf, 10);
	return concat(buf, strlen(buf));
}
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	0c 94 19 34 	jmp	0x6832	; 0x6832 <free>

00001ef0 <_ZN6String10invalidateEv>:
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	ec 01       	movw	r28, r24
    1ef6:	88 81       	ld	r24, Y
    1ef8:	99 81       	ldd	r25, Y+1	; 0x01
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	11 f0       	breq	.+4      	; 0x1f02 <_ZN6String10invalidateEv+0x12>
    1efe:	0e 94 19 34 	call	0x6832	; 0x6832 <free>
    1f02:	19 82       	std	Y+1, r1	; 0x01
    1f04:	18 82       	st	Y, r1
    1f06:	1d 82       	std	Y+5, r1	; 0x05
    1f08:	1c 82       	std	Y+4, r1	; 0x04
    1f0a:	1b 82       	std	Y+3, r1	; 0x03
    1f0c:	1a 82       	std	Y+2, r1	; 0x02
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	08 95       	ret

00001f14 <_ZN6String12changeBufferEj>:
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	ec 01       	movw	r28, r24
    1f1e:	8b 01       	movw	r16, r22
    1f20:	6f 5f       	subi	r22, 0xFF	; 255
    1f22:	7f 4f       	sbci	r23, 0xFF	; 255
    1f24:	88 81       	ld	r24, Y
    1f26:	99 81       	ldd	r25, Y+1	; 0x01
    1f28:	0e 94 a2 34 	call	0x6944	; 0x6944 <realloc>
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	31 f0       	breq	.+12     	; 0x1f3c <_ZN6String12changeBufferEj+0x28>
    1f30:	99 83       	std	Y+1, r25	; 0x01
    1f32:	88 83       	st	Y, r24
    1f34:	1b 83       	std	Y+3, r17	; 0x03
    1f36:	0a 83       	std	Y+2, r16	; 0x02
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <_ZN6String12changeBufferEj+0x2a>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	08 95       	ret

00001f48 <_ZN6String7reserveEj>:
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	ec 01       	movw	r28, r24
    1f4e:	88 81       	ld	r24, Y
    1f50:	99 81       	ldd	r25, Y+1	; 0x01
    1f52:	89 2b       	or	r24, r25
    1f54:	29 f0       	breq	.+10     	; 0x1f60 <_ZN6String7reserveEj+0x18>
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	86 17       	cp	r24, r22
    1f5c:	97 07       	cpc	r25, r23
    1f5e:	60 f4       	brcc	.+24     	; 0x1f78 <_ZN6String7reserveEj+0x30>
    1f60:	ce 01       	movw	r24, r28
    1f62:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_ZN6String12changeBufferEj>
    1f66:	88 23       	and	r24, r24
    1f68:	41 f0       	breq	.+16     	; 0x1f7a <_ZN6String7reserveEj+0x32>
    1f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6e:	89 2b       	or	r24, r25
    1f70:	19 f4       	brne	.+6      	; 0x1f78 <_ZN6String7reserveEj+0x30>
    1f72:	e8 81       	ld	r30, Y
    1f74:	f9 81       	ldd	r31, Y+1	; 0x01
    1f76:	10 82       	st	Z, r1
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	08 95       	ret

00001f80 <_ZN6String4copyEPKcj>:
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	ec 01       	movw	r28, r24
    1f8e:	7b 01       	movw	r14, r22
    1f90:	8a 01       	movw	r16, r20
    1f92:	ba 01       	movw	r22, r20
    1f94:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN6String7reserveEj>
    1f98:	81 11       	cpse	r24, r1
    1f9a:	04 c0       	rjmp	.+8      	; 0x1fa4 <_ZN6String4copyEPKcj+0x24>
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN6String10invalidateEv>
    1fa2:	07 c0       	rjmp	.+14     	; 0x1fb2 <_ZN6String4copyEPKcj+0x32>
    1fa4:	1d 83       	std	Y+5, r17	; 0x05
    1fa6:	0c 83       	std	Y+4, r16	; 0x04
    1fa8:	b7 01       	movw	r22, r14
    1faa:	88 81       	ld	r24, Y
    1fac:	99 81       	ldd	r25, Y+1	; 0x01
    1fae:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <strcpy>
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	08 95       	ret

00001fc2 <_ZN6StringC1EPKc>:
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	11 82       	std	Z+1, r1	; 0x01
    1fc6:	10 82       	st	Z, r1
    1fc8:	13 82       	std	Z+3, r1	; 0x03
    1fca:	12 82       	std	Z+2, r1	; 0x02
    1fcc:	15 82       	std	Z+5, r1	; 0x05
    1fce:	14 82       	std	Z+4, r1	; 0x04
    1fd0:	61 15       	cp	r22, r1
    1fd2:	71 05       	cpc	r23, r1
    1fd4:	51 f0       	breq	.+20     	; 0x1fea <_ZN6StringC1EPKc+0x28>
    1fd6:	fb 01       	movw	r30, r22
    1fd8:	01 90       	ld	r0, Z+
    1fda:	00 20       	and	r0, r0
    1fdc:	e9 f7       	brne	.-6      	; 0x1fd8 <_ZN6StringC1EPKc+0x16>
    1fde:	31 97       	sbiw	r30, 0x01	; 1
    1fe0:	af 01       	movw	r20, r30
    1fe2:	46 1b       	sub	r20, r22
    1fe4:	57 0b       	sbc	r21, r23
    1fe6:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <_ZN6String4copyEPKcj>
    1fea:	08 95       	ret

00001fec <_ZN6StringaSEPKc>:
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	ec 01       	movw	r28, r24
    1ff2:	61 15       	cp	r22, r1
    1ff4:	71 05       	cpc	r23, r1
    1ff6:	59 f0       	breq	.+22     	; 0x200e <_ZN6StringaSEPKc+0x22>
    1ff8:	fb 01       	movw	r30, r22
    1ffa:	01 90       	ld	r0, Z+
    1ffc:	00 20       	and	r0, r0
    1ffe:	e9 f7       	brne	.-6      	; 0x1ffa <_ZN6StringaSEPKc+0xe>
    2000:	31 97       	sbiw	r30, 0x01	; 1
    2002:	af 01       	movw	r20, r30
    2004:	46 1b       	sub	r20, r22
    2006:	57 0b       	sbc	r21, r23
    2008:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN6String4copyEPKcj>
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <_ZN6StringaSEPKc+0x26>
    200e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN6String10invalidateEv>
    2012:	ce 01       	movw	r24, r28
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <_ZN6StringC1Eih>:
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	62 97       	sbiw	r28, 0x12	; 18
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	8c 01       	movw	r16, r24
    2034:	cb 01       	movw	r24, r22
    2036:	f8 01       	movw	r30, r16
    2038:	11 82       	std	Z+1, r1	; 0x01
    203a:	10 82       	st	Z, r1
    203c:	13 82       	std	Z+3, r1	; 0x03
    203e:	12 82       	std	Z+2, r1	; 0x02
    2040:	15 82       	std	Z+5, r1	; 0x05
    2042:	14 82       	std	Z+4, r1	; 0x04
    2044:	50 e0       	ldi	r21, 0x00	; 0
    2046:	be 01       	movw	r22, r28
    2048:	6f 5f       	subi	r22, 0xFF	; 255
    204a:	7f 4f       	sbci	r23, 0xFF	; 255
    204c:	0e 94 d3 35 	call	0x6ba6	; 0x6ba6 <itoa>
    2050:	be 01       	movw	r22, r28
    2052:	6f 5f       	subi	r22, 0xFF	; 255
    2054:	7f 4f       	sbci	r23, 0xFF	; 255
    2056:	c8 01       	movw	r24, r16
    2058:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN6StringaSEPKc>
    205c:	62 96       	adiw	r28, 0x12	; 18
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	08 95       	ret

00002072 <_ZN6String6concatEPKcj>:
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	61 15       	cp	r22, r1
    2080:	71 05       	cpc	r23, r1
    2082:	11 f4       	brne	.+4      	; 0x2088 <_ZN6String6concatEPKcj+0x16>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	1c c0       	rjmp	.+56     	; 0x20c0 <_ZN6String6concatEPKcj+0x4e>
    2088:	41 15       	cp	r20, r1
    208a:	51 05       	cpc	r21, r1
    208c:	c1 f0       	breq	.+48     	; 0x20be <_ZN6String6concatEPKcj+0x4c>
    208e:	7b 01       	movw	r14, r22
    2090:	ec 01       	movw	r28, r24
    2092:	8c 81       	ldd	r24, Y+4	; 0x04
    2094:	9d 81       	ldd	r25, Y+5	; 0x05
    2096:	8a 01       	movw	r16, r20
    2098:	08 0f       	add	r16, r24
    209a:	19 1f       	adc	r17, r25
    209c:	b8 01       	movw	r22, r16
    209e:	ce 01       	movw	r24, r28
    20a0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN6String7reserveEj>
    20a4:	88 23       	and	r24, r24
    20a6:	71 f3       	breq	.-36     	; 0x2084 <_ZN6String6concatEPKcj+0x12>
    20a8:	28 81       	ld	r18, Y
    20aa:	39 81       	ldd	r19, Y+1	; 0x01
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	9d 81       	ldd	r25, Y+5	; 0x05
    20b0:	b7 01       	movw	r22, r14
    20b2:	82 0f       	add	r24, r18
    20b4:	93 1f       	adc	r25, r19
    20b6:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <strcpy>
    20ba:	1d 83       	std	Y+5, r17	; 0x05
    20bc:	0c 83       	std	Y+4, r16	; 0x04
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	ff 90       	pop	r15
    20ca:	ef 90       	pop	r14
    20cc:	08 95       	ret

000020ce <_ZN6String6concatEPKc>:
    20ce:	61 15       	cp	r22, r1
    20d0:	71 05       	cpc	r23, r1
    20d2:	51 f0       	breq	.+20     	; 0x20e8 <_ZN6String6concatEPKc+0x1a>
    20d4:	fb 01       	movw	r30, r22
    20d6:	01 90       	ld	r0, Z+
    20d8:	00 20       	and	r0, r0
    20da:	e9 f7       	brne	.-6      	; 0x20d6 <_ZN6String6concatEPKc+0x8>
    20dc:	31 97       	sbiw	r30, 0x01	; 1
    20de:	af 01       	movw	r20, r30
    20e0:	46 1b       	sub	r20, r22
    20e2:	57 0b       	sbc	r21, r23
    20e4:	0c 94 39 10 	jmp	0x2072	; 0x2072 <_ZN6String6concatEPKcj>
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	08 95       	ret

000020ec <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    20ec:	ef 92       	push	r14
    20ee:	ff 92       	push	r15
    20f0:	0f 93       	push	r16
    20f2:	1f 93       	push	r17
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	2d 97       	sbiw	r28, 0x0d	; 13
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	7c 01       	movw	r14, r24
    210a:	cb 01       	movw	r24, r22
    210c:	ba 01       	movw	r22, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    210e:	2a e0       	ldi	r18, 0x0A	; 10
    2110:	8e 01       	movw	r16, r28
    2112:	0f 5f       	subi	r16, 0xFF	; 255
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	a8 01       	movw	r20, r16
    2118:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__ultoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned long)];
	ultoa(num, buf, 10);
	return concat(buf, strlen(buf));
    211c:	f8 01       	movw	r30, r16
    211e:	01 90       	ld	r0, Z+
    2120:	00 20       	and	r0, r0
    2122:	e9 f7       	brne	.-6      	; 0x211e <_ZN6String6concatEm+0x32>
    2124:	31 97       	sbiw	r30, 0x01	; 1
    2126:	af 01       	movw	r20, r30
    2128:	40 1b       	sub	r20, r16
    212a:	51 0b       	sbc	r21, r17
    212c:	b8 01       	movw	r22, r16
    212e:	c7 01       	movw	r24, r14
    2130:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6String6concatEPKcj>
}
    2134:	2d 96       	adiw	r28, 0x0d	; 13
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	ff 90       	pop	r15
    214a:	ef 90       	pop	r14
    214c:	08 95       	ret

0000214e <_ZN6String6concatEf>:

unsigned char String::concat(float num)
{
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	64 97       	sbiw	r28, 0x14	; 20
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	7c 01       	movw	r14, r24
    216c:	cb 01       	movw	r24, r22
    216e:	ba 01       	movw	r22, r20
	char buf[20];
	char* string = dtostrf(num, 4, 2, buf);
    2170:	8e 01       	movw	r16, r28
    2172:	0f 5f       	subi	r16, 0xFF	; 255
    2174:	1f 4f       	sbci	r17, 0xFF	; 255
    2176:	22 e0       	ldi	r18, 0x02	; 2
    2178:	44 e0       	ldi	r20, 0x04	; 4
    217a:	0e 94 61 33 	call	0x66c2	; 0x66c2 <dtostrf>
	return concat(string, strlen(string));
    217e:	fc 01       	movw	r30, r24
    2180:	01 90       	ld	r0, Z+
    2182:	00 20       	and	r0, r0
    2184:	e9 f7       	brne	.-6      	; 0x2180 <_ZN6String6concatEf+0x32>
    2186:	31 97       	sbiw	r30, 0x01	; 1
    2188:	af 01       	movw	r20, r30
    218a:	48 1b       	sub	r20, r24
    218c:	59 0b       	sbc	r21, r25
    218e:	bc 01       	movw	r22, r24
    2190:	c7 01       	movw	r24, r14
    2192:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN6String6concatEPKcj>
}
    2196:	64 96       	adiw	r28, 0x14	; 20
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	08 95       	ret

000021b0 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
    21b0:	20 91 f9 05 	lds	r18, 0x05F9	; 0x8005f9 <_ZN8SPIClass13interruptModeE>
    21b4:	22 23       	and	r18, r18
    21b6:	99 f0       	breq	.+38     	; 0x21de <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    21b8:	4f b7       	in	r20, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	20 91 f9 05 	lds	r18, 0x05F9	; 0x8005f9 <_ZN8SPIClass13interruptModeE>
    21c0:	21 30       	cpi	r18, 0x01	; 1
    21c2:	59 f4       	brne	.+22     	; 0x21da <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    21c4:	2d b3       	in	r18, 0x1d	; 29
    21c6:	20 93 f7 05 	sts	0x05F7, r18	; 0x8005f7 <_ZN8SPIClass13interruptSaveE>
    21ca:	3d b3       	in	r19, 0x1d	; 29
    21cc:	20 91 f8 05 	lds	r18, 0x05F8	; 0x8005f8 <_ZN8SPIClass13interruptMaskE>
    21d0:	20 95       	com	r18
    21d2:	23 23       	and	r18, r19
    21d4:	2d bb       	out	0x1d, r18	; 29
    21d6:	4f bf       	out	0x3f, r20	; 63
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    21da:	40 93 f7 05 	sts	0x05F7, r20	; 0x8005f7 <_ZN8SPIClass13interruptSaveE>
    21de:	8c bd       	out	0x2c, r24	; 44
    21e0:	9d bd       	out	0x2d, r25	; 45
    21e2:	08 95       	ret

000021e4 <_ZN8SPIClass14endTransactionEv>:
    21e4:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <_ZN8SPIClass13interruptModeE>
    21e8:	88 23       	and	r24, r24
    21ea:	61 f0       	breq	.+24     	; 0x2204 <_ZN8SPIClass14endTransactionEv+0x20>
    21ec:	9f b7       	in	r25, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	20 91 f9 05 	lds	r18, 0x05F9	; 0x8005f9 <_ZN8SPIClass13interruptModeE>
    21f4:	80 91 f7 05 	lds	r24, 0x05F7	; 0x8005f7 <_ZN8SPIClass13interruptSaveE>
    21f8:	21 30       	cpi	r18, 0x01	; 1
    21fa:	19 f4       	brne	.+6      	; 0x2202 <_ZN8SPIClass14endTransactionEv+0x1e>
    21fc:	8d bb       	out	0x1d, r24	; 29
    21fe:	9f bf       	out	0x3f, r25	; 63
    2200:	08 95       	ret
    2202:	8f bf       	out	0x3f, r24	; 63
    2204:	08 95       	ret

00002206 <_ZN15Adafruit_BME280C1Ev>:
    2206:	fc 01       	movw	r30, r24
    2208:	8f ef       	ldi	r24, 0xFF	; 255
    220a:	83 87       	std	Z+11, r24	; 0x0b
    220c:	84 87       	std	Z+12, r24	; 0x0c
    220e:	85 87       	std	Z+13, r24	; 0x0d
    2210:	86 87       	std	Z+14, r24	; 0x0e
    2212:	08 95       	ret

00002214 <_ZN15Adafruit_BME2807spixferEh>:
    2214:	cf 92       	push	r12
    2216:	df 92       	push	r13
    2218:	ef 92       	push	r14
    221a:	ff 92       	push	r15
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	fc 01       	movw	r30, r24
    2226:	26 85       	ldd	r18, Z+14	; 0x0e
    2228:	2f 3f       	cpi	r18, 0xFF	; 255
    222a:	39 f4       	brne	.+14     	; 0x223a <_ZN15Adafruit_BME2807spixferEh+0x26>
    222c:	6e bd       	out	0x2e, r22	; 46
    222e:	00 00       	nop
    2230:	0d b4       	in	r0, 0x2d	; 45
    2232:	07 fe       	sbrs	r0, 7
    2234:	fd cf       	rjmp	.-6      	; 0x2230 <_ZN15Adafruit_BME2807spixferEh+0x1c>
    2236:	8e b5       	in	r24, 0x2e	; 46
    2238:	2b c0       	rjmp	.+86     	; 0x2290 <_ZN15Adafruit_BME2807spixferEh+0x7c>
    223a:	d6 2f       	mov	r29, r22
    223c:	8c 01       	movw	r16, r24
    223e:	87 e0       	ldi	r24, 0x07	; 7
    2240:	e8 2e       	mov	r14, r24
    2242:	f1 2c       	mov	r15, r1
    2244:	c0 e0       	ldi	r28, 0x00	; 0
    2246:	cc 24       	eor	r12, r12
    2248:	c3 94       	inc	r12
    224a:	d1 2c       	mov	r13, r1
    224c:	cc 0f       	add	r28, r28
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	f8 01       	movw	r30, r16
    2252:	86 85       	ldd	r24, Z+14	; 0x0e
    2254:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    2258:	b6 01       	movw	r22, r12
    225a:	0e 2c       	mov	r0, r14
    225c:	01 c0       	rjmp	.+2      	; 0x2260 <_ZN15Adafruit_BME2807spixferEh+0x4c>
    225e:	66 0f       	add	r22, r22
    2260:	0a 94       	dec	r0
    2262:	ea f7       	brpl	.-6      	; 0x225e <_ZN15Adafruit_BME2807spixferEh+0x4a>
    2264:	6d 23       	and	r22, r29
    2266:	f8 01       	movw	r30, r16
    2268:	84 85       	ldd	r24, Z+12	; 0x0c
    226a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    226e:	61 e0       	ldi	r22, 0x01	; 1
    2270:	f8 01       	movw	r30, r16
    2272:	86 85       	ldd	r24, Z+14	; 0x0e
    2274:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    2278:	f8 01       	movw	r30, r16
    227a:	85 85       	ldd	r24, Z+13	; 0x0d
    227c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <digitalRead>
    2280:	89 2b       	or	r24, r25
    2282:	09 f0       	breq	.+2      	; 0x2286 <_ZN15Adafruit_BME2807spixferEh+0x72>
    2284:	c1 60       	ori	r28, 0x01	; 1
    2286:	f1 e0       	ldi	r31, 0x01	; 1
    2288:	ef 1a       	sub	r14, r31
    228a:	f1 08       	sbc	r15, r1
    228c:	f8 f6       	brcc	.-66     	; 0x224c <_ZN15Adafruit_BME2807spixferEh+0x38>
    228e:	8c 2f       	mov	r24, r28
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	ff 90       	pop	r15
    229a:	ef 90       	pop	r14
    229c:	df 90       	pop	r13
    229e:	cf 90       	pop	r12
    22a0:	08 95       	ret

000022a2 <_ZN15Adafruit_BME2806write8Ehh>:
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	ec 01       	movw	r28, r24
    22ac:	16 2f       	mov	r17, r22
    22ae:	04 2f       	mov	r16, r20
    22b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    22b2:	8f 3f       	cpi	r24, 0xFF	; 255
    22b4:	09 f5       	brne	.+66     	; 0x22f8 <_ZN15Adafruit_BME2806write8Ehh+0x56>
    22b6:	6a 81       	ldd	r22, Y+2	; 0x02
    22b8:	88 81       	ld	r24, Y
    22ba:	99 81       	ldd	r25, Y+1	; 0x01
    22bc:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire17beginTransmissionEh>
    22c0:	88 81       	ld	r24, Y
    22c2:	99 81       	ldd	r25, Y+1	; 0x01
    22c4:	dc 01       	movw	r26, r24
    22c6:	ed 91       	ld	r30, X+
    22c8:	fc 91       	ld	r31, X
    22ca:	01 90       	ld	r0, Z+
    22cc:	f0 81       	ld	r31, Z
    22ce:	e0 2d       	mov	r30, r0
    22d0:	61 2f       	mov	r22, r17
    22d2:	09 95       	icall
    22d4:	88 81       	ld	r24, Y
    22d6:	99 81       	ldd	r25, Y+1	; 0x01
    22d8:	dc 01       	movw	r26, r24
    22da:	ed 91       	ld	r30, X+
    22dc:	fc 91       	ld	r31, X
    22de:	01 90       	ld	r0, Z+
    22e0:	f0 81       	ld	r31, Z
    22e2:	e0 2d       	mov	r30, r0
    22e4:	60 2f       	mov	r22, r16
    22e6:	09 95       	icall
    22e8:	88 81       	ld	r24, Y
    22ea:	99 81       	ldd	r25, Y+1	; 0x01
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <_ZN7TwoWire15endTransmissionEv>
    22f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    22fa:	8f 3f       	cpi	r24, 0xFF	; 255
    22fc:	21 f4       	brne	.+8      	; 0x2306 <_ZN15Adafruit_BME2806write8Ehh+0x64>
    22fe:	82 e5       	ldi	r24, 0x52	; 82
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	8b 85       	ldd	r24, Y+11	; 0x0b
    230a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    230e:	61 2f       	mov	r22, r17
    2310:	6f 77       	andi	r22, 0x7F	; 127
    2312:	ce 01       	movw	r24, r28
    2314:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    2318:	60 2f       	mov	r22, r16
    231a:	ce 01       	movw	r24, r28
    231c:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	8b 85       	ldd	r24, Y+11	; 0x0b
    2324:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    2328:	8e 85       	ldd	r24, Y+14	; 0x0e
    232a:	8f 3f       	cpi	r24, 0xFF	; 255
    232c:	31 f4       	brne	.+12     	; 0x233a <_ZN15Adafruit_BME2806write8Ehh+0x98>
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <_ZN8SPIClass14endTransactionEv>
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	08 95       	ret

00002344 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
    2344:	cf 92       	push	r12
    2346:	ef 92       	push	r14
    2348:	0f 93       	push	r16
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	ec 01       	movw	r28, r24
    2350:	62 95       	swap	r22
    2352:	66 0f       	add	r22, r22
    2354:	66 0f       	add	r22, r22
    2356:	60 7c       	andi	r22, 0xC0	; 192
    2358:	47 70       	andi	r20, 0x07	; 7
    235a:	27 70       	andi	r18, 0x07	; 7
    235c:	82 2f       	mov	r24, r18
    235e:	88 0f       	add	r24, r24
    2360:	88 0f       	add	r24, r24
    2362:	88 0f       	add	r24, r24
    2364:	26 2f       	mov	r18, r22
    2366:	24 2b       	or	r18, r20
    2368:	28 2b       	or	r18, r24
    236a:	29 ab       	std	Y+49, r18	; 0x31
    236c:	90 2f       	mov	r25, r16
    236e:	92 95       	swap	r25
    2370:	99 0f       	add	r25, r25
    2372:	90 7e       	andi	r25, 0xE0	; 224
    2374:	8a a9       	ldd	r24, Y+50	; 0x32
    2376:	8f 71       	andi	r24, 0x1F	; 31
    2378:	89 2b       	or	r24, r25
    237a:	8a ab       	std	Y+50, r24	; 0x32
    237c:	8e 2d       	mov	r24, r14
    237e:	87 70       	andi	r24, 0x07	; 7
    2380:	88 0f       	add	r24, r24
    2382:	88 0f       	add	r24, r24
    2384:	88 0f       	add	r24, r24
    2386:	98 a9       	ldd	r25, Y+48	; 0x30
    2388:	29 2f       	mov	r18, r25
    238a:	20 7c       	andi	r18, 0xC0	; 192
    238c:	9c 2d       	mov	r25, r12
    238e:	97 70       	andi	r25, 0x07	; 7
    2390:	e2 2e       	mov	r14, r18
    2392:	e8 2a       	or	r14, r24
    2394:	e9 2a       	or	r14, r25
    2396:	e8 aa       	std	Y+48, r14	; 0x30
    2398:	40 2f       	mov	r20, r16
    239a:	47 70       	andi	r20, 0x07	; 7
    239c:	62 ef       	ldi	r22, 0xF2	; 242
    239e:	ce 01       	movw	r24, r28
    23a0:	0e 94 51 11 	call	0x22a2	; 0x22a2 <_ZN15Adafruit_BME2806write8Ehh>
    23a4:	98 a9       	ldd	r25, Y+48	; 0x30
    23a6:	49 2f       	mov	r20, r25
    23a8:	47 70       	andi	r20, 0x07	; 7
    23aa:	60 e2       	ldi	r22, 0x20	; 32
    23ac:	46 9f       	mul	r20, r22
    23ae:	90 01       	movw	r18, r0
    23b0:	11 24       	eor	r1, r1
    23b2:	89 2f       	mov	r24, r25
    23b4:	86 95       	lsr	r24
    23b6:	86 95       	lsr	r24
    23b8:	86 95       	lsr	r24
    23ba:	87 70       	andi	r24, 0x07	; 7
    23bc:	64 e0       	ldi	r22, 0x04	; 4
    23be:	86 9f       	mul	r24, r22
    23c0:	a0 01       	movw	r20, r0
    23c2:	11 24       	eor	r1, r1
    23c4:	42 2b       	or	r20, r18
    23c6:	53 2b       	or	r21, r19
    23c8:	97 fb       	bst	r25, 7
    23ca:	99 27       	eor	r25, r25
    23cc:	90 f9       	bld	r25, 0
    23ce:	49 2b       	or	r20, r25
    23d0:	65 ef       	ldi	r22, 0xF5	; 245
    23d2:	ce 01       	movw	r24, r28
    23d4:	0e 94 51 11 	call	0x22a2	; 0x22a2 <_ZN15Adafruit_BME2806write8Ehh>
    23d8:	99 a9       	ldd	r25, Y+49	; 0x31
    23da:	49 2f       	mov	r20, r25
    23dc:	47 70       	andi	r20, 0x07	; 7
    23de:	80 e2       	ldi	r24, 0x20	; 32
    23e0:	48 9f       	mul	r20, r24
    23e2:	90 01       	movw	r18, r0
    23e4:	11 24       	eor	r1, r1
    23e6:	89 2f       	mov	r24, r25
    23e8:	86 95       	lsr	r24
    23ea:	86 95       	lsr	r24
    23ec:	86 95       	lsr	r24
    23ee:	87 70       	andi	r24, 0x07	; 7
    23f0:	64 e0       	ldi	r22, 0x04	; 4
    23f2:	86 9f       	mul	r24, r22
    23f4:	a0 01       	movw	r20, r0
    23f6:	11 24       	eor	r1, r1
    23f8:	42 2b       	or	r20, r18
    23fa:	53 2b       	or	r21, r19
    23fc:	92 95       	swap	r25
    23fe:	96 95       	lsr	r25
    2400:	96 95       	lsr	r25
    2402:	93 70       	andi	r25, 0x03	; 3
    2404:	49 2b       	or	r20, r25
    2406:	64 ef       	ldi	r22, 0xF4	; 244
    2408:	ce 01       	movw	r24, r28
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	0f 91       	pop	r16
    2410:	ef 90       	pop	r14
    2412:	cf 90       	pop	r12
    2414:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <_ZN15Adafruit_BME2806write8Ehh>

00002418 <_ZN15Adafruit_BME2805read8Eh>:
    2418:	1f 93       	push	r17
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	ec 01       	movw	r28, r24
    2420:	16 2f       	mov	r17, r22
    2422:	8b 85       	ldd	r24, Y+11	; 0x0b
    2424:	8f 3f       	cpi	r24, 0xFF	; 255
    2426:	21 f5       	brne	.+72     	; 0x2470 <_ZN15Adafruit_BME2805read8Eh+0x58>
    2428:	6a 81       	ldd	r22, Y+2	; 0x02
    242a:	88 81       	ld	r24, Y
    242c:	99 81       	ldd	r25, Y+1	; 0x01
    242e:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire17beginTransmissionEh>
    2432:	88 81       	ld	r24, Y
    2434:	99 81       	ldd	r25, Y+1	; 0x01
    2436:	dc 01       	movw	r26, r24
    2438:	ed 91       	ld	r30, X+
    243a:	fc 91       	ld	r31, X
    243c:	01 90       	ld	r0, Z+
    243e:	f0 81       	ld	r31, Z
    2440:	e0 2d       	mov	r30, r0
    2442:	61 2f       	mov	r22, r17
    2444:	09 95       	icall
    2446:	88 81       	ld	r24, Y
    2448:	99 81       	ldd	r25, Y+1	; 0x01
    244a:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <_ZN7TwoWire15endTransmissionEv>
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	6a 81       	ldd	r22, Y+2	; 0x02
    2452:	88 81       	ld	r24, Y
    2454:	99 81       	ldd	r25, Y+1	; 0x01
    2456:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <_ZN7TwoWire11requestFromEhh>
    245a:	88 81       	ld	r24, Y
    245c:	99 81       	ldd	r25, Y+1	; 0x01
    245e:	dc 01       	movw	r26, r24
    2460:	ed 91       	ld	r30, X+
    2462:	fc 91       	ld	r31, X
    2464:	02 84       	ldd	r0, Z+10	; 0x0a
    2466:	f3 85       	ldd	r31, Z+11	; 0x0b
    2468:	e0 2d       	mov	r30, r0
    246a:	09 95       	icall
    246c:	18 2f       	mov	r17, r24
    246e:	1e c0       	rjmp	.+60     	; 0x24ac <_ZN15Adafruit_BME2805read8Eh+0x94>
    2470:	8e 85       	ldd	r24, Y+14	; 0x0e
    2472:	8f 3f       	cpi	r24, 0xFF	; 255
    2474:	21 f4       	brne	.+8      	; 0x247e <_ZN15Adafruit_BME2805read8Eh+0x66>
    2476:	82 e5       	ldi	r24, 0x52	; 82
    2478:	91 e0       	ldi	r25, 0x01	; 1
    247a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	8b 85       	ldd	r24, Y+11	; 0x0b
    2482:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    2486:	61 2f       	mov	r22, r17
    2488:	60 68       	ori	r22, 0x80	; 128
    248a:	ce 01       	movw	r24, r28
    248c:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	ce 01       	movw	r24, r28
    2494:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    2498:	18 2f       	mov	r17, r24
    249a:	61 e0       	ldi	r22, 0x01	; 1
    249c:	8b 85       	ldd	r24, Y+11	; 0x0b
    249e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    24a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    24a4:	8f 3f       	cpi	r24, 0xFF	; 255
    24a6:	11 f4       	brne	.+4      	; 0x24ac <_ZN15Adafruit_BME2805read8Eh+0x94>
    24a8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN8SPIClass14endTransactionEv>
    24ac:	81 2f       	mov	r24, r17
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	08 95       	ret

000024b6 <_ZN15Adafruit_BME2806read16Eh>:
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	ec 01       	movw	r28, r24
    24c0:	16 2f       	mov	r17, r22
    24c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24c4:	8f 3f       	cpi	r24, 0xFF	; 255
    24c6:	99 f5       	brne	.+102    	; 0x252e <_ZN15Adafruit_BME2806read16Eh+0x78>
    24c8:	6a 81       	ldd	r22, Y+2	; 0x02
    24ca:	88 81       	ld	r24, Y
    24cc:	99 81       	ldd	r25, Y+1	; 0x01
    24ce:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire17beginTransmissionEh>
    24d2:	88 81       	ld	r24, Y
    24d4:	99 81       	ldd	r25, Y+1	; 0x01
    24d6:	dc 01       	movw	r26, r24
    24d8:	ed 91       	ld	r30, X+
    24da:	fc 91       	ld	r31, X
    24dc:	01 90       	ld	r0, Z+
    24de:	f0 81       	ld	r31, Z
    24e0:	e0 2d       	mov	r30, r0
    24e2:	61 2f       	mov	r22, r17
    24e4:	09 95       	icall
    24e6:	88 81       	ld	r24, Y
    24e8:	99 81       	ldd	r25, Y+1	; 0x01
    24ea:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <_ZN7TwoWire15endTransmissionEv>
    24ee:	42 e0       	ldi	r20, 0x02	; 2
    24f0:	6a 81       	ldd	r22, Y+2	; 0x02
    24f2:	88 81       	ld	r24, Y
    24f4:	99 81       	ldd	r25, Y+1	; 0x01
    24f6:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <_ZN7TwoWire11requestFromEhh>
    24fa:	88 81       	ld	r24, Y
    24fc:	99 81       	ldd	r25, Y+1	; 0x01
    24fe:	dc 01       	movw	r26, r24
    2500:	ed 91       	ld	r30, X+
    2502:	fc 91       	ld	r31, X
    2504:	02 84       	ldd	r0, Z+10	; 0x0a
    2506:	f3 85       	ldd	r31, Z+11	; 0x0b
    2508:	e0 2d       	mov	r30, r0
    250a:	09 95       	icall
    250c:	18 2f       	mov	r17, r24
    250e:	88 81       	ld	r24, Y
    2510:	99 81       	ldd	r25, Y+1	; 0x01
    2512:	dc 01       	movw	r26, r24
    2514:	ed 91       	ld	r30, X+
    2516:	fc 91       	ld	r31, X
    2518:	02 84       	ldd	r0, Z+10	; 0x0a
    251a:	f3 85       	ldd	r31, Z+11	; 0x0b
    251c:	e0 2d       	mov	r30, r0
    251e:	09 95       	icall
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	31 2f       	mov	r19, r17
    2526:	89 01       	movw	r16, r18
    2528:	08 2b       	or	r16, r24
    252a:	19 2b       	or	r17, r25
    252c:	28 c0       	rjmp	.+80     	; 0x257e <_ZN15Adafruit_BME2806read16Eh+0xc8>
    252e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2530:	8f 3f       	cpi	r24, 0xFF	; 255
    2532:	21 f4       	brne	.+8      	; 0x253c <_ZN15Adafruit_BME2806read16Eh+0x86>
    2534:	82 e5       	ldi	r24, 0x52	; 82
    2536:	91 e0       	ldi	r25, 0x01	; 1
    2538:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2540:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    2544:	61 2f       	mov	r22, r17
    2546:	60 68       	ori	r22, 0x80	; 128
    2548:	ce 01       	movw	r24, r28
    254a:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	ce 01       	movw	r24, r28
    2552:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    2556:	08 2f       	mov	r16, r24
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	ce 01       	movw	r24, r28
    255c:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    2560:	20 2f       	mov	r18, r16
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	32 2f       	mov	r19, r18
    2566:	22 27       	eor	r18, r18
    2568:	89 01       	movw	r16, r18
    256a:	08 2b       	or	r16, r24
    256c:	61 e0       	ldi	r22, 0x01	; 1
    256e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2570:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    2574:	8e 85       	ldd	r24, Y+14	; 0x0e
    2576:	8f 3f       	cpi	r24, 0xFF	; 255
    2578:	11 f4       	brne	.+4      	; 0x257e <_ZN15Adafruit_BME2806read16Eh+0xc8>
    257a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN8SPIClass14endTransactionEv>
    257e:	c8 01       	movw	r24, r16
    2580:	df 91       	pop	r29
    2582:	cf 91       	pop	r28
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	08 95       	ret

0000258a <_ZN15Adafruit_BME2809read16_LEEh>:
    258a:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <_ZN15Adafruit_BME2806read16Eh>
    258e:	98 27       	eor	r25, r24
    2590:	89 27       	eor	r24, r25
    2592:	98 27       	eor	r25, r24
    2594:	08 95       	ret

00002596 <_ZN15Adafruit_BME2806read24Eh>:
    2596:	4f 92       	push	r4
    2598:	5f 92       	push	r5
    259a:	6f 92       	push	r6
    259c:	7f 92       	push	r7
    259e:	8f 92       	push	r8
    25a0:	9f 92       	push	r9
    25a2:	af 92       	push	r10
    25a4:	bf 92       	push	r11
    25a6:	cf 92       	push	r12
    25a8:	df 92       	push	r13
    25aa:	ef 92       	push	r14
    25ac:	ff 92       	push	r15
    25ae:	1f 93       	push	r17
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
    25b4:	ec 01       	movw	r28, r24
    25b6:	16 2f       	mov	r17, r22
    25b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    25ba:	8f 3f       	cpi	r24, 0xFF	; 255
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <_ZN15Adafruit_BME2806read24Eh+0x2a>
    25be:	51 c0       	rjmp	.+162    	; 0x2662 <_ZN15Adafruit_BME2806read24Eh+0xcc>
    25c0:	6a 81       	ldd	r22, Y+2	; 0x02
    25c2:	88 81       	ld	r24, Y
    25c4:	99 81       	ldd	r25, Y+1	; 0x01
    25c6:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire17beginTransmissionEh>
    25ca:	88 81       	ld	r24, Y
    25cc:	99 81       	ldd	r25, Y+1	; 0x01
    25ce:	dc 01       	movw	r26, r24
    25d0:	ed 91       	ld	r30, X+
    25d2:	fc 91       	ld	r31, X
    25d4:	01 90       	ld	r0, Z+
    25d6:	f0 81       	ld	r31, Z
    25d8:	e0 2d       	mov	r30, r0
    25da:	61 2f       	mov	r22, r17
    25dc:	09 95       	icall
    25de:	88 81       	ld	r24, Y
    25e0:	99 81       	ldd	r25, Y+1	; 0x01
    25e2:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <_ZN7TwoWire15endTransmissionEv>
    25e6:	43 e0       	ldi	r20, 0x03	; 3
    25e8:	6a 81       	ldd	r22, Y+2	; 0x02
    25ea:	88 81       	ld	r24, Y
    25ec:	99 81       	ldd	r25, Y+1	; 0x01
    25ee:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <_ZN7TwoWire11requestFromEhh>
    25f2:	88 81       	ld	r24, Y
    25f4:	99 81       	ldd	r25, Y+1	; 0x01
    25f6:	dc 01       	movw	r26, r24
    25f8:	ed 91       	ld	r30, X+
    25fa:	fc 91       	ld	r31, X
    25fc:	02 84       	ldd	r0, Z+10	; 0x0a
    25fe:	f3 85       	ldd	r31, Z+11	; 0x0b
    2600:	e0 2d       	mov	r30, r0
    2602:	09 95       	icall
    2604:	2c 01       	movw	r4, r24
    2606:	99 0f       	add	r25, r25
    2608:	66 08       	sbc	r6, r6
    260a:	77 08       	sbc	r7, r7
    260c:	76 2c       	mov	r7, r6
    260e:	65 2c       	mov	r6, r5
    2610:	54 2c       	mov	r5, r4
    2612:	44 24       	eor	r4, r4
    2614:	88 81       	ld	r24, Y
    2616:	99 81       	ldd	r25, Y+1	; 0x01
    2618:	dc 01       	movw	r26, r24
    261a:	ed 91       	ld	r30, X+
    261c:	fc 91       	ld	r31, X
    261e:	02 84       	ldd	r0, Z+10	; 0x0a
    2620:	f3 85       	ldd	r31, Z+11	; 0x0b
    2622:	e0 2d       	mov	r30, r0
    2624:	09 95       	icall
    2626:	6c 01       	movw	r12, r24
    2628:	99 0f       	add	r25, r25
    262a:	ee 08       	sbc	r14, r14
    262c:	ff 08       	sbc	r15, r15
    262e:	c4 28       	or	r12, r4
    2630:	d5 28       	or	r13, r5
    2632:	e6 28       	or	r14, r6
    2634:	f7 28       	or	r15, r7
    2636:	88 24       	eor	r8, r8
    2638:	9c 2c       	mov	r9, r12
    263a:	ad 2c       	mov	r10, r13
    263c:	be 2c       	mov	r11, r14
    263e:	88 81       	ld	r24, Y
    2640:	99 81       	ldd	r25, Y+1	; 0x01
    2642:	dc 01       	movw	r26, r24
    2644:	ed 91       	ld	r30, X+
    2646:	fc 91       	ld	r31, X
    2648:	02 84       	ldd	r0, Z+10	; 0x0a
    264a:	f3 85       	ldd	r31, Z+11	; 0x0b
    264c:	e0 2d       	mov	r30, r0
    264e:	09 95       	icall
    2650:	6c 01       	movw	r12, r24
    2652:	99 0f       	add	r25, r25
    2654:	ee 08       	sbc	r14, r14
    2656:	ff 08       	sbc	r15, r15
    2658:	c8 28       	or	r12, r8
    265a:	d9 28       	or	r13, r9
    265c:	ea 28       	or	r14, r10
    265e:	fb 28       	or	r15, r11
    2660:	33 c0       	rjmp	.+102    	; 0x26c8 <_ZN15Adafruit_BME2806read24Eh+0x132>
    2662:	8e 85       	ldd	r24, Y+14	; 0x0e
    2664:	8f 3f       	cpi	r24, 0xFF	; 255
    2666:	21 f4       	brne	.+8      	; 0x2670 <_ZN15Adafruit_BME2806read24Eh+0xda>
    2668:	82 e5       	ldi	r24, 0x52	; 82
    266a:	91 e0       	ldi	r25, 0x01	; 1
    266c:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	8b 85       	ldd	r24, Y+11	; 0x0b
    2674:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    2678:	61 2f       	mov	r22, r17
    267a:	60 68       	ori	r22, 0x80	; 128
    267c:	ce 01       	movw	r24, r28
    267e:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	ce 01       	movw	r24, r28
    2686:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    268a:	c8 2e       	mov	r12, r24
    268c:	d1 2c       	mov	r13, r1
    268e:	e1 2c       	mov	r14, r1
    2690:	f1 2c       	mov	r15, r1
    2692:	fe 2c       	mov	r15, r14
    2694:	ed 2c       	mov	r14, r13
    2696:	dc 2c       	mov	r13, r12
    2698:	cc 24       	eor	r12, r12
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	ce 01       	movw	r24, r28
    269e:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    26a2:	c8 2a       	or	r12, r24
    26a4:	fe 2c       	mov	r15, r14
    26a6:	ed 2c       	mov	r14, r13
    26a8:	dc 2c       	mov	r13, r12
    26aa:	cc 24       	eor	r12, r12
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	ce 01       	movw	r24, r28
    26b0:	0e 94 0a 11 	call	0x2214	; 0x2214 <_ZN15Adafruit_BME2807spixferEh>
    26b4:	c8 2a       	or	r12, r24
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    26ba:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    26be:	8e 85       	ldd	r24, Y+14	; 0x0e
    26c0:	8f 3f       	cpi	r24, 0xFF	; 255
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <_ZN15Adafruit_BME2806read24Eh+0x132>
    26c4:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN8SPIClass14endTransactionEv>
    26c8:	c7 01       	movw	r24, r14
    26ca:	b6 01       	movw	r22, r12
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	ff 90       	pop	r15
    26d4:	ef 90       	pop	r14
    26d6:	df 90       	pop	r13
    26d8:	cf 90       	pop	r12
    26da:	bf 90       	pop	r11
    26dc:	af 90       	pop	r10
    26de:	9f 90       	pop	r9
    26e0:	8f 90       	pop	r8
    26e2:	7f 90       	pop	r7
    26e4:	6f 90       	pop	r6
    26e6:	5f 90       	pop	r5
    26e8:	4f 90       	pop	r4
    26ea:	08 95       	ret

000026ec <_ZN15Adafruit_BME28016readCoefficientsEv>:
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	ec 01       	movw	r28, r24
    26f4:	68 e8       	ldi	r22, 0x88	; 136
    26f6:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    26fa:	98 8b       	std	Y+16, r25	; 0x10
    26fc:	8f 87       	std	Y+15, r24	; 0x0f
    26fe:	6a e8       	ldi	r22, 0x8A	; 138
    2700:	ce 01       	movw	r24, r28
    2702:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    2706:	9a 8b       	std	Y+18, r25	; 0x12
    2708:	89 8b       	std	Y+17, r24	; 0x11
    270a:	6c e8       	ldi	r22, 0x8C	; 140
    270c:	ce 01       	movw	r24, r28
    270e:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    2712:	9c 8b       	std	Y+20, r25	; 0x14
    2714:	8b 8b       	std	Y+19, r24	; 0x13
    2716:	6e e8       	ldi	r22, 0x8E	; 142
    2718:	ce 01       	movw	r24, r28
    271a:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    271e:	9e 8b       	std	Y+22, r25	; 0x16
    2720:	8d 8b       	std	Y+21, r24	; 0x15
    2722:	60 e9       	ldi	r22, 0x90	; 144
    2724:	ce 01       	movw	r24, r28
    2726:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    272a:	98 8f       	std	Y+24, r25	; 0x18
    272c:	8f 8b       	std	Y+23, r24	; 0x17
    272e:	62 e9       	ldi	r22, 0x92	; 146
    2730:	ce 01       	movw	r24, r28
    2732:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    2736:	9a 8f       	std	Y+26, r25	; 0x1a
    2738:	89 8f       	std	Y+25, r24	; 0x19
    273a:	64 e9       	ldi	r22, 0x94	; 148
    273c:	ce 01       	movw	r24, r28
    273e:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    2742:	9c 8f       	std	Y+28, r25	; 0x1c
    2744:	8b 8f       	std	Y+27, r24	; 0x1b
    2746:	66 e9       	ldi	r22, 0x96	; 150
    2748:	ce 01       	movw	r24, r28
    274a:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    274e:	9e 8f       	std	Y+30, r25	; 0x1e
    2750:	8d 8f       	std	Y+29, r24	; 0x1d
    2752:	68 e9       	ldi	r22, 0x98	; 152
    2754:	ce 01       	movw	r24, r28
    2756:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    275a:	98 a3       	std	Y+32, r25	; 0x20
    275c:	8f 8f       	std	Y+31, r24	; 0x1f
    275e:	6a e9       	ldi	r22, 0x9A	; 154
    2760:	ce 01       	movw	r24, r28
    2762:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    2766:	9a a3       	std	Y+34, r25	; 0x22
    2768:	89 a3       	std	Y+33, r24	; 0x21
    276a:	6c e9       	ldi	r22, 0x9C	; 156
    276c:	ce 01       	movw	r24, r28
    276e:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    2772:	9c a3       	std	Y+36, r25	; 0x24
    2774:	8b a3       	std	Y+35, r24	; 0x23
    2776:	6e e9       	ldi	r22, 0x9E	; 158
    2778:	ce 01       	movw	r24, r28
    277a:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    277e:	9e a3       	std	Y+38, r25	; 0x26
    2780:	8d a3       	std	Y+37, r24	; 0x25
    2782:	61 ea       	ldi	r22, 0xA1	; 161
    2784:	ce 01       	movw	r24, r28
    2786:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15Adafruit_BME2805read8Eh>
    278a:	8f a3       	std	Y+39, r24	; 0x27
    278c:	61 ee       	ldi	r22, 0xE1	; 225
    278e:	ce 01       	movw	r24, r28
    2790:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN15Adafruit_BME2809read16_LEEh>
    2794:	99 a7       	std	Y+41, r25	; 0x29
    2796:	88 a7       	std	Y+40, r24	; 0x28
    2798:	63 ee       	ldi	r22, 0xE3	; 227
    279a:	ce 01       	movw	r24, r28
    279c:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15Adafruit_BME2805read8Eh>
    27a0:	8a a7       	std	Y+42, r24	; 0x2a
    27a2:	64 ee       	ldi	r22, 0xE4	; 228
    27a4:	ce 01       	movw	r24, r28
    27a6:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15Adafruit_BME2805read8Eh>
    27aa:	18 2f       	mov	r17, r24
    27ac:	65 ee       	ldi	r22, 0xE5	; 229
    27ae:	ce 01       	movw	r24, r28
    27b0:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15Adafruit_BME2805read8Eh>
    27b4:	90 e1       	ldi	r25, 0x10	; 16
    27b6:	19 9f       	mul	r17, r25
    27b8:	90 01       	movw	r18, r0
    27ba:	11 24       	eor	r1, r1
    27bc:	8f 70       	andi	r24, 0x0F	; 15
    27be:	28 2b       	or	r18, r24
    27c0:	3c a7       	std	Y+44, r19	; 0x2c
    27c2:	2b a7       	std	Y+43, r18	; 0x2b
    27c4:	66 ee       	ldi	r22, 0xE6	; 230
    27c6:	ce 01       	movw	r24, r28
    27c8:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15Adafruit_BME2805read8Eh>
    27cc:	18 2f       	mov	r17, r24
    27ce:	65 ee       	ldi	r22, 0xE5	; 229
    27d0:	ce 01       	movw	r24, r28
    27d2:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15Adafruit_BME2805read8Eh>
    27d6:	90 e1       	ldi	r25, 0x10	; 16
    27d8:	19 9f       	mul	r17, r25
    27da:	90 01       	movw	r18, r0
    27dc:	11 24       	eor	r1, r1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	44 e0       	ldi	r20, 0x04	; 4
    27e2:	95 95       	asr	r25
    27e4:	87 95       	ror	r24
    27e6:	4a 95       	dec	r20
    27e8:	e1 f7       	brne	.-8      	; 0x27e2 <_ZN15Adafruit_BME28016readCoefficientsEv+0xf6>
    27ea:	82 2b       	or	r24, r18
    27ec:	93 2b       	or	r25, r19
    27ee:	9e a7       	std	Y+46, r25	; 0x2e
    27f0:	8d a7       	std	Y+45, r24	; 0x2d
    27f2:	67 ee       	ldi	r22, 0xE7	; 231
    27f4:	ce 01       	movw	r24, r28
    27f6:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15Adafruit_BME2805read8Eh>
    27fa:	8f a7       	std	Y+47, r24	; 0x2f
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	1f 91       	pop	r17
    2802:	08 95       	ret

00002804 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    2804:	63 ef       	ldi	r22, 0xF3	; 243
    2806:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15Adafruit_BME2805read8Eh>
    280a:	81 70       	andi	r24, 0x01	; 1
    280c:	08 95       	ret

0000280e <_ZN15Adafruit_BME2804initEv>:
    280e:	cf 92       	push	r12
    2810:	ef 92       	push	r14
    2812:	0f 93       	push	r16
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	ec 01       	movw	r28, r24
    281a:	8b 85       	ldd	r24, Y+11	; 0x0b
    281c:	8f 3f       	cpi	r24, 0xFF	; 255
    281e:	29 f4       	brne	.+10     	; 0x282a <_ZN15Adafruit_BME2804initEv+0x1c>
    2820:	88 81       	ld	r24, Y
    2822:	99 81       	ldd	r25, Y+1	; 0x01
    2824:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <_ZN7TwoWire5beginEv>
    2828:	18 c0       	rjmp	.+48     	; 0x285a <_ZN15Adafruit_BME2804initEv+0x4c>
    282a:	61 e0       	ldi	r22, 0x01	; 1
    282c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    2830:	61 e0       	ldi	r22, 0x01	; 1
    2832:	8b 85       	ldd	r24, Y+11	; 0x0b
    2834:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>
    2838:	8e 85       	ldd	r24, Y+14	; 0x0e
    283a:	8f 3f       	cpi	r24, 0xFF	; 255
    283c:	19 f4       	brne	.+6      	; 0x2844 <_ZN15Adafruit_BME2804initEv+0x36>
    283e:	0e 94 ba 21 	call	0x4374	; 0x4374 <_ZN8SPIClass5beginEv>
    2842:	0b c0       	rjmp	.+22     	; 0x285a <_ZN15Adafruit_BME2804initEv+0x4c>
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>
    284a:	61 e0       	ldi	r22, 0x01	; 1
    284c:	8c 85       	ldd	r24, Y+12	; 0x0c
    284e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	8d 85       	ldd	r24, Y+13	; 0x0d
    2856:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>
    285a:	60 ed       	ldi	r22, 0xD0	; 208
    285c:	ce 01       	movw	r24, r28
    285e:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15Adafruit_BME2805read8Eh>
    2862:	80 36       	cpi	r24, 0x60	; 96
    2864:	49 f5       	brne	.+82     	; 0x28b8 <_ZN15Adafruit_BME2804initEv+0xaa>
    2866:	46 eb       	ldi	r20, 0xB6	; 182
    2868:	60 ee       	ldi	r22, 0xE0	; 224
    286a:	ce 01       	movw	r24, r28
    286c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <_ZN15Adafruit_BME2806write8Ehh>
    2870:	6c e2       	ldi	r22, 0x2C	; 44
    2872:	71 e0       	ldi	r23, 0x01	; 1
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    287c:	ce 01       	movw	r24, r28
    287e:	0e 94 02 14 	call	0x2804	; 0x2804 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
    2882:	88 23       	and	r24, r24
    2884:	29 f0       	breq	.+10     	; 0x2890 <_ZN15Adafruit_BME2804initEv+0x82>
    2886:	64 e6       	ldi	r22, 0x64	; 100
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	f4 cf       	rjmp	.-24     	; 0x2878 <_ZN15Adafruit_BME2804initEv+0x6a>
    2890:	ce 01       	movw	r24, r28
    2892:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN15Adafruit_BME28016readCoefficientsEv>
    2896:	c1 2c       	mov	r12, r1
    2898:	e1 2c       	mov	r14, r1
    289a:	05 e0       	ldi	r16, 0x05	; 5
    289c:	25 e0       	ldi	r18, 0x05	; 5
    289e:	45 e0       	ldi	r20, 0x05	; 5
    28a0:	63 e0       	ldi	r22, 0x03	; 3
    28a2:	ce 01       	movw	r24, r28
    28a4:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    28a8:	64 e6       	ldi	r22, 0x64	; 100
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	01 c0       	rjmp	.+2      	; 0x28ba <_ZN15Adafruit_BME2804initEv+0xac>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	0f 91       	pop	r16
    28c0:	ef 90       	pop	r14
    28c2:	cf 90       	pop	r12
    28c4:	08 95       	ret

000028c6 <_ZN15Adafruit_BME2805beginEv>:
    28c6:	27 e7       	ldi	r18, 0x77	; 119
    28c8:	fc 01       	movw	r30, r24
    28ca:	22 83       	std	Z+2, r18	; 0x02
    28cc:	29 e0       	ldi	r18, 0x09	; 9
    28ce:	36 e0       	ldi	r19, 0x06	; 6
    28d0:	31 83       	std	Z+1, r19	; 0x01
    28d2:	20 83       	st	Z, r18
    28d4:	0c 94 07 14 	jmp	0x280e	; 0x280e <_ZN15Adafruit_BME2804initEv>

000028d8 <_ZN15Adafruit_BME28015readTemperatureEv>:
    28d8:	8f 92       	push	r8
    28da:	9f 92       	push	r9
    28dc:	af 92       	push	r10
    28de:	bf 92       	push	r11
    28e0:	cf 92       	push	r12
    28e2:	df 92       	push	r13
    28e4:	ef 92       	push	r14
    28e6:	ff 92       	push	r15
    28e8:	0f 93       	push	r16
    28ea:	1f 93       	push	r17
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	ec 01       	movw	r28, r24
    28f2:	6a ef       	ldi	r22, 0xFA	; 250
    28f4:	0e 94 cb 12 	call	0x2596	; 0x2596 <_ZN15Adafruit_BME2806read24Eh>
    28f8:	61 15       	cp	r22, r1
    28fa:	71 05       	cpc	r23, r1
    28fc:	20 e8       	ldi	r18, 0x80	; 128
    28fe:	82 07       	cpc	r24, r18
    2900:	91 05       	cpc	r25, r1
    2902:	09 f4       	brne	.+2      	; 0x2906 <_ZN15Adafruit_BME28015readTemperatureEv+0x2e>
    2904:	6f c0       	rjmp	.+222    	; 0x29e4 <_ZN15Adafruit_BME28015readTemperatureEv+0x10c>
    2906:	0f 85       	ldd	r16, Y+15	; 0x0f
    2908:	18 89       	ldd	r17, Y+16	; 0x10
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	c7 2e       	mov	r12, r23
    2910:	d8 2e       	mov	r13, r24
    2912:	e9 2e       	mov	r14, r25
    2914:	ff 24       	eor	r15, r15
    2916:	e7 fc       	sbrc	r14, 7
    2918:	fa 94       	dec	r15
    291a:	c0 1a       	sub	r12, r16
    291c:	d1 0a       	sbc	r13, r17
    291e:	e2 0a       	sbc	r14, r18
    2920:	f3 0a       	sbc	r15, r19
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	57 e0       	ldi	r21, 0x07	; 7
    2928:	b5 95       	asr	r27
    292a:	a7 95       	ror	r26
    292c:	97 95       	ror	r25
    292e:	87 95       	ror	r24
    2930:	5a 95       	dec	r21
    2932:	d1 f7       	brne	.-12     	; 0x2928 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
    2934:	00 0f       	add	r16, r16
    2936:	11 1f       	adc	r17, r17
    2938:	22 1f       	adc	r18, r18
    293a:	33 1f       	adc	r19, r19
    293c:	4c 01       	movw	r8, r24
    293e:	5d 01       	movw	r10, r26
    2940:	80 1a       	sub	r8, r16
    2942:	91 0a       	sbc	r9, r17
    2944:	a2 0a       	sbc	r10, r18
    2946:	b3 0a       	sbc	r11, r19
    2948:	a5 01       	movw	r20, r10
    294a:	94 01       	movw	r18, r8
    294c:	a9 89       	ldd	r26, Y+17	; 0x11
    294e:	ba 89       	ldd	r27, Y+18	; 0x12
    2950:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__mulshisi3>
    2954:	4b 01       	movw	r8, r22
    2956:	5c 01       	movw	r10, r24
    2958:	7b e0       	ldi	r23, 0x0B	; 11
    295a:	b5 94       	asr	r11
    295c:	a7 94       	ror	r10
    295e:	97 94       	ror	r9
    2960:	87 94       	ror	r8
    2962:	7a 95       	dec	r23
    2964:	d1 f7       	brne	.-12     	; 0x295a <_ZN15Adafruit_BME28015readTemperatureEv+0x82>
    2966:	a7 01       	movw	r20, r14
    2968:	96 01       	movw	r18, r12
    296a:	c7 01       	movw	r24, r14
    296c:	b6 01       	movw	r22, r12
    296e:	0e 94 82 32 	call	0x6504	; 0x6504 <__mulsi3>
    2972:	9b 01       	movw	r18, r22
    2974:	ac 01       	movw	r20, r24
    2976:	ec e0       	ldi	r30, 0x0C	; 12
    2978:	55 95       	asr	r21
    297a:	47 95       	ror	r20
    297c:	37 95       	ror	r19
    297e:	27 95       	ror	r18
    2980:	ea 95       	dec	r30
    2982:	d1 f7       	brne	.-12     	; 0x2978 <_ZN15Adafruit_BME28015readTemperatureEv+0xa0>
    2984:	ab 89       	ldd	r26, Y+19	; 0x13
    2986:	bc 89       	ldd	r27, Y+20	; 0x14
    2988:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__mulshisi3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	fe e0       	ldi	r31, 0x0E	; 14
    2992:	b5 95       	asr	r27
    2994:	a7 95       	ror	r26
    2996:	97 95       	ror	r25
    2998:	87 95       	ror	r24
    299a:	fa 95       	dec	r31
    299c:	d1 f7       	brne	.-12     	; 0x2992 <_ZN15Adafruit_BME28015readTemperatureEv+0xba>
    299e:	a5 01       	movw	r20, r10
    29a0:	94 01       	movw	r18, r8
    29a2:	28 0f       	add	r18, r24
    29a4:	39 1f       	adc	r19, r25
    29a6:	4a 1f       	adc	r20, r26
    29a8:	5b 1f       	adc	r21, r27
    29aa:	2f 83       	std	Y+7, r18	; 0x07
    29ac:	38 87       	std	Y+8, r19	; 0x08
    29ae:	49 87       	std	Y+9, r20	; 0x09
    29b0:	5a 87       	std	Y+10, r21	; 0x0a
    29b2:	a5 e0       	ldi	r26, 0x05	; 5
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__muluhisi3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	80 58       	subi	r24, 0x80	; 128
    29c0:	9f 4f       	sbci	r25, 0xFF	; 255
    29c2:	af 4f       	sbci	r26, 0xFF	; 255
    29c4:	bf 4f       	sbci	r27, 0xFF	; 255
    29c6:	69 2f       	mov	r22, r25
    29c8:	7a 2f       	mov	r23, r26
    29ca:	8b 2f       	mov	r24, r27
    29cc:	99 27       	eor	r25, r25
    29ce:	87 fd       	sbrc	r24, 7
    29d0:	9a 95       	dec	r25
    29d2:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatsisf>
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	48 ec       	ldi	r20, 0xC8	; 200
    29dc:	52 e4       	ldi	r21, 0x42	; 66
    29de:	0e 94 b3 31 	call	0x6366	; 0x6366 <__divsf3>
    29e2:	04 c0       	rjmp	.+8      	; 0x29ec <_ZN15Adafruit_BME28015readTemperatureEv+0x114>
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	80 ec       	ldi	r24, 0xC0	; 192
    29ea:	9f e7       	ldi	r25, 0x7F	; 127
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	ff 90       	pop	r15
    29f6:	ef 90       	pop	r14
    29f8:	df 90       	pop	r13
    29fa:	cf 90       	pop	r12
    29fc:	bf 90       	pop	r11
    29fe:	af 90       	pop	r10
    2a00:	9f 90       	pop	r9
    2a02:	8f 90       	pop	r8
    2a04:	08 95       	ret

00002a06 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
    2a06:	4f 92       	push	r4
    2a08:	5f 92       	push	r5
    2a0a:	6f 92       	push	r6
    2a0c:	7f 92       	push	r7
    2a0e:	8f 92       	push	r8
    2a10:	9f 92       	push	r9
    2a12:	af 92       	push	r10
    2a14:	bf 92       	push	r11
    2a16:	cf 92       	push	r12
    2a18:	df 92       	push	r13
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	ec 01       	movw	r28, r24
    readTemperature(); // must be done first to get t_fine
    2a24:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    2a28:	6d ef       	ldi	r22, 0xFD	; 253
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <_ZN15Adafruit_BME2806read16Eh>
    2a30:	a0 e0       	ldi	r26, 0x00	; 0
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
    2a34:	81 15       	cp	r24, r1
    2a36:	20 e8       	ldi	r18, 0x80	; 128
    2a38:	92 07       	cpc	r25, r18
    2a3a:	a1 05       	cpc	r26, r1
    2a3c:	b1 05       	cpc	r27, r1
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <_ZN15Adafruit_BME28012readHumidityEv+0x3c>
    2a40:	cd c0       	rjmp	.+410    	; 0x2bdc <_ZN15Adafruit_BME28012readHumidityEv+0x1d6>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
    2a42:	8f 80       	ldd	r8, Y+7	; 0x07
    2a44:	98 84       	ldd	r9, Y+8	; 0x08
    2a46:	a9 84       	ldd	r10, Y+9	; 0x09
    2a48:	ba 84       	ldd	r11, Y+10	; 0x0a
    2a4a:	3c e2       	ldi	r19, 0x2C	; 44
    2a4c:	93 1a       	sub	r9, r19
    2a4e:	31 e0       	ldi	r19, 0x01	; 1
    2a50:	a3 0a       	sbc	r10, r19
    2a52:	b1 08       	sbc	r11, r1

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
    2a54:	3e e0       	ldi	r19, 0x0E	; 14
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	aa 1f       	adc	r26, r26
    2a5c:	bb 1f       	adc	r27, r27
    2a5e:	3a 95       	dec	r19
    2a60:	d1 f7       	brne	.-12     	; 0x2a56 <_ZN15Adafruit_BME28012readHumidityEv+0x50>
    2a62:	4b a5       	ldd	r20, Y+43	; 0x2b
    2a64:	5c a5       	ldd	r21, Y+44	; 0x2c
    2a66:	05 2e       	mov	r0, r21
    2a68:	00 0c       	add	r0, r0
    2a6a:	66 0b       	sbc	r22, r22
    2a6c:	77 0b       	sbc	r23, r23
    2a6e:	e4 e1       	ldi	r30, 0x14	; 20
    2a70:	44 0f       	add	r20, r20
    2a72:	55 1f       	adc	r21, r21
    2a74:	66 1f       	adc	r22, r22
    2a76:	77 1f       	adc	r23, r23
    2a78:	ea 95       	dec	r30
    2a7a:	d1 f7       	brne	.-12     	; 0x2a70 <_ZN15Adafruit_BME28012readHumidityEv+0x6a>
    2a7c:	6c 01       	movw	r12, r24
    2a7e:	7d 01       	movw	r14, r26
    2a80:	c4 1a       	sub	r12, r20
    2a82:	d5 0a       	sbc	r13, r21
    2a84:	e6 0a       	sbc	r14, r22
    2a86:	f7 0a       	sbc	r15, r23
    2a88:	ad a5       	ldd	r26, Y+45	; 0x2d
    2a8a:	be a5       	ldd	r27, Y+46	; 0x2e
    2a8c:	a5 01       	movw	r20, r10
    2a8e:	94 01       	movw	r18, r8
    2a90:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__mulshisi3>
    2a94:	c6 1a       	sub	r12, r22
    2a96:	d7 0a       	sbc	r13, r23
    2a98:	e8 0a       	sbc	r14, r24
    2a9a:	f9 0a       	sbc	r15, r25
    2a9c:	40 e4       	ldi	r20, 0x40	; 64
    2a9e:	d4 0e       	add	r13, r20
    2aa0:	e1 1c       	adc	r14, r1
    2aa2:	f1 1c       	adc	r15, r1
    2aa4:	ff e0       	ldi	r31, 0x0F	; 15
    2aa6:	f5 94       	asr	r15
    2aa8:	e7 94       	ror	r14
    2aaa:	d7 94       	ror	r13
    2aac:	c7 94       	ror	r12
    2aae:	fa 95       	dec	r31
    2ab0:	d1 f7       	brne	.-12     	; 0x2aa6 <_ZN15Adafruit_BME28012readHumidityEv+0xa0>
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
    2ab2:	aa a5       	ldd	r26, Y+42	; 0x2a
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	a5 01       	movw	r20, r10
    2ab8:	94 01       	movw	r18, r8
    2aba:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__muluhisi3>
    2abe:	2b 01       	movw	r4, r22
    2ac0:	3c 01       	movw	r6, r24
    2ac2:	ab e0       	ldi	r26, 0x0B	; 11
    2ac4:	75 94       	asr	r7
    2ac6:	67 94       	ror	r6
    2ac8:	57 94       	ror	r5
    2aca:	47 94       	ror	r4
    2acc:	aa 95       	dec	r26
    2ace:	d1 f7       	brne	.-12     	; 0x2ac4 <_ZN15Adafruit_BME28012readHumidityEv+0xbe>
    2ad0:	50 e8       	ldi	r21, 0x80	; 128
    2ad2:	55 0e       	add	r5, r21
    2ad4:	61 1c       	adc	r6, r1
    2ad6:	71 1c       	adc	r7, r1
    2ad8:	af a5       	ldd	r26, Y+47	; 0x2f
    2ada:	0a 2e       	mov	r0, r26
    2adc:	00 0c       	add	r0, r0
    2ade:	bb 0b       	sbc	r27, r27
    2ae0:	a5 01       	movw	r20, r10
    2ae2:	94 01       	movw	r18, r8
    2ae4:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__mulshisi3>
    2ae8:	ba e0       	ldi	r27, 0x0A	; 10
    2aea:	95 95       	asr	r25
    2aec:	87 95       	ror	r24
    2aee:	77 95       	ror	r23
    2af0:	67 95       	ror	r22
    2af2:	ba 95       	dec	r27
    2af4:	d1 f7       	brne	.-12     	; 0x2aea <_ZN15Adafruit_BME28012readHumidityEv+0xe4>
    2af6:	a3 01       	movw	r20, r6
    2af8:	92 01       	movw	r18, r4
    2afa:	0e 94 82 32 	call	0x6504	; 0x6504 <__mulsi3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	2a e0       	ldi	r18, 0x0A	; 10
    2b04:	b5 95       	asr	r27
    2b06:	a7 95       	ror	r26
    2b08:	97 95       	ror	r25
    2b0a:	87 95       	ror	r24
    2b0c:	2a 95       	dec	r18
    2b0e:	d1 f7       	brne	.-12     	; 0x2b04 <_ZN15Adafruit_BME28012readHumidityEv+0xfe>
    2b10:	9c 01       	movw	r18, r24
    2b12:	ad 01       	movw	r20, r26
    2b14:	40 5e       	subi	r20, 0xE0	; 224
    2b16:	5f 4f       	sbci	r21, 0xFF	; 255
    2b18:	a8 a5       	ldd	r26, Y+40	; 0x28
    2b1a:	b9 a5       	ldd	r27, Y+41	; 0x29
    2b1c:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__mulshisi3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	90 5e       	subi	r25, 0xE0	; 224
    2b26:	af 4f       	sbci	r26, 0xFF	; 255
    2b28:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	3e e0       	ldi	r19, 0x0E	; 14
    2b30:	95 95       	asr	r25
    2b32:	87 95       	ror	r24
    2b34:	77 95       	ror	r23
    2b36:	67 95       	ror	r22
    2b38:	3a 95       	dec	r19
    2b3a:	d1 f7       	brne	.-12     	; 0x2b30 <_ZN15Adafruit_BME28012readHumidityEv+0x12a>
    2b3c:	a7 01       	movw	r20, r14
    2b3e:	96 01       	movw	r18, r12
    2b40:	0e 94 82 32 	call	0x6504	; 0x6504 <__mulsi3>
    2b44:	6b 01       	movw	r12, r22
    2b46:	7c 01       	movw	r14, r24

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
    2b48:	4f e0       	ldi	r20, 0x0F	; 15
    2b4a:	95 95       	asr	r25
    2b4c:	87 95       	ror	r24
    2b4e:	77 95       	ror	r23
    2b50:	67 95       	ror	r22
    2b52:	4a 95       	dec	r20
    2b54:	d1 f7       	brne	.-12     	; 0x2b4a <_ZN15Adafruit_BME28012readHumidityEv+0x144>
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
    2b56:	9b 01       	movw	r18, r22
    2b58:	ac 01       	movw	r20, r24
    2b5a:	0e 94 82 32 	call	0x6504	; 0x6504 <__mulsi3>
    2b5e:	9b 01       	movw	r18, r22
    2b60:	ac 01       	movw	r20, r24
    2b62:	67 e0       	ldi	r22, 0x07	; 7
    2b64:	55 95       	asr	r21
    2b66:	47 95       	ror	r20
    2b68:	37 95       	ror	r19
    2b6a:	27 95       	ror	r18
    2b6c:	6a 95       	dec	r22
    2b6e:	d1 f7       	brne	.-12     	; 0x2b64 <_ZN15Adafruit_BME28012readHumidityEv+0x15e>
    2b70:	af a1       	ldd	r26, Y+39	; 0x27
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__muluhisi3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	74 e0       	ldi	r23, 0x04	; 4
    2b7e:	b5 95       	asr	r27
    2b80:	a7 95       	ror	r26
    2b82:	97 95       	ror	r25
    2b84:	87 95       	ror	r24
    2b86:	7a 95       	dec	r23
    2b88:	d1 f7       	brne	.-12     	; 0x2b7e <_ZN15Adafruit_BME28012readHumidityEv+0x178>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    2b8a:	a7 01       	movw	r20, r14
    2b8c:	96 01       	movw	r18, r12
    2b8e:	28 1b       	sub	r18, r24
    2b90:	39 0b       	sbc	r19, r25
    2b92:	4a 0b       	sbc	r20, r26
    2b94:	5b 0b       	sbc	r21, r27
    2b96:	da 01       	movw	r26, r20
    2b98:	c9 01       	movw	r24, r18
    2b9a:	57 ff       	sbrs	r21, 7
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <_ZN15Adafruit_BME28012readHumidityEv+0x19e>
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	dc 01       	movw	r26, r24
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
    2ba4:	81 30       	cpi	r24, 0x01	; 1
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	a1 05       	cpc	r26, r1
    2baa:	39 e1       	ldi	r19, 0x19	; 25
    2bac:	b3 07       	cpc	r27, r19
    2bae:	24 f0       	brlt	.+8      	; 0x2bb8 <_ZN15Adafruit_BME28012readHumidityEv+0x1b2>
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	a0 e0       	ldi	r26, 0x00	; 0
    2bb6:	b9 e1       	ldi	r27, 0x19	; 25
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	2c e0       	ldi	r18, 0x0C	; 12
    2bbe:	95 95       	asr	r25
    2bc0:	87 95       	ror	r24
    2bc2:	77 95       	ror	r23
    2bc4:	67 95       	ror	r22
    2bc6:	2a 95       	dec	r18
    2bc8:	d1 f7       	brne	.-12     	; 0x2bbe <_ZN15Adafruit_BME28012readHumidityEv+0x1b8>
    2bca:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatsisf>
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e8       	ldi	r20, 0x80	; 128
    2bd4:	5a e3       	ldi	r21, 0x3A	; 58
    2bd6:	0e 94 81 08 	call	0x1102	; 0x1102 <__mulsf3>
    2bda:	04 c0       	rjmp	.+8      	; 0x2be4 <_ZN15Adafruit_BME28012readHumidityEv+0x1de>
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	80 ec       	ldi	r24, 0xC0	; 192
    2be2:	9f e7       	ldi	r25, 0x7F	; 127

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	ff 90       	pop	r15
    2bea:	ef 90       	pop	r14
    2bec:	df 90       	pop	r13
    2bee:	cf 90       	pop	r12
    2bf0:	bf 90       	pop	r11
    2bf2:	af 90       	pop	r10
    2bf4:	9f 90       	pop	r9
    2bf6:	8f 90       	pop	r8
    2bf8:	7f 90       	pop	r7
    2bfa:	6f 90       	pop	r6
    2bfc:	5f 90       	pop	r5
    2bfe:	4f 90       	pop	r4
    2c00:	08 95       	ret

00002c02 <_ZN15Adafruit_seesawC1EP7TwoWire>:
 *****************************************************************************************
 *  @brief      Disable the interrupt from firing when the encoder changes position.
 ****************************************************************************************/
void Adafruit_seesaw::disableEncoderInterrupt()
{
	this->write8(SEESAW_ENCODER_BASE, SEESAW_ENCODER_INTENCLR, 0x01);	
    2c02:	fc 01       	movw	r30, r24
    2c04:	13 82       	std	Z+3, r1	; 0x03
    2c06:	12 82       	std	Z+2, r1	; 0x02
    2c08:	85 ee       	ldi	r24, 0xE5	; 229
    2c0a:	92 e0       	ldi	r25, 0x02	; 2
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	80 83       	st	Z, r24
    2c10:	61 15       	cp	r22, r1
    2c12:	71 05       	cpc	r23, r1
    2c14:	29 f4       	brne	.+10     	; 0x2c20 <_ZN15Adafruit_seesawC1EP7TwoWire+0x1e>
    2c16:	89 e0       	ldi	r24, 0x09	; 9
    2c18:	96 e0       	ldi	r25, 0x06	; 6
    2c1a:	96 83       	std	Z+6, r25	; 0x06
    2c1c:	85 83       	std	Z+5, r24	; 0x05
    2c1e:	08 95       	ret
    2c20:	76 83       	std	Z+6, r23	; 0x06
    2c22:	65 83       	std	Z+5, r22	; 0x05
    2c24:	08 95       	ret

00002c26 <_ZN15Adafruit_seesaw9_i2c_initEv>:
    2c26:	fc 01       	movw	r30, r24
    2c28:	85 81       	ldd	r24, Z+5	; 0x05
    2c2a:	96 81       	ldd	r25, Z+6	; 0x06
    2c2c:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <_ZN7TwoWire5beginEv>

00002c30 <_ZN15Adafruit_seesaw4readEhhPhhj>:
    2c30:	2f 92       	push	r2
    2c32:	3f 92       	push	r3
    2c34:	4f 92       	push	r4
    2c36:	5f 92       	push	r5
    2c38:	6f 92       	push	r6
    2c3a:	7f 92       	push	r7
    2c3c:	8f 92       	push	r8
    2c3e:	9f 92       	push	r9
    2c40:	af 92       	push	r10
    2c42:	bf 92       	push	r11
    2c44:	cf 92       	push	r12
    2c46:	df 92       	push	r13
    2c48:	ef 92       	push	r14
    2c4a:	ff 92       	push	r15
    2c4c:	0f 93       	push	r16
    2c4e:	1f 93       	push	r17
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	ec 01       	movw	r28, r24
    2c56:	16 2f       	mov	r17, r22
    2c58:	74 2e       	mov	r7, r20
    2c5a:	29 01       	movw	r4, r18
    2c5c:	61 2c       	mov	r6, r1
    2c5e:	80 2e       	mov	r8, r16
    2c60:	91 2c       	mov	r9, r1
    2c62:	60 16       	cp	r6, r16
    2c64:	08 f0       	brcs	.+2      	; 0x2c68 <_ZN15Adafruit_seesaw4readEhhPhhj+0x38>
    2c66:	5f c0       	rjmp	.+190    	; 0x2d26 <_ZN15Adafruit_seesaw4readEhhPhhj+0xf6>
    2c68:	64 01       	movw	r12, r8
    2c6a:	c6 18       	sub	r12, r6
    2c6c:	d1 08       	sbc	r13, r1
    2c6e:	81 e2       	ldi	r24, 0x21	; 33
    2c70:	c8 16       	cp	r12, r24
    2c72:	d1 04       	cpc	r13, r1
    2c74:	1c f0       	brlt	.+6      	; 0x2c7c <_ZN15Adafruit_seesaw4readEhhPhhj+0x4c>
    2c76:	80 e2       	ldi	r24, 0x20	; 32
    2c78:	c8 2e       	mov	r12, r24
    2c7a:	d1 2c       	mov	r13, r1
    2c7c:	bc 2c       	mov	r11, r12
    2c7e:	6c 81       	ldd	r22, Y+4	; 0x04
    2c80:	8d 81       	ldd	r24, Y+5	; 0x05
    2c82:	9e 81       	ldd	r25, Y+6	; 0x06
    2c84:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire17beginTransmissionEh>
    2c88:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	ed 91       	ld	r30, X+
    2c90:	fc 91       	ld	r31, X
    2c92:	01 90       	ld	r0, Z+
    2c94:	f0 81       	ld	r31, Z
    2c96:	e0 2d       	mov	r30, r0
    2c98:	61 2f       	mov	r22, r17
    2c9a:	09 95       	icall
    2c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	ed 91       	ld	r30, X+
    2ca4:	fc 91       	ld	r31, X
    2ca6:	01 90       	ld	r0, Z+
    2ca8:	f0 81       	ld	r31, Z
    2caa:	e0 2d       	mov	r30, r0
    2cac:	67 2d       	mov	r22, r7
    2cae:	09 95       	icall
    2cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb4:	59 f4       	brne	.+22     	; 0x2ccc <_ZN15Adafruit_seesaw4readEhhPhhj+0x9c>
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <_ZN7TwoWire15endTransmissionEv>
    2cbe:	c7 01       	movw	r24, r14
    2cc0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <delayMicroseconds>
    2cc4:	8f 81       	ldd	r24, Y+7	; 0x07
    2cc6:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc8:	39 f4       	brne	.+14     	; 0x2cd8 <_ZN15Adafruit_seesaw4readEhhPhhj+0xa8>
    2cca:	0b c0       	rjmp	.+22     	; 0x2ce2 <_ZN15Adafruit_seesaw4readEhhPhhj+0xb2>
    2ccc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cce:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <digitalRead>
    2cd2:	89 2b       	or	r24, r25
    2cd4:	d9 f3       	breq	.-10     	; 0x2ccc <_ZN15Adafruit_seesaw4readEhhPhhj+0x9c>
    2cd6:	ef cf       	rjmp	.-34     	; 0x2cb6 <_ZN15Adafruit_seesaw4readEhhPhhj+0x86>
    2cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cda:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <digitalRead>
    2cde:	89 2b       	or	r24, r25
    2ce0:	d9 f3       	breq	.-10     	; 0x2cd8 <_ZN15Adafruit_seesaw4readEhhPhhj+0xa8>
    2ce2:	4b 2d       	mov	r20, r11
    2ce4:	6c 81       	ldd	r22, Y+4	; 0x04
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <_ZN7TwoWire11requestFromEhh>
    2cee:	a1 2c       	mov	r10, r1
    2cf0:	b1 2c       	mov	r11, r1
    2cf2:	dd 24       	eor	r13, r13
    2cf4:	11 c0       	rjmp	.+34     	; 0x2d18 <_ZN15Adafruit_seesaw4readEhhPhhj+0xe8>
    2cf6:	12 01       	movw	r2, r4
    2cf8:	28 0e       	add	r2, r24
    2cfa:	31 1c       	adc	r3, r1
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	dc 01       	movw	r26, r24
    2d02:	ed 91       	ld	r30, X+
    2d04:	fc 91       	ld	r31, X
    2d06:	02 84       	ldd	r0, Z+10	; 0x0a
    2d08:	f3 85       	ldd	r31, Z+11	; 0x0b
    2d0a:	e0 2d       	mov	r30, r0
    2d0c:	09 95       	icall
    2d0e:	f1 01       	movw	r30, r2
    2d10:	80 83       	st	Z, r24
    2d12:	ff ef       	ldi	r31, 0xFF	; 255
    2d14:	af 1a       	sub	r10, r31
    2d16:	bf 0a       	sbc	r11, r31
    2d18:	86 2d       	mov	r24, r6
    2d1a:	8a 0d       	add	r24, r10
    2d1c:	ac 14       	cp	r10, r12
    2d1e:	bd 04       	cpc	r11, r13
    2d20:	54 f3       	brlt	.-44     	; 0x2cf6 <_ZN15Adafruit_seesaw4readEhhPhhj+0xc6>
    2d22:	68 2e       	mov	r6, r24
    2d24:	9e cf       	rjmp	.-196    	; 0x2c62 <_ZN15Adafruit_seesaw4readEhhPhhj+0x32>
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	ff 90       	pop	r15
    2d30:	ef 90       	pop	r14
    2d32:	df 90       	pop	r13
    2d34:	cf 90       	pop	r12
    2d36:	bf 90       	pop	r11
    2d38:	af 90       	pop	r10
    2d3a:	9f 90       	pop	r9
    2d3c:	8f 90       	pop	r8
    2d3e:	7f 90       	pop	r7
    2d40:	6f 90       	pop	r6
    2d42:	5f 90       	pop	r5
    2d44:	4f 90       	pop	r4
    2d46:	3f 90       	pop	r3
    2d48:	2f 90       	pop	r2
    2d4a:	08 95       	ret

00002d4c <_ZN15Adafruit_seesaw10getVersionEv>:
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <_ZN15Adafruit_seesaw10getVersionEv+0xc>
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <_ZN15Adafruit_seesaw10getVersionEv+0xe>
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	2d e7       	ldi	r18, 0x7D	; 125
    2d60:	e2 2e       	mov	r14, r18
    2d62:	f1 2c       	mov	r15, r1
    2d64:	04 e0       	ldi	r16, 0x04	; 4
    2d66:	9e 01       	movw	r18, r28
    2d68:	2f 5f       	subi	r18, 0xFF	; 255
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6c:	42 e0       	ldi	r20, 0x02	; 2
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	0e 94 18 16 	call	0x2c30	; 0x2c30 <_ZN15Adafruit_seesaw4readEhhPhhj>
    2d74:	69 81       	ldd	r22, Y+1	; 0x01
    2d76:	7a 81       	ldd	r23, Y+2	; 0x02
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	0e 94 e7 32 	call	0x65ce	; 0x65ce <__bswapsi2>
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	0f 91       	pop	r16
    2d8e:	ff 90       	pop	r15
    2d90:	ef 90       	pop	r14
    2d92:	08 95       	ret

00002d94 <_ZN15Adafruit_seesaw10analogReadEh>:
    2d94:	ef 92       	push	r14
    2d96:	ff 92       	push	r15
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	00 d0       	rcall	.+0      	; 0x2da2 <_ZN15Adafruit_seesaw10analogReadEh+0xe>
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	63 30       	cpi	r22, 0x03	; 3
    2da8:	69 f0       	breq	.+26     	; 0x2dc4 <_ZN15Adafruit_seesaw10analogReadEh+0x30>
    2daa:	20 f4       	brcc	.+8      	; 0x2db4 <_ZN15Adafruit_seesaw10analogReadEh+0x20>
    2dac:	62 30       	cpi	r22, 0x02	; 2
    2dae:	21 f5       	brne	.+72     	; 0x2df8 <_ZN15Adafruit_seesaw10analogReadEh+0x64>
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	09 c0       	rjmp	.+18     	; 0x2dc6 <_ZN15Adafruit_seesaw10analogReadEh+0x32>
    2db4:	64 30       	cpi	r22, 0x04	; 4
    2db6:	21 f0       	breq	.+8      	; 0x2dc0 <_ZN15Adafruit_seesaw10analogReadEh+0x2c>
    2db8:	65 30       	cpi	r22, 0x05	; 5
    2dba:	f1 f4       	brne	.+60     	; 0x2df8 <_ZN15Adafruit_seesaw10analogReadEh+0x64>
    2dbc:	43 e0       	ldi	r20, 0x03	; 3
    2dbe:	03 c0       	rjmp	.+6      	; 0x2dc6 <_ZN15Adafruit_seesaw10analogReadEh+0x32>
    2dc0:	42 e0       	ldi	r20, 0x02	; 2
    2dc2:	01 c0       	rjmp	.+2      	; 0x2dc6 <_ZN15Adafruit_seesaw10analogReadEh+0x32>
    2dc4:	41 e0       	ldi	r20, 0x01	; 1
    2dc6:	49 5f       	subi	r20, 0xF9	; 249
    2dc8:	24 ef       	ldi	r18, 0xF4	; 244
    2dca:	e2 2e       	mov	r14, r18
    2dcc:	ff 24       	eor	r15, r15
    2dce:	f3 94       	inc	r15
    2dd0:	02 e0       	ldi	r16, 0x02	; 2
    2dd2:	9e 01       	movw	r18, r28
    2dd4:	2f 5f       	subi	r18, 0xFF	; 255
    2dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd8:	69 e0       	ldi	r22, 0x09	; 9
    2dda:	0e 94 18 16 	call	0x2c30	; 0x2c30 <_ZN15Adafruit_seesaw4readEhhPhhj>
    2dde:	09 81       	ldd	r16, Y+1	; 0x01
    2de0:	1a 81       	ldd	r17, Y+2	; 0x02
    2de2:	10 27       	eor	r17, r16
    2de4:	01 27       	eor	r16, r17
    2de6:	10 27       	eor	r17, r16
    2de8:	61 e0       	ldi	r22, 0x01	; 1
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    2df4:	c8 01       	movw	r24, r16
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <_ZN15Adafruit_seesaw10analogReadEh+0x68>
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
    2e08:	ff 90       	pop	r15
    2e0a:	ef 90       	pop	r14
    2e0c:	08 95       	ret

00002e0e <_ZN15Adafruit_seesaw9touchReadEh>:
    2e0e:	ef 92       	push	r14
    2e10:	ff 92       	push	r15
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <_ZN15Adafruit_seesaw9touchReadEh+0xe>
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	40 e1       	ldi	r20, 0x10	; 16
    2e22:	46 0f       	add	r20, r22
    2e24:	28 ee       	ldi	r18, 0xE8	; 232
    2e26:	e2 2e       	mov	r14, r18
    2e28:	23 e0       	ldi	r18, 0x03	; 3
    2e2a:	f2 2e       	mov	r15, r18
    2e2c:	02 e0       	ldi	r16, 0x02	; 2
    2e2e:	9e 01       	movw	r18, r28
    2e30:	2f 5f       	subi	r18, 0xFF	; 255
    2e32:	3f 4f       	sbci	r19, 0xFF	; 255
    2e34:	6f e0       	ldi	r22, 0x0F	; 15
    2e36:	0e 94 18 16 	call	0x2c30	; 0x2c30 <_ZN15Adafruit_seesaw4readEhhPhhj>
    2e3a:	09 81       	ldd	r16, Y+1	; 0x01
    2e3c:	1a 81       	ldd	r17, Y+2	; 0x02
    2e3e:	10 27       	eor	r17, r16
    2e40:	01 27       	eor	r16, r17
    2e42:	10 27       	eor	r17, r16
    2e44:	61 e0       	ldi	r22, 0x01	; 1
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    2e50:	c8 01       	movw	r24, r16
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	ff 90       	pop	r15
    2e60:	ef 90       	pop	r14
    2e62:	08 95       	ret

00002e64 <_ZN15Adafruit_seesaw5read8Ehhj>:
    2e64:	ef 92       	push	r14
    2e66:	ff 92       	push	r15
    2e68:	0f 93       	push	r16
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	1f 92       	push	r1
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	79 01       	movw	r14, r18
    2e76:	01 e0       	ldi	r16, 0x01	; 1
    2e78:	9e 01       	movw	r18, r28
    2e7a:	2f 5f       	subi	r18, 0xFF	; 255
    2e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <_ZN15Adafruit_seesaw4readEhhPhhj>
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	0f 90       	pop	r0
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	0f 91       	pop	r16
    2e8c:	ff 90       	pop	r15
    2e8e:	ef 90       	pop	r14
    2e90:	08 95       	ret

00002e92 <_ZN15Adafruit_seesaw5writeEhhPhh>:
    2e92:	df 92       	push	r13
    2e94:	ef 92       	push	r14
    2e96:	ff 92       	push	r15
    2e98:	0f 93       	push	r16
    2e9a:	1f 93       	push	r17
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	ec 01       	movw	r28, r24
    2ea2:	d6 2e       	mov	r13, r22
    2ea4:	14 2f       	mov	r17, r20
    2ea6:	79 01       	movw	r14, r18
    2ea8:	6c 81       	ldd	r22, Y+4	; 0x04
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire17beginTransmissionEh>
    2eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	ed 91       	ld	r30, X+
    2eba:	fc 91       	ld	r31, X
    2ebc:	01 90       	ld	r0, Z+
    2ebe:	f0 81       	ld	r31, Z
    2ec0:	e0 2d       	mov	r30, r0
    2ec2:	6d 2d       	mov	r22, r13
    2ec4:	09 95       	icall
    2ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eca:	dc 01       	movw	r26, r24
    2ecc:	ed 91       	ld	r30, X+
    2ece:	fc 91       	ld	r31, X
    2ed0:	01 90       	ld	r0, Z+
    2ed2:	f0 81       	ld	r31, Z
    2ed4:	e0 2d       	mov	r30, r0
    2ed6:	61 2f       	mov	r22, r17
    2ed8:	09 95       	icall
    2eda:	8d 81       	ldd	r24, Y+5	; 0x05
    2edc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ede:	40 2f       	mov	r20, r16
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	ed 91       	ld	r30, X+
    2ee6:	fc 91       	ld	r31, X
    2ee8:	02 80       	ldd	r0, Z+2	; 0x02
    2eea:	f3 81       	ldd	r31, Z+3	; 0x03
    2eec:	e0 2d       	mov	r30, r0
    2eee:	b7 01       	movw	r22, r14
    2ef0:	09 95       	icall
    2ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef6:	59 f4       	brne	.+22     	; 0x2f0e <_ZN15Adafruit_seesaw5writeEhhPhh+0x7c>
    2ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    2efa:	9e 81       	ldd	r25, Y+6	; 0x06
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	ff 90       	pop	r15
    2f06:	ef 90       	pop	r14
    2f08:	df 90       	pop	r13
    2f0a:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <_ZN7TwoWire15endTransmissionEv>
    2f0e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f10:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <digitalRead>
    2f14:	89 2b       	or	r24, r25
    2f16:	d9 f3       	breq	.-10     	; 0x2f0e <_ZN15Adafruit_seesaw5writeEhhPhh+0x7c>
    2f18:	ef cf       	rjmp	.-34     	; 0x2ef8 <_ZN15Adafruit_seesaw5writeEhhPhh+0x66>

00002f1a <_ZN15Adafruit_seesaw11analogWriteEhjh>:
    2f1a:	7f 92       	push	r7
    2f1c:	8f 92       	push	r8
    2f1e:	9f 92       	push	r9
    2f20:	af 92       	push	r10
    2f22:	bf 92       	push	r11
    2f24:	cf 92       	push	r12
    2f26:	df 92       	push	r13
    2f28:	ef 92       	push	r14
    2f2a:	ff 92       	push	r15
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <_ZN15Adafruit_seesaw11analogWriteEhjh+0x1c>
    2f36:	1f 92       	push	r1
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	ec ef       	ldi	r30, 0xFC	; 252
    2f3e:	e6 0f       	add	r30, r22
    2f40:	e4 30       	cpi	r30, 0x04	; 4
    2f42:	c8 f5       	brcc	.+114    	; 0x2fb6 <_ZN15Adafruit_seesaw11analogWriteEhjh+0x9c>
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	e3 52       	subi	r30, 0x23	; 35
    2f48:	fd 4f       	sbci	r31, 0xFD	; 253
    2f4a:	70 80       	ld	r7, Z
    2f4c:	77 fc       	sbrc	r7, 7
    2f4e:	33 c0       	rjmp	.+102    	; 0x2fb6 <_ZN15Adafruit_seesaw11analogWriteEhjh+0x9c>
    2f50:	ba 01       	movw	r22, r20
    2f52:	4c 01       	movw	r8, r24
    2f54:	20 31       	cpi	r18, 0x10	; 16
    2f56:	61 f4       	brne	.+24     	; 0x2f70 <_ZN15Adafruit_seesaw11analogWriteEhjh+0x56>
    2f58:	79 82       	std	Y+1, r7	; 0x01
    2f5a:	7a 83       	std	Y+2, r23	; 0x02
    2f5c:	4b 83       	std	Y+3, r20	; 0x03
    2f5e:	03 e0       	ldi	r16, 0x03	; 3
    2f60:	9e 01       	movw	r18, r28
    2f62:	2f 5f       	subi	r18, 0xFF	; 255
    2f64:	3f 4f       	sbci	r19, 0xFF	; 255
    2f66:	41 e0       	ldi	r20, 0x01	; 1
    2f68:	68 e0       	ldi	r22, 0x08	; 8
    2f6a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN15Adafruit_seesaw5writeEhhPhh>
    2f6e:	23 c0       	rjmp	.+70     	; 0x2fb6 <_ZN15Adafruit_seesaw11analogWriteEhjh+0x9c>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	1f 92       	push	r1
    2f76:	1f 92       	push	r1
    2f78:	2f ef       	ldi	r18, 0xFF	; 255
    2f7a:	2f 93       	push	r18
    2f7c:	2f 93       	push	r18
    2f7e:	a1 2c       	mov	r10, r1
    2f80:	b1 2c       	mov	r11, r1
    2f82:	65 01       	movw	r12, r10
    2f84:	e1 2c       	mov	r14, r1
    2f86:	f1 2c       	mov	r15, r1
    2f88:	87 01       	movw	r16, r14
    2f8a:	ea 94       	dec	r14
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	a9 01       	movw	r20, r18
    2f92:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_Z3maplllll>
    2f96:	79 82       	std	Y+1, r7	; 0x01
    2f98:	7a 83       	std	Y+2, r23	; 0x02
    2f9a:	6b 83       	std	Y+3, r22	; 0x03
    2f9c:	03 e0       	ldi	r16, 0x03	; 3
    2f9e:	9e 01       	movw	r18, r28
    2fa0:	2f 5f       	subi	r18, 0xFF	; 255
    2fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa4:	41 e0       	ldi	r20, 0x01	; 1
    2fa6:	68 e0       	ldi	r22, 0x08	; 8
    2fa8:	c4 01       	movw	r24, r8
    2faa:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN15Adafruit_seesaw5writeEhhPhh>
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	ff 90       	pop	r15
    2fc6:	ef 90       	pop	r14
    2fc8:	df 90       	pop	r13
    2fca:	cf 90       	pop	r12
    2fcc:	bf 90       	pop	r11
    2fce:	af 90       	pop	r10
    2fd0:	9f 90       	pop	r9
    2fd2:	8f 90       	pop	r8
    2fd4:	7f 90       	pop	r7
    2fd6:	08 95       	ret

00002fd8 <_ZN15Adafruit_seesaw10setPWMFreqEhj>:
    2fd8:	0f 93       	push	r16
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <_ZN15Adafruit_seesaw10setPWMFreqEhj+0x8>
    2fe0:	1f 92       	push	r1
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	64 50       	subi	r22, 0x04	; 4
    2fe8:	64 30       	cpi	r22, 0x04	; 4
    2fea:	90 f4       	brcc	.+36     	; 0x3010 <_ZN15Adafruit_seesaw10setPWMFreqEhj+0x38>
    2fec:	e6 2f       	mov	r30, r22
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	e3 52       	subi	r30, 0x23	; 35
    2ff2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ff4:	20 81       	ld	r18, Z
    2ff6:	27 fd       	sbrc	r18, 7
    2ff8:	0b c0       	rjmp	.+22     	; 0x3010 <_ZN15Adafruit_seesaw10setPWMFreqEhj+0x38>
    2ffa:	29 83       	std	Y+1, r18	; 0x01
    2ffc:	5a 83       	std	Y+2, r21	; 0x02
    2ffe:	4b 83       	std	Y+3, r20	; 0x03
    3000:	03 e0       	ldi	r16, 0x03	; 3
    3002:	9e 01       	movw	r18, r28
    3004:	2f 5f       	subi	r18, 0xFF	; 255
    3006:	3f 4f       	sbci	r19, 0xFF	; 255
    3008:	42 e0       	ldi	r20, 0x02	; 2
    300a:	68 e0       	ldi	r22, 0x08	; 8
    300c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN15Adafruit_seesaw5writeEhhPhh>
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	0f 91       	pop	r16
    301c:	08 95       	ret

0000301e <_ZN15Adafruit_seesaw6write8Ehhh>:
    301e:	0f 93       	push	r16
    3020:	cf 93       	push	r28
    3022:	df 93       	push	r29
    3024:	1f 92       	push	r1
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	29 83       	std	Y+1, r18	; 0x01
    302c:	01 e0       	ldi	r16, 0x01	; 1
    302e:	9e 01       	movw	r18, r28
    3030:	2f 5f       	subi	r18, 0xFF	; 255
    3032:	3f 4f       	sbci	r19, 0xFF	; 255
    3034:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN15Adafruit_seesaw5writeEhhPhh>
    3038:	0f 90       	pop	r0
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	0f 91       	pop	r16
    3040:	08 95       	ret

00003042 <_ZN15Adafruit_seesaw7SWResetEv>:
    3042:	2f ef       	ldi	r18, 0xFF	; 255
    3044:	4f e7       	ldi	r20, 0x7F	; 127
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	0c 94 0f 18 	jmp	0x301e	; 0x301e <_ZN15Adafruit_seesaw6write8Ehhh>

0000304c <_ZN15Adafruit_seesaw5beginEhab>:
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	ec 01       	movw	r28, r24
    3054:	84 2f       	mov	r24, r20
    3056:	12 2f       	mov	r17, r18
    3058:	6c 83       	std	Y+4, r22	; 0x04
    305a:	4f 83       	std	Y+7, r20	; 0x07
    305c:	4f 3f       	cpi	r20, 0xFF	; 255
    305e:	19 f0       	breq	.+6      	; 0x3066 <_ZN15Adafruit_seesaw5beginEhab+0x1a>
    3060:	60 e0       	ldi	r22, 0x00	; 0
    3062:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>
    3066:	ce 01       	movw	r24, r28
    3068:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_ZN15Adafruit_seesaw9_i2c_initEv>
    306c:	11 23       	and	r17, r17
    306e:	49 f0       	breq	.+18     	; 0x3082 <_ZN15Adafruit_seesaw5beginEhab+0x36>
    3070:	ce 01       	movw	r24, r28
    3072:	0e 94 21 18 	call	0x3042	; 0x3042 <_ZN15Adafruit_seesaw7SWResetEv>
    3076:	64 ef       	ldi	r22, 0xF4	; 244
    3078:	71 e0       	ldi	r23, 0x01	; 1
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    3082:	2d e7       	ldi	r18, 0x7D	; 125
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	41 e0       	ldi	r20, 0x01	; 1
    3088:	60 e0       	ldi	r22, 0x00	; 0
    308a:	ce 01       	movw	r24, r28
    308c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN15Adafruit_seesaw5read8Ehhj>
    3090:	91 e0       	ldi	r25, 0x01	; 1
    3092:	85 35       	cpi	r24, 0x55	; 85
    3094:	09 f0       	breq	.+2      	; 0x3098 <_ZN15Adafruit_seesaw5beginEhab+0x4c>
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	89 2f       	mov	r24, r25
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	1f 91       	pop	r17
    30a0:	08 95       	ret

000030a2 <_ZN15Adafruit_seesaw5writeEh>:
 * 
 *  @param      character the character to write.
 *
 *  @return     none
 ****************************************************************************************/
size_t Adafruit_seesaw::write(uint8_t character) {
    30a2:	26 2f       	mov	r18, r22
	//TODO: add support for multiple sercoms
	this->write8(SEESAW_SERCOM0_BASE, SEESAW_SERCOM_DATA, character);
    30a4:	45 e0       	ldi	r20, 0x05	; 5
    30a6:	62 e0       	ldi	r22, 0x02	; 2
    30a8:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZN15Adafruit_seesaw6write8Ehhh>
	delay(1); //TODO: this can be optimized... it's only needed for longer writes
    30ac:	61 e0       	ldi	r22, 0x01	; 1
    30ae:	70 e0       	ldi	r23, 0x00	; 0
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
	return 1;
}
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	08 95       	ret

000030be <_ZN15Adafruit_seesaw5writeEPKc>:
 * 
 *  @param      str the string to write
 *
 *  @return     none
 ****************************************************************************************/
size_t Adafruit_seesaw::write(const char *str) {
    30be:	cf 92       	push	r12
    30c0:	df 92       	push	r13
    30c2:	ef 92       	push	r14
    30c4:	ff 92       	push	r15
    30c6:	0f 93       	push	r16
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	a0 97       	sbiw	r28, 0x20	; 32
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	6c 01       	movw	r12, r24
    30de:	86 2f       	mov	r24, r22
    30e0:	fb 01       	movw	r30, r22
    30e2:	0e 2f       	mov	r16, r30
    30e4:	08 1b       	sub	r16, r24
	uint8_t buf[32];
	uint8_t len = 0;
	while(*str){
    30e6:	91 91       	ld	r25, Z+
    30e8:	e0 2e       	mov	r14, r16
    30ea:	f1 2c       	mov	r15, r1
    30ec:	99 23       	and	r25, r25
    30ee:	41 f0       	breq	.+16     	; 0x3100 <_ZN15Adafruit_seesaw5writeEPKc+0x42>
		buf[len] = *str;
    30f0:	a1 e0       	ldi	r26, 0x01	; 1
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	ac 0f       	add	r26, r28
    30f6:	bd 1f       	adc	r27, r29
    30f8:	ae 0d       	add	r26, r14
    30fa:	bf 1d       	adc	r27, r15
    30fc:	9c 93       	st	X, r25
 *  @return     none
 ****************************************************************************************/
size_t Adafruit_seesaw::write(const char *str) {
	uint8_t buf[32];
	uint8_t len = 0;
	while(*str){
    30fe:	f1 cf       	rjmp	.-30     	; 0x30e2 <_ZN15Adafruit_seesaw5writeEPKc+0x24>
		buf[len] = *str;
		str++;
		len++;
	}
	this->write(SEESAW_SERCOM0_BASE, SEESAW_SERCOM_DATA, buf, len);
    3100:	9e 01       	movw	r18, r28
    3102:	2f 5f       	subi	r18, 0xFF	; 255
    3104:	3f 4f       	sbci	r19, 0xFF	; 255
    3106:	45 e0       	ldi	r20, 0x05	; 5
    3108:	62 e0       	ldi	r22, 0x02	; 2
    310a:	c6 01       	movw	r24, r12
    310c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN15Adafruit_seesaw5writeEhhPhh>
	return len;
}
    3110:	c7 01       	movw	r24, r14
    3112:	a0 96       	adiw	r28, 0x20	; 32
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	0f 91       	pop	r16
    3124:	ff 90       	pop	r15
    3126:	ef 90       	pop	r14
    3128:	df 90       	pop	r13
    312a:	cf 90       	pop	r12
    312c:	08 95       	ret

0000312e <_ZN12PubSubClient5writeEh>:
}

PubSubClient& PubSubClient::setStream(Stream& stream){
    this->stream = &stream;
    return *this;
}
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	ec 01       	movw	r28, r24
    3136:	16 2f       	mov	r17, r22
    3138:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    313c:	fe 01       	movw	r30, r28
    313e:	e8 57       	subi	r30, 0x78	; 120
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	60 83       	st	Z, r22
    3144:	71 83       	std	Z+1, r23	; 0x01
    3146:	82 83       	std	Z+2, r24	; 0x02
    3148:	93 83       	std	Z+3, r25	; 0x03
    314a:	8c 81       	ldd	r24, Y+4	; 0x04
    314c:	9d 81       	ldd	r25, Y+5	; 0x05
    314e:	dc 01       	movw	r26, r24
    3150:	ed 91       	ld	r30, X+
    3152:	fc 91       	ld	r31, X
    3154:	01 90       	ld	r0, Z+
    3156:	f0 81       	ld	r31, Z
    3158:	e0 2d       	mov	r30, r0
    315a:	61 2f       	mov	r22, r17
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	1f 91       	pop	r17
    3162:	09 94       	ijmp

00003164 <_ZN12PubSubClient5writeEPKhj>:
    3164:	ef 92       	push	r14
    3166:	ff 92       	push	r15
    3168:	0f 93       	push	r16
    316a:	1f 93       	push	r17
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	ec 01       	movw	r28, r24
    3172:	8b 01       	movw	r16, r22
    3174:	7a 01       	movw	r14, r20
    3176:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    317a:	fe 01       	movw	r30, r28
    317c:	e8 57       	subi	r30, 0x78	; 120
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	60 83       	st	Z, r22
    3182:	71 83       	std	Z+1, r23	; 0x01
    3184:	82 83       	std	Z+2, r24	; 0x02
    3186:	93 83       	std	Z+3, r25	; 0x03
    3188:	8c 81       	ldd	r24, Y+4	; 0x04
    318a:	9d 81       	ldd	r25, Y+5	; 0x05
    318c:	dc 01       	movw	r26, r24
    318e:	ed 91       	ld	r30, X+
    3190:	fc 91       	ld	r31, X
    3192:	02 80       	ldd	r0, Z+2	; 0x02
    3194:	f3 81       	ldd	r31, Z+3	; 0x03
    3196:	e0 2d       	mov	r30, r0
    3198:	a7 01       	movw	r20, r14
    319a:	b8 01       	movw	r22, r16
    319c:	df 91       	pop	r29
    319e:	cf 91       	pop	r28
    31a0:	1f 91       	pop	r17
    31a2:	0f 91       	pop	r16
    31a4:	ff 90       	pop	r15
    31a6:	ef 90       	pop	r14
    31a8:	09 94       	ijmp

000031aa <_ZN12PubSubClientC1EPKcjPFvPcPhjER6Client>:
    31aa:	af 92       	push	r10
    31ac:	bf 92       	push	r11
    31ae:	cf 92       	push	r12
    31b0:	df 92       	push	r13
    31b2:	ef 92       	push	r14
    31b4:	ff 92       	push	r15
    31b6:	0f 93       	push	r16
    31b8:	1f 93       	push	r17
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	ec 01       	movw	r28, r24
    31c0:	5b 01       	movw	r10, r22
    31c2:	6a 01       	movw	r12, r20
    31c4:	79 01       	movw	r14, r18
    31c6:	1b 82       	std	Y+3, r1	; 0x03
    31c8:	1a 82       	std	Y+2, r1	; 0x02
    31ca:	89 ef       	ldi	r24, 0xF9	; 249
    31cc:	92 e0       	ldi	r25, 0x02	; 2
    31ce:	99 83       	std	Y+1, r25	; 0x01
    31d0:	88 83       	st	Y, r24
    31d2:	ce 01       	movw	r24, r28
    31d4:	8d 56       	subi	r24, 0x6D	; 109
    31d6:	9f 4f       	sbci	r25, 0xFF	; 255
    31d8:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN9IPAddressC1Ev>
    31dc:	fe 01       	movw	r30, r28
    31de:	e1 56       	subi	r30, 0x61	; 97
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	8f ef       	ldi	r24, 0xFF	; 255
    31e4:	9f ef       	ldi	r25, 0xFF	; 255
    31e6:	91 83       	std	Z+1, r25	; 0x01
    31e8:	80 83       	st	Z, r24
    31ea:	36 97       	sbiw	r30, 0x06	; 6
    31ec:	b1 82       	std	Z+1, r11	; 0x01
    31ee:	a0 82       	st	Z, r10
    31f0:	32 96       	adiw	r30, 0x02	; 2
    31f2:	d1 82       	std	Z+1, r13	; 0x01
    31f4:	c0 82       	st	Z, r12
    31f6:	3a 97       	sbiw	r30, 0x0a	; 10
    31f8:	f1 82       	std	Z+1, r15	; 0x01
    31fa:	e0 82       	st	Z, r14
    31fc:	1d 83       	std	Y+5, r17	; 0x05
    31fe:	0c 83       	std	Y+4, r16	; 0x04
    3200:	c3 56       	subi	r28, 0x63	; 99
    3202:	df 4f       	sbci	r29, 0xFF	; 255
    3204:	19 82       	std	Y+1, r1	; 0x01
    3206:	18 82       	st	Y, r1
    3208:	df 91       	pop	r29
    320a:	cf 91       	pop	r28
    320c:	1f 91       	pop	r17
    320e:	0f 91       	pop	r16
    3210:	ff 90       	pop	r15
    3212:	ef 90       	pop	r14
    3214:	df 90       	pop	r13
    3216:	cf 90       	pop	r12
    3218:	bf 90       	pop	r11
    321a:	af 90       	pop	r10
    321c:	08 95       	ret

0000321e <_ZN12PubSubClient8readByteEPh>:
    321e:	cf 92       	push	r12
    3220:	df 92       	push	r13
    3222:	ef 92       	push	r14
    3224:	ff 92       	push	r15
    3226:	0f 93       	push	r16
    3228:	1f 93       	push	r17
    322a:	cf 93       	push	r28
    322c:	df 93       	push	r29
    322e:	ec 01       	movw	r28, r24
    3230:	8b 01       	movw	r16, r22
    3232:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    3236:	6b 01       	movw	r12, r22
    3238:	7c 01       	movw	r14, r24
    323a:	8c 81       	ldd	r24, Y+4	; 0x04
    323c:	9d 81       	ldd	r25, Y+5	; 0x05
    323e:	dc 01       	movw	r26, r24
    3240:	ed 91       	ld	r30, X+
    3242:	fc 91       	ld	r31, X
    3244:	00 84       	ldd	r0, Z+8	; 0x08
    3246:	f1 85       	ldd	r31, Z+9	; 0x09
    3248:	e0 2d       	mov	r30, r0
    324a:	09 95       	icall
    324c:	89 2b       	or	r24, r25
    324e:	89 f4       	brne	.+34     	; 0x3272 <_ZN12PubSubClient8readByteEPh+0x54>
    3250:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <yield>
    3254:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	8c 19       	sub	r24, r12
    325e:	9d 09       	sbc	r25, r13
    3260:	ae 09       	sbc	r26, r14
    3262:	bf 09       	sbc	r27, r15
    3264:	88 39       	cpi	r24, 0x98	; 152
    3266:	9a 43       	sbci	r25, 0x3A	; 58
    3268:	a1 05       	cpc	r26, r1
    326a:	b1 05       	cpc	r27, r1
    326c:	30 f3       	brcs	.-52     	; 0x323a <_ZN12PubSubClient8readByteEPh+0x1c>
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	0c c0       	rjmp	.+24     	; 0x328a <_ZN12PubSubClient8readByteEPh+0x6c>
    3272:	8c 81       	ldd	r24, Y+4	; 0x04
    3274:	9d 81       	ldd	r25, Y+5	; 0x05
    3276:	dc 01       	movw	r26, r24
    3278:	ed 91       	ld	r30, X+
    327a:	fc 91       	ld	r31, X
    327c:	02 84       	ldd	r0, Z+10	; 0x0a
    327e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3280:	e0 2d       	mov	r30, r0
    3282:	09 95       	icall
    3284:	f8 01       	movw	r30, r16
    3286:	80 83       	st	Z, r24
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	ff 90       	pop	r15
    3294:	ef 90       	pop	r14
    3296:	df 90       	pop	r13
    3298:	cf 90       	pop	r12
    329a:	08 95       	ret

0000329c <_ZN12PubSubClient8readByteEPhPj>:
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	8a 01       	movw	r16, r20
    32a6:	fa 01       	movw	r30, r20
    32a8:	c0 81       	ld	r28, Z
    32aa:	d1 81       	ldd	r29, Z+1	; 0x01
    32ac:	6c 0f       	add	r22, r28
    32ae:	7d 1f       	adc	r23, r29
    32b0:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN12PubSubClient8readByteEPh>
    32b4:	88 23       	and	r24, r24
    32b6:	21 f0       	breq	.+8      	; 0x32c0 <_ZN12PubSubClient8readByteEPhPj+0x24>
    32b8:	21 96       	adiw	r28, 0x01	; 1
    32ba:	f8 01       	movw	r30, r16
    32bc:	d1 83       	std	Z+1, r29	; 0x01
    32be:	c0 83       	st	Z, r28
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	08 95       	ret

000032ca <_ZN12PubSubClient10readPacketEPh>:
    32ca:	4f 92       	push	r4
    32cc:	5f 92       	push	r5
    32ce:	6f 92       	push	r6
    32d0:	7f 92       	push	r7
    32d2:	8f 92       	push	r8
    32d4:	9f 92       	push	r9
    32d6:	af 92       	push	r10
    32d8:	bf 92       	push	r11
    32da:	cf 92       	push	r12
    32dc:	df 92       	push	r13
    32de:	ef 92       	push	r14
    32e0:	ff 92       	push	r15
    32e2:	0f 93       	push	r16
    32e4:	1f 93       	push	r17
    32e6:	cf 93       	push	r28
    32e8:	df 93       	push	r29
    32ea:	00 d0       	rcall	.+0      	; 0x32ec <_ZN12PubSubClient10readPacketEPh+0x22>
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <_ZN12PubSubClient10readPacketEPh+0x24>
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	8c 01       	movw	r16, r24
    32f4:	4b 01       	movw	r8, r22
    32f6:	1a 82       	std	Y+2, r1	; 0x02
    32f8:	19 82       	std	Y+1, r1	; 0x01
    32fa:	7c 01       	movw	r14, r24
    32fc:	26 e0       	ldi	r18, 0x06	; 6
    32fe:	e2 0e       	add	r14, r18
    3300:	f1 1c       	adc	r15, r1
    3302:	ae 01       	movw	r20, r28
    3304:	4f 5f       	subi	r20, 0xFF	; 255
    3306:	5f 4f       	sbci	r21, 0xFF	; 255
    3308:	b7 01       	movw	r22, r14
    330a:	0e 94 4e 19 	call	0x329c	; 0x329c <_ZN12PubSubClient8readByteEPhPj>
    330e:	88 23       	and	r24, r24
    3310:	f9 f0       	breq	.+62     	; 0x3350 <_ZN12PubSubClient10readPacketEPh+0x86>
    3312:	d8 01       	movw	r26, r16
    3314:	16 96       	adiw	r26, 0x06	; 6
    3316:	dc 90       	ld	r13, X
    3318:	1b 82       	std	Y+3, r1	; 0x03
    331a:	a1 2c       	mov	r10, r1
    331c:	b1 2c       	mov	r11, r1
    331e:	41 2c       	mov	r4, r1
    3320:	51 2c       	mov	r5, r1
    3322:	32 01       	movw	r6, r4
    3324:	43 94       	inc	r4
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	9a 81       	ldd	r25, Y+2	; 0x02
    332a:	05 97       	sbiw	r24, 0x05	; 5
    332c:	a1 f4       	brne	.+40     	; 0x3356 <_ZN12PubSubClient10readPacketEPh+0x8c>
    332e:	f8 01       	movw	r30, r16
    3330:	e1 56       	subi	r30, 0x61	; 97
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	8f ef       	ldi	r24, 0xFF	; 255
    3336:	9f ef       	ldi	r25, 0xFF	; 255
    3338:	91 83       	std	Z+1, r25	; 0x01
    333a:	80 83       	st	Z, r24
    333c:	f8 01       	movw	r30, r16
    333e:	84 81       	ldd	r24, Z+4	; 0x04
    3340:	95 81       	ldd	r25, Z+5	; 0x05
    3342:	dc 01       	movw	r26, r24
    3344:	ed 91       	ld	r30, X+
    3346:	fc 91       	ld	r31, X
    3348:	04 88       	ldd	r0, Z+20	; 0x14
    334a:	f5 89       	ldd	r31, Z+21	; 0x15
    334c:	e0 2d       	mov	r30, r0
    334e:	09 95       	icall
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	aa c0       	rjmp	.+340    	; 0x34aa <_ZN12PubSubClient10readPacketEPh+0x1e0>
    3356:	be 01       	movw	r22, r28
    3358:	6d 5f       	subi	r22, 0xFD	; 253
    335a:	7f 4f       	sbci	r23, 0xFF	; 255
    335c:	c8 01       	movw	r24, r16
    335e:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN12PubSubClient8readByteEPh>
    3362:	88 23       	and	r24, r24
    3364:	a9 f3       	breq	.-22     	; 0x3350 <_ZN12PubSubClient10readPacketEPh+0x86>
    3366:	29 81       	ldd	r18, Y+1	; 0x01
    3368:	3a 81       	ldd	r19, Y+2	; 0x02
    336a:	c9 01       	movw	r24, r18
    336c:	01 96       	adiw	r24, 0x01	; 1
    336e:	9a 83       	std	Y+2, r25	; 0x02
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	4b 81       	ldd	r20, Y+3	; 0x03
    3374:	f8 01       	movw	r30, r16
    3376:	e2 0f       	add	r30, r18
    3378:	f3 1f       	adc	r31, r19
    337a:	46 83       	std	Z+6, r20	; 0x06
    337c:	24 2f       	mov	r18, r20
    337e:	2f 77       	andi	r18, 0x7F	; 127
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	24 9d       	mul	r18, r4
    3384:	b0 01       	movw	r22, r0
    3386:	25 9d       	mul	r18, r5
    3388:	70 0d       	add	r23, r0
    338a:	34 9d       	mul	r19, r4
    338c:	70 0d       	add	r23, r0
    338e:	11 24       	eor	r1, r1
    3390:	a6 0e       	add	r10, r22
    3392:	b7 1e       	adc	r11, r23
    3394:	97 e0       	ldi	r25, 0x07	; 7
    3396:	44 0c       	add	r4, r4
    3398:	55 1c       	adc	r5, r5
    339a:	66 1c       	adc	r6, r6
    339c:	77 1c       	adc	r7, r7
    339e:	9a 95       	dec	r25
    33a0:	d1 f7       	brne	.-12     	; 0x3396 <_ZN12PubSubClient10readPacketEPh+0xcc>
    33a2:	47 fd       	sbrc	r20, 7
    33a4:	c0 cf       	rjmp	.-128    	; 0x3326 <_ZN12PubSubClient10readPacketEPh+0x5c>
    33a6:	bd 2d       	mov	r27, r13
    33a8:	b0 7f       	andi	r27, 0xF0	; 240
    33aa:	bc 83       	std	Y+4, r27	; 0x04
    33ac:	81 50       	subi	r24, 0x01	; 1
    33ae:	f4 01       	movw	r30, r8
    33b0:	80 83       	st	Z, r24
    33b2:	b0 33       	cpi	r27, 0x30	; 48
    33b4:	39 f5       	brne	.+78     	; 0x3404 <_ZN12PubSubClient10readPacketEPh+0x13a>
    33b6:	ae 01       	movw	r20, r28
    33b8:	4f 5f       	subi	r20, 0xFF	; 255
    33ba:	5f 4f       	sbci	r21, 0xFF	; 255
    33bc:	b7 01       	movw	r22, r14
    33be:	c8 01       	movw	r24, r16
    33c0:	0e 94 4e 19 	call	0x329c	; 0x329c <_ZN12PubSubClient8readByteEPhPj>
    33c4:	88 23       	and	r24, r24
    33c6:	21 f2       	breq	.-120    	; 0x3350 <_ZN12PubSubClient10readPacketEPh+0x86>
    33c8:	ae 01       	movw	r20, r28
    33ca:	4f 5f       	subi	r20, 0xFF	; 255
    33cc:	5f 4f       	sbci	r21, 0xFF	; 255
    33ce:	b7 01       	movw	r22, r14
    33d0:	c8 01       	movw	r24, r16
    33d2:	0e 94 4e 19 	call	0x329c	; 0x329c <_ZN12PubSubClient8readByteEPhPj>
    33d6:	88 23       	and	r24, r24
    33d8:	09 f4       	brne	.+2      	; 0x33dc <_ZN12PubSubClient10readPacketEPh+0x112>
    33da:	ba cf       	rjmp	.-140    	; 0x3350 <_ZN12PubSubClient10readPacketEPh+0x86>
    33dc:	d4 01       	movw	r26, r8
    33de:	8c 91       	ld	r24, X
    33e0:	f8 01       	movw	r30, r16
    33e2:	e8 0f       	add	r30, r24
    33e4:	f1 1d       	adc	r31, r1
    33e6:	e7 80       	ldd	r14, Z+7	; 0x07
    33e8:	f1 2c       	mov	r15, r1
    33ea:	fe 2c       	mov	r15, r14
    33ec:	ee 24       	eor	r14, r14
    33ee:	80 85       	ldd	r24, Z+8	; 0x08
    33f0:	e8 0e       	add	r14, r24
    33f2:	f1 1c       	adc	r15, r1
    33f4:	f8 01       	movw	r30, r16
    33f6:	86 81       	ldd	r24, Z+6	; 0x06
    33f8:	81 ff       	sbrs	r24, 1
    33fa:	08 c0       	rjmp	.+16     	; 0x340c <_ZN12PubSubClient10readPacketEPh+0x142>
    33fc:	f2 e0       	ldi	r31, 0x02	; 2
    33fe:	ef 0e       	add	r14, r31
    3400:	f1 1c       	adc	r15, r1
    3402:	04 c0       	rjmp	.+8      	; 0x340c <_ZN12PubSubClient10readPacketEPh+0x142>
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	e1 2c       	mov	r14, r1
    3408:	f1 2c       	mov	r15, r1
    340a:	01 c0       	rjmp	.+2      	; 0x340e <_ZN12PubSubClient10readPacketEPh+0x144>
    340c:	82 e0       	ldi	r24, 0x02	; 2
    340e:	c8 2e       	mov	r12, r24
    3410:	d1 2c       	mov	r13, r1
    3412:	38 01       	movw	r6, r16
    3414:	2d e9       	ldi	r18, 0x9D	; 157
    3416:	62 0e       	add	r6, r18
    3418:	71 1c       	adc	r7, r1
    341a:	ca 14       	cp	r12, r10
    341c:	db 04       	cpc	r13, r11
    341e:	a8 f5       	brcc	.+106    	; 0x348a <_ZN12PubSubClient10readPacketEPh+0x1c0>
    3420:	be 01       	movw	r22, r28
    3422:	6d 5f       	subi	r22, 0xFD	; 253
    3424:	7f 4f       	sbci	r23, 0xFF	; 255
    3426:	c8 01       	movw	r24, r16
    3428:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN12PubSubClient8readByteEPh>
    342c:	88 23       	and	r24, r24
    342e:	09 f4       	brne	.+2      	; 0x3432 <_ZN12PubSubClient10readPacketEPh+0x168>
    3430:	8f cf       	rjmp	.-226    	; 0x3350 <_ZN12PubSubClient10readPacketEPh+0x86>
    3432:	d3 01       	movw	r26, r6
    3434:	8d 91       	ld	r24, X+
    3436:	9c 91       	ld	r25, X
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	b1 f0       	breq	.+44     	; 0x3468 <_ZN12PubSubClient10readPacketEPh+0x19e>
    343c:	bc 81       	ldd	r27, Y+4	; 0x04
    343e:	b0 33       	cpi	r27, 0x30	; 48
    3440:	99 f4       	brne	.+38     	; 0x3468 <_ZN12PubSubClient10readPacketEPh+0x19e>
    3442:	29 81       	ldd	r18, Y+1	; 0x01
    3444:	3a 81       	ldd	r19, Y+2	; 0x02
    3446:	22 50       	subi	r18, 0x02	; 2
    3448:	31 09       	sbc	r19, r1
    344a:	f4 01       	movw	r30, r8
    344c:	40 81       	ld	r20, Z
    344e:	24 1b       	sub	r18, r20
    3450:	31 09       	sbc	r19, r1
    3452:	e2 16       	cp	r14, r18
    3454:	f3 06       	cpc	r15, r19
    3456:	40 f4       	brcc	.+16     	; 0x3468 <_ZN12PubSubClient10readPacketEPh+0x19e>
    3458:	dc 01       	movw	r26, r24
    345a:	ed 91       	ld	r30, X+
    345c:	fc 91       	ld	r31, X
    345e:	01 90       	ld	r0, Z+
    3460:	f0 81       	ld	r31, Z
    3462:	e0 2d       	mov	r30, r0
    3464:	6b 81       	ldd	r22, Y+3	; 0x03
    3466:	09 95       	icall
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	9a 81       	ldd	r25, Y+2	; 0x02
    346c:	80 38       	cpi	r24, 0x80	; 128
    346e:	91 05       	cpc	r25, r1
    3470:	28 f4       	brcc	.+10     	; 0x347c <_ZN12PubSubClient10readPacketEPh+0x1b2>
    3472:	2b 81       	ldd	r18, Y+3	; 0x03
    3474:	f8 01       	movw	r30, r16
    3476:	e8 0f       	add	r30, r24
    3478:	f9 1f       	adc	r31, r25
    347a:	26 83       	std	Z+6, r18	; 0x06
    347c:	01 96       	adiw	r24, 0x01	; 1
    347e:	9a 83       	std	Y+2, r25	; 0x02
    3480:	89 83       	std	Y+1, r24	; 0x01
    3482:	bf ef       	ldi	r27, 0xFF	; 255
    3484:	cb 1a       	sub	r12, r27
    3486:	db 0a       	sbc	r13, r27
    3488:	c8 cf       	rjmp	.-112    	; 0x341a <_ZN12PubSubClient10readPacketEPh+0x150>
    348a:	f8 01       	movw	r30, r16
    348c:	e3 56       	subi	r30, 0x63	; 99
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	89 2b       	or	r24, r25
    3496:	39 f4       	brne	.+14     	; 0x34a6 <_ZN12PubSubClient10readPacketEPh+0x1dc>
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	9a 81       	ldd	r25, Y+2	; 0x02
    349c:	81 38       	cpi	r24, 0x81	; 129
    349e:	91 05       	cpc	r25, r1
    34a0:	10 f0       	brcs	.+4      	; 0x34a6 <_ZN12PubSubClient10readPacketEPh+0x1dc>
    34a2:	1a 82       	std	Y+2, r1	; 0x02
    34a4:	19 82       	std	Y+1, r1	; 0x01
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	9a 81       	ldd	r25, Y+2	; 0x02
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	0f 90       	pop	r0
    34b2:	df 91       	pop	r29
    34b4:	cf 91       	pop	r28
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	ff 90       	pop	r15
    34bc:	ef 90       	pop	r14
    34be:	df 90       	pop	r13
    34c0:	cf 90       	pop	r12
    34c2:	bf 90       	pop	r11
    34c4:	af 90       	pop	r10
    34c6:	9f 90       	pop	r9
    34c8:	8f 90       	pop	r8
    34ca:	7f 90       	pop	r7
    34cc:	6f 90       	pop	r6
    34ce:	5f 90       	pop	r5
    34d0:	4f 90       	pop	r4
    34d2:	08 95       	ret

000034d4 <_ZN12PubSubClient11buildHeaderEhPhj>:
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	00 d0       	rcall	.+0      	; 0x34da <_ZN12PubSubClient11buildHeaderEhPhj+0x6>
    34da:	00 d0       	rcall	.+0      	; 0x34dc <_ZN12PubSubClient11buildHeaderEhPhj+0x8>
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	92 2f       	mov	r25, r18
    34e4:	9f 77       	andi	r25, 0x7F	; 127
    34e6:	22 0f       	add	r18, r18
    34e8:	23 2f       	mov	r18, r19
    34ea:	22 1f       	adc	r18, r18
    34ec:	33 0b       	sbc	r19, r19
    34ee:	31 95       	neg	r19
    34f0:	21 15       	cp	r18, r1
    34f2:	31 05       	cpc	r19, r1
    34f4:	09 f0       	breq	.+2      	; 0x34f8 <_ZN12PubSubClient11buildHeaderEhPhj+0x24>
    34f6:	90 68       	ori	r25, 0x80	; 128
    34f8:	e1 e0       	ldi	r30, 0x01	; 1
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	ec 0f       	add	r30, r28
    34fe:	fd 1f       	adc	r31, r29
    3500:	e8 0f       	add	r30, r24
    3502:	f1 1d       	adc	r31, r1
    3504:	90 83       	st	Z, r25
    3506:	8f 5f       	subi	r24, 0xFF	; 255
    3508:	21 15       	cp	r18, r1
    350a:	31 05       	cpc	r19, r1
    350c:	51 f7       	brne	.-44     	; 0x34e2 <_ZN12PubSubClient11buildHeaderEhPhj+0xe>
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	fa 01       	movw	r30, r20
    3512:	e8 1b       	sub	r30, r24
    3514:	f9 0b       	sbc	r31, r25
    3516:	64 83       	std	Z+4, r22	; 0x04
    3518:	de 01       	movw	r26, r28
    351a:	11 96       	adiw	r26, 0x01	; 1
    351c:	fa 01       	movw	r30, r20
    351e:	e8 1b       	sub	r30, r24
    3520:	f9 0b       	sbc	r31, r25
    3522:	35 96       	adiw	r30, 0x05	; 5
    3524:	4b 5f       	subi	r20, 0xFB	; 251
    3526:	5f 4f       	sbci	r21, 0xFF	; 255
    3528:	e4 17       	cp	r30, r20
    352a:	f5 07       	cpc	r31, r21
    352c:	19 f0       	breq	.+6      	; 0x3534 <_ZN12PubSubClient11buildHeaderEhPhj+0x60>
    352e:	2d 91       	ld	r18, X+
    3530:	21 93       	st	Z+, r18
    3532:	fa cf       	rjmp	.-12     	; 0x3528 <_ZN12PubSubClient11buildHeaderEhPhj+0x54>
    3534:	01 96       	adiw	r24, 0x01	; 1
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	08 95       	ret

00003544 <_ZN12PubSubClient5writeEhPhj>:
    3544:	ef 92       	push	r14
    3546:	ff 92       	push	r15
    3548:	0f 93       	push	r16
    354a:	1f 93       	push	r17
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	7c 01       	movw	r14, r24
    3552:	ea 01       	movw	r28, r20
    3554:	89 01       	movw	r16, r18
    3556:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <_ZN12PubSubClient11buildHeaderEhPhj>
    355a:	9c 01       	movw	r18, r24
    355c:	d7 01       	movw	r26, r14
    355e:	14 96       	adiw	r26, 0x04	; 4
    3560:	8d 91       	ld	r24, X+
    3562:	9c 91       	ld	r25, X
    3564:	15 97       	sbiw	r26, 0x05	; 5
    3566:	33 27       	eor	r19, r19
    3568:	02 0f       	add	r16, r18
    356a:	13 1f       	adc	r17, r19
    356c:	be 01       	movw	r22, r28
    356e:	62 1b       	sub	r22, r18
    3570:	73 0b       	sbc	r23, r19
    3572:	6b 5f       	subi	r22, 0xFB	; 251
    3574:	7f 4f       	sbci	r23, 0xFF	; 255
    3576:	dc 01       	movw	r26, r24
    3578:	ed 91       	ld	r30, X+
    357a:	fc 91       	ld	r31, X
    357c:	02 80       	ldd	r0, Z+2	; 0x02
    357e:	f3 81       	ldd	r31, Z+3	; 0x03
    3580:	e0 2d       	mov	r30, r0
    3582:	a8 01       	movw	r20, r16
    3584:	09 95       	icall
    3586:	ec 01       	movw	r28, r24
    3588:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    358c:	f7 01       	movw	r30, r14
    358e:	e8 57       	subi	r30, 0x78	; 120
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	60 83       	st	Z, r22
    3594:	71 83       	std	Z+1, r23	; 0x01
    3596:	82 83       	std	Z+2, r24	; 0x02
    3598:	93 83       	std	Z+3, r25	; 0x03
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	0c 17       	cp	r16, r28
    359e:	1d 07       	cpc	r17, r29
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <_ZN12PubSubClient5writeEhPhj+0x60>
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	0f 91       	pop	r16
    35ac:	ff 90       	pop	r15
    35ae:	ef 90       	pop	r14
    35b0:	08 95       	ret

000035b2 <_ZN12PubSubClient11writeStringEPKcPhj>:
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	f9 01       	movw	r30, r18
    35b8:	32 96       	adiw	r30, 0x02	; 2
    35ba:	e4 0f       	add	r30, r20
    35bc:	f5 1f       	adc	r31, r21
    35be:	eb 01       	movw	r28, r22
    35c0:	de 01       	movw	r26, r28
    35c2:	a6 1b       	sub	r26, r22
    35c4:	b7 0b       	sbc	r27, r23
    35c6:	cf 01       	movw	r24, r30
    35c8:	84 1b       	sub	r24, r20
    35ca:	95 0b       	sbc	r25, r21
    35cc:	29 91       	ld	r18, Y+
    35ce:	22 23       	and	r18, r18
    35d0:	11 f0       	breq	.+4      	; 0x35d6 <_ZN12PubSubClient11writeStringEPKcPhj+0x24>
    35d2:	21 93       	st	Z+, r18
    35d4:	f5 cf       	rjmp	.-22     	; 0x35c0 <_ZN12PubSubClient11writeStringEPKcPhj+0xe>
    35d6:	9c 01       	movw	r18, r24
    35d8:	2a 1b       	sub	r18, r26
    35da:	3b 0b       	sbc	r19, r27
    35dc:	42 0f       	add	r20, r18
    35de:	53 1f       	adc	r21, r19
    35e0:	fa 01       	movw	r30, r20
    35e2:	32 97       	sbiw	r30, 0x02	; 2
    35e4:	b0 83       	st	Z, r27
    35e6:	31 96       	adiw	r30, 0x01	; 1
    35e8:	a0 83       	st	Z, r26
    35ea:	df 91       	pop	r29
    35ec:	cf 91       	pop	r28
    35ee:	08 95       	ret

000035f0 <_ZN12PubSubClient9connectedEv>:
    35f0:	1f 93       	push	r17
    35f2:	cf 93       	push	r28
    35f4:	df 93       	push	r29
    35f6:	fc 01       	movw	r30, r24
    35f8:	a4 81       	ldd	r26, Z+4	; 0x04
    35fa:	b5 81       	ldd	r27, Z+5	; 0x05
    35fc:	10 97       	sbiw	r26, 0x00	; 0
    35fe:	59 f1       	breq	.+86     	; 0x3656 <_ZN12PubSubClient9connectedEv+0x66>
    3600:	ec 01       	movw	r28, r24
    3602:	ed 91       	ld	r30, X+
    3604:	fc 91       	ld	r31, X
    3606:	11 97       	sbiw	r26, 0x01	; 1
    3608:	06 88       	ldd	r0, Z+22	; 0x16
    360a:	f7 89       	ldd	r31, Z+23	; 0x17
    360c:	e0 2d       	mov	r30, r0
    360e:	cd 01       	movw	r24, r26
    3610:	09 95       	icall
    3612:	11 e0       	ldi	r17, 0x01	; 1
    3614:	81 11       	cpse	r24, r1
    3616:	20 c0       	rjmp	.+64     	; 0x3658 <_ZN12PubSubClient9connectedEv+0x68>
    3618:	10 e0       	ldi	r17, 0x00	; 0
    361a:	fe 01       	movw	r30, r28
    361c:	e1 56       	subi	r30, 0x61	; 97
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	80 81       	ld	r24, Z
    3622:	91 81       	ldd	r25, Z+1	; 0x01
    3624:	89 2b       	or	r24, r25
    3626:	c1 f4       	brne	.+48     	; 0x3658 <_ZN12PubSubClient9connectedEv+0x68>
    3628:	8d ef       	ldi	r24, 0xFD	; 253
    362a:	9f ef       	ldi	r25, 0xFF	; 255
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	80 83       	st	Z, r24
    3630:	8c 81       	ldd	r24, Y+4	; 0x04
    3632:	9d 81       	ldd	r25, Y+5	; 0x05
    3634:	dc 01       	movw	r26, r24
    3636:	ed 91       	ld	r30, X+
    3638:	fc 91       	ld	r31, X
    363a:	06 80       	ldd	r0, Z+6	; 0x06
    363c:	f7 81       	ldd	r31, Z+7	; 0x07
    363e:	e0 2d       	mov	r30, r0
    3640:	09 95       	icall
    3642:	8c 81       	ldd	r24, Y+4	; 0x04
    3644:	9d 81       	ldd	r25, Y+5	; 0x05
    3646:	dc 01       	movw	r26, r24
    3648:	ed 91       	ld	r30, X+
    364a:	fc 91       	ld	r31, X
    364c:	04 88       	ldd	r0, Z+20	; 0x14
    364e:	f5 89       	ldd	r31, Z+21	; 0x15
    3650:	e0 2d       	mov	r30, r0
    3652:	09 95       	icall
    3654:	01 c0       	rjmp	.+2      	; 0x3658 <_ZN12PubSubClient9connectedEv+0x68>
    3656:	10 e0       	ldi	r17, 0x00	; 0
    3658:	81 2f       	mov	r24, r17
    365a:	df 91       	pop	r29
    365c:	cf 91       	pop	r28
    365e:	1f 91       	pop	r17
    3660:	08 95       	ret

00003662 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b>:
    3662:	2f 92       	push	r2
    3664:	3f 92       	push	r3
    3666:	4f 92       	push	r4
    3668:	5f 92       	push	r5
    366a:	6f 92       	push	r6
    366c:	7f 92       	push	r7
    366e:	8f 92       	push	r8
    3670:	9f 92       	push	r9
    3672:	af 92       	push	r10
    3674:	bf 92       	push	r11
    3676:	cf 92       	push	r12
    3678:	df 92       	push	r13
    367a:	ef 92       	push	r14
    367c:	ff 92       	push	r15
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	2e 97       	sbiw	r28, 0x0e	; 14
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	f8 94       	cli
    3690:	de bf       	out	0x3e, r29	; 62
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	cd bf       	out	0x3d, r28	; 61
    3696:	3c 01       	movw	r6, r24
    3698:	7a 87       	std	Y+10, r23	; 0x0a
    369a:	69 87       	std	Y+9, r22	; 0x09
    369c:	1a 01       	movw	r2, r20
    369e:	29 01       	movw	r4, r18
    36a0:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN12PubSubClient9connectedEv>
    36a4:	d8 2e       	mov	r13, r24
    36a6:	81 11       	cpse	r24, r1
    36a8:	74 c1       	rjmp	.+744    	; 0x3992 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x330>
    36aa:	f3 01       	movw	r30, r6
    36ac:	e7 56       	subi	r30, 0x67	; 103
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	d3 01       	movw	r26, r6
    36b6:	14 96       	adiw	r26, 0x04	; 4
    36b8:	8d 91       	ld	r24, X+
    36ba:	9c 91       	ld	r25, X
    36bc:	15 97       	sbiw	r26, 0x05	; 5
    36be:	a5 56       	subi	r26, 0x65	; 101
    36c0:	bf 4f       	sbci	r27, 0xFF	; 255
    36c2:	61 15       	cp	r22, r1
    36c4:	71 05       	cpc	r23, r1
    36c6:	49 f0       	breq	.+18     	; 0x36da <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x78>
    36c8:	4d 91       	ld	r20, X+
    36ca:	5c 91       	ld	r21, X
    36cc:	dc 01       	movw	r26, r24
    36ce:	ed 91       	ld	r30, X+
    36d0:	fc 91       	ld	r31, X
    36d2:	00 88       	ldd	r0, Z+16	; 0x10
    36d4:	f1 89       	ldd	r31, Z+17	; 0x11
    36d6:	e0 2d       	mov	r30, r0
    36d8:	22 c0       	rjmp	.+68     	; 0x371e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0xbc>
    36da:	fc 01       	movw	r30, r24
    36dc:	20 81       	ld	r18, Z
    36de:	31 81       	ldd	r19, Z+1	; 0x01
    36e0:	f9 01       	movw	r30, r18
    36e2:	06 84       	ldd	r0, Z+14	; 0x0e
    36e4:	f7 85       	ldd	r31, Z+15	; 0x0f
    36e6:	e0 2d       	mov	r30, r0
    36e8:	fe 87       	std	Y+14, r31	; 0x0e
    36ea:	ed 87       	std	Y+13, r30	; 0x0d
    36ec:	ed 91       	ld	r30, X+
    36ee:	fc 91       	ld	r31, X
    36f0:	2f ec       	ldi	r18, 0xCF	; 207
    36f2:	32 e0       	ldi	r19, 0x02	; 2
    36f4:	3a 83       	std	Y+2, r19	; 0x02
    36f6:	29 83       	std	Y+1, r18	; 0x01
    36f8:	d3 01       	movw	r26, r6
    36fa:	ad 56       	subi	r26, 0x6D	; 109
    36fc:	bf 4f       	sbci	r27, 0xFF	; 255
    36fe:	12 96       	adiw	r26, 0x02	; 2
    3700:	4d 91       	ld	r20, X+
    3702:	5d 91       	ld	r21, X+
    3704:	6d 91       	ld	r22, X+
    3706:	7c 91       	ld	r23, X
    3708:	15 97       	sbiw	r26, 0x05	; 5
    370a:	4b 83       	std	Y+3, r20	; 0x03
    370c:	5c 83       	std	Y+4, r21	; 0x04
    370e:	6d 83       	std	Y+5, r22	; 0x05
    3710:	7e 83       	std	Y+6, r23	; 0x06
    3712:	af 01       	movw	r20, r30
    3714:	be 01       	movw	r22, r28
    3716:	6f 5f       	subi	r22, 0xFF	; 255
    3718:	7f 4f       	sbci	r23, 0xFF	; 255
    371a:	ed 85       	ldd	r30, Y+13	; 0x0d
    371c:	fe 85       	ldd	r31, Y+14	; 0x0e
    371e:	09 95       	icall
    3720:	f3 01       	movw	r30, r6
    3722:	81 30       	cpi	r24, 0x01	; 1
    3724:	91 05       	cpc	r25, r1
    3726:	09 f0       	breq	.+2      	; 0x372a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0xc8>
    3728:	2e c1       	rjmp	.+604    	; 0x3986 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x324>
    372a:	ea 57       	subi	r30, 0x7A	; 122
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	91 83       	std	Z+1, r25	; 0x01
    3730:	80 83       	st	Z, r24
    3732:	87 e0       	ldi	r24, 0x07	; 7
    3734:	ed eb       	ldi	r30, 0xBD	; 189
    3736:	f1 e0       	ldi	r31, 0x01	; 1
    3738:	de 01       	movw	r26, r28
    373a:	11 96       	adiw	r26, 0x01	; 1
    373c:	01 90       	ld	r0, Z+
    373e:	0d 92       	st	X+, r0
    3740:	8a 95       	dec	r24
    3742:	e1 f7       	brne	.-8      	; 0x373c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0xda>
    3744:	fe 01       	movw	r30, r28
    3746:	31 96       	adiw	r30, 0x01	; 1
    3748:	d3 01       	movw	r26, r6
    374a:	1b 96       	adiw	r26, 0x0b	; 11
    374c:	c3 01       	movw	r24, r6
    374e:	42 96       	adiw	r24, 0x12	; 18
    3750:	21 91       	ld	r18, Z+
    3752:	2d 93       	st	X+, r18
    3754:	a8 17       	cp	r26, r24
    3756:	b9 07       	cpc	r27, r25
    3758:	d9 f7       	brne	.-10     	; 0x3750 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0xee>
    375a:	01 15       	cp	r16, r1
    375c:	11 05       	cpc	r17, r1
    375e:	59 f0       	breq	.+22     	; 0x3776 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x114>
    3760:	f0 e2       	ldi	r31, 0x20	; 32
    3762:	cf 9e       	mul	r12, r31
    3764:	c0 01       	movw	r24, r0
    3766:	11 24       	eor	r1, r1
    3768:	84 60       	ori	r24, 0x04	; 4
    376a:	28 e0       	ldi	r18, 0x08	; 8
    376c:	e2 9e       	mul	r14, r18
    376e:	70 01       	movw	r14, r0
    3770:	11 24       	eor	r1, r1
    3772:	8e 29       	or	r24, r14
    3774:	01 c0       	rjmp	.+2      	; 0x3778 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x116>
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	81 10       	cpse	r8, r1
    377a:	82 60       	ori	r24, 0x02	; 2
    377c:	21 14       	cp	r2, r1
    377e:	31 04       	cpc	r3, r1
    3780:	31 f0       	breq	.+12     	; 0x378e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x12c>
    3782:	41 14       	cp	r4, r1
    3784:	51 04       	cpc	r5, r1
    3786:	11 f4       	brne	.+4      	; 0x378c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x12a>
    3788:	80 68       	ori	r24, 0x80	; 128
    378a:	01 c0       	rjmp	.+2      	; 0x378e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x12c>
    378c:	80 6c       	ori	r24, 0xC0	; 192
    378e:	d3 01       	movw	r26, r6
    3790:	52 96       	adiw	r26, 0x12	; 18
    3792:	8c 93       	st	X, r24
    3794:	52 97       	sbiw	r26, 0x12	; 18
    3796:	53 96       	adiw	r26, 0x13	; 19
    3798:	1c 92       	st	X, r1
    379a:	53 97       	sbiw	r26, 0x13	; 19
    379c:	8f e0       	ldi	r24, 0x0F	; 15
    379e:	54 96       	adiw	r26, 0x14	; 20
    37a0:	8c 93       	st	X, r24
    37a2:	54 97       	sbiw	r26, 0x14	; 20
    37a4:	e9 85       	ldd	r30, Y+9	; 0x09
    37a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    37a8:	01 90       	ld	r0, Z+
    37aa:	00 20       	and	r0, r0
    37ac:	e9 f7       	brne	.-6      	; 0x37a8 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x146>
    37ae:	cf 01       	movw	r24, r30
    37b0:	29 85       	ldd	r18, Y+9	; 0x09
    37b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    37b4:	82 1b       	sub	r24, r18
    37b6:	93 0b       	sbc	r25, r19
    37b8:	40 96       	adiw	r24, 0x10	; 16
    37ba:	81 38       	cpi	r24, 0x81	; 129
    37bc:	91 05       	cpc	r25, r1
    37be:	08 f0       	brcs	.+2      	; 0x37c2 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x160>
    37c0:	ac c0       	rjmp	.+344    	; 0x391a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x2b8>
    37c2:	73 01       	movw	r14, r6
    37c4:	b6 e0       	ldi	r27, 0x06	; 6
    37c6:	eb 0e       	add	r14, r27
    37c8:	f1 1c       	adc	r15, r1
    37ca:	2f e0       	ldi	r18, 0x0F	; 15
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	a7 01       	movw	r20, r14
    37d0:	69 85       	ldd	r22, Y+9	; 0x09
    37d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    37d4:	c3 01       	movw	r24, r6
    37d6:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN12PubSubClient11writeStringEPKcPhj>
    37da:	01 15       	cp	r16, r1
    37dc:	11 05       	cpc	r17, r1
    37de:	51 f1       	breq	.+84     	; 0x3834 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x1d2>
    37e0:	f8 01       	movw	r30, r16
    37e2:	01 90       	ld	r0, Z+
    37e4:	00 20       	and	r0, r0
    37e6:	e9 f7       	brne	.-6      	; 0x37e2 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x180>
    37e8:	31 97       	sbiw	r30, 0x01	; 1
    37ea:	e0 1b       	sub	r30, r16
    37ec:	f1 0b       	sbc	r31, r17
    37ee:	9c 01       	movw	r18, r24
    37f0:	2e 5f       	subi	r18, 0xFE	; 254
    37f2:	3f 4f       	sbci	r19, 0xFF	; 255
    37f4:	e2 0f       	add	r30, r18
    37f6:	f3 1f       	adc	r31, r19
    37f8:	e1 38       	cpi	r30, 0x81	; 129
    37fa:	f1 05       	cpc	r31, r1
    37fc:	08 f0       	brcs	.+2      	; 0x3800 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x19e>
    37fe:	b8 c0       	rjmp	.+368    	; 0x3970 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x30e>
    3800:	9c 01       	movw	r18, r24
    3802:	a7 01       	movw	r20, r14
    3804:	b8 01       	movw	r22, r16
    3806:	c3 01       	movw	r24, r6
    3808:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN12PubSubClient11writeStringEPKcPhj>
    380c:	f5 01       	movw	r30, r10
    380e:	01 90       	ld	r0, Z+
    3810:	00 20       	and	r0, r0
    3812:	e9 f7       	brne	.-6      	; 0x380e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x1ac>
    3814:	31 97       	sbiw	r30, 0x01	; 1
    3816:	ea 19       	sub	r30, r10
    3818:	fb 09       	sbc	r31, r11
    381a:	e8 0f       	add	r30, r24
    381c:	f9 1f       	adc	r31, r25
    381e:	32 96       	adiw	r30, 0x02	; 2
    3820:	e1 38       	cpi	r30, 0x81	; 129
    3822:	f1 05       	cpc	r31, r1
    3824:	08 f0       	brcs	.+2      	; 0x3828 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x1c6>
    3826:	a4 c0       	rjmp	.+328    	; 0x3970 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x30e>
    3828:	9c 01       	movw	r18, r24
    382a:	a7 01       	movw	r20, r14
    382c:	b5 01       	movw	r22, r10
    382e:	c3 01       	movw	r24, r6
    3830:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN12PubSubClient11writeStringEPKcPhj>
    3834:	21 14       	cp	r2, r1
    3836:	31 04       	cpc	r3, r1
    3838:	79 f1       	breq	.+94     	; 0x3898 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x236>
    383a:	f1 01       	movw	r30, r2
    383c:	01 90       	ld	r0, Z+
    383e:	00 20       	and	r0, r0
    3840:	e9 f7       	brne	.-6      	; 0x383c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x1da>
    3842:	31 97       	sbiw	r30, 0x01	; 1
    3844:	e2 19       	sub	r30, r2
    3846:	f3 09       	sbc	r31, r3
    3848:	9c 01       	movw	r18, r24
    384a:	2e 5f       	subi	r18, 0xFE	; 254
    384c:	3f 4f       	sbci	r19, 0xFF	; 255
    384e:	e2 0f       	add	r30, r18
    3850:	f3 1f       	adc	r31, r19
    3852:	e1 38       	cpi	r30, 0x81	; 129
    3854:	f1 05       	cpc	r31, r1
    3856:	08 f0       	brcs	.+2      	; 0x385a <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x1f8>
    3858:	8b c0       	rjmp	.+278    	; 0x3970 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x30e>
    385a:	9c 01       	movw	r18, r24
    385c:	a7 01       	movw	r20, r14
    385e:	b1 01       	movw	r22, r2
    3860:	c3 01       	movw	r24, r6
    3862:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN12PubSubClient11writeStringEPKcPhj>
    3866:	41 14       	cp	r4, r1
    3868:	51 04       	cpc	r5, r1
    386a:	b1 f0       	breq	.+44     	; 0x3898 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x236>
    386c:	f2 01       	movw	r30, r4
    386e:	01 90       	ld	r0, Z+
    3870:	00 20       	and	r0, r0
    3872:	e9 f7       	brne	.-6      	; 0x386e <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x20c>
    3874:	31 97       	sbiw	r30, 0x01	; 1
    3876:	e4 19       	sub	r30, r4
    3878:	f5 09       	sbc	r31, r5
    387a:	9c 01       	movw	r18, r24
    387c:	2e 5f       	subi	r18, 0xFE	; 254
    387e:	3f 4f       	sbci	r19, 0xFF	; 255
    3880:	e2 0f       	add	r30, r18
    3882:	f3 1f       	adc	r31, r19
    3884:	e1 38       	cpi	r30, 0x81	; 129
    3886:	f1 05       	cpc	r31, r1
    3888:	08 f0       	brcs	.+2      	; 0x388c <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x22a>
    388a:	72 c0       	rjmp	.+228    	; 0x3970 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x30e>
    388c:	9c 01       	movw	r18, r24
    388e:	a7 01       	movw	r20, r14
    3890:	b2 01       	movw	r22, r4
    3892:	c3 01       	movw	r24, r6
    3894:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN12PubSubClient11writeStringEPKcPhj>
    3898:	9c 01       	movw	r18, r24
    389a:	25 50       	subi	r18, 0x05	; 5
    389c:	31 09       	sbc	r19, r1
    389e:	a7 01       	movw	r20, r14
    38a0:	60 e1       	ldi	r22, 0x10	; 16
    38a2:	c3 01       	movw	r24, r6
    38a4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_ZN12PubSubClient5writeEhPhj>
    38a8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    38ac:	f3 01       	movw	r30, r6
    38ae:	e8 57       	subi	r30, 0x78	; 120
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	60 83       	st	Z, r22
    38b4:	71 83       	std	Z+1, r23	; 0x01
    38b6:	82 83       	std	Z+2, r24	; 0x02
    38b8:	93 83       	std	Z+3, r25	; 0x03
    38ba:	83 01       	movw	r16, r6
    38bc:	04 57       	subi	r16, 0x74	; 116
    38be:	1f 4f       	sbci	r17, 0xFF	; 255
    38c0:	f8 01       	movw	r30, r16
    38c2:	60 83       	st	Z, r22
    38c4:	71 83       	std	Z+1, r23	; 0x01
    38c6:	82 83       	std	Z+2, r24	; 0x02
    38c8:	93 83       	std	Z+3, r25	; 0x03
    38ca:	d3 01       	movw	r26, r6
    38cc:	14 96       	adiw	r26, 0x04	; 4
    38ce:	8d 91       	ld	r24, X+
    38d0:	9c 91       	ld	r25, X
    38d2:	15 97       	sbiw	r26, 0x05	; 5
    38d4:	dc 01       	movw	r26, r24
    38d6:	ed 91       	ld	r30, X+
    38d8:	fc 91       	ld	r31, X
    38da:	00 84       	ldd	r0, Z+8	; 0x08
    38dc:	f1 85       	ldd	r31, Z+9	; 0x09
    38de:	e0 2d       	mov	r30, r0
    38e0:	09 95       	icall
    38e2:	89 2b       	or	r24, r25
    38e4:	f9 f4       	brne	.+62     	; 0x3924 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x2c2>
    38e6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    38ea:	f8 01       	movw	r30, r16
    38ec:	80 80       	ld	r8, Z
    38ee:	91 80       	ldd	r9, Z+1	; 0x01
    38f0:	a2 80       	ldd	r10, Z+2	; 0x02
    38f2:	b3 80       	ldd	r11, Z+3	; 0x03
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	88 19       	sub	r24, r8
    38fa:	99 09       	sbc	r25, r9
    38fc:	aa 09       	sbc	r26, r10
    38fe:	bb 09       	sbc	r27, r11
    3900:	88 39       	cpi	r24, 0x98	; 152
    3902:	9a 43       	sbci	r25, 0x3A	; 58
    3904:	a1 05       	cpc	r26, r1
    3906:	b1 05       	cpc	r27, r1
    3908:	00 f3       	brcs	.-64     	; 0x38ca <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x268>
    390a:	f3 01       	movw	r30, r6
    390c:	e1 56       	subi	r30, 0x61	; 97
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	8c ef       	ldi	r24, 0xFC	; 252
    3912:	9f ef       	ldi	r25, 0xFF	; 255
    3914:	91 83       	std	Z+1, r25	; 0x01
    3916:	80 83       	st	Z, r24
    3918:	d3 01       	movw	r26, r6
    391a:	14 96       	adiw	r26, 0x04	; 4
    391c:	8d 91       	ld	r24, X+
    391e:	9c 91       	ld	r25, X
    3920:	15 97       	sbiw	r26, 0x05	; 5
    3922:	29 c0       	rjmp	.+82     	; 0x3976 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x314>
    3924:	be 01       	movw	r22, r28
    3926:	68 5f       	subi	r22, 0xF8	; 248
    3928:	7f 4f       	sbci	r23, 0xFF	; 255
    392a:	c3 01       	movw	r24, r6
    392c:	0e 94 65 19 	call	0x32ca	; 0x32ca <_ZN12PubSubClient10readPacketEPh>
    3930:	04 97       	sbiw	r24, 0x04	; 4
    3932:	f1 f4       	brne	.+60     	; 0x3970 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x30e>
    3934:	f3 01       	movw	r30, r6
    3936:	81 85       	ldd	r24, Z+9	; 0x09
    3938:	93 01       	movw	r18, r6
    393a:	21 56       	subi	r18, 0x61	; 97
    393c:	3f 4f       	sbci	r19, 0xFF	; 255
    393e:	79 01       	movw	r14, r18
    3940:	81 11       	cpse	r24, r1
    3942:	12 c0       	rjmp	.+36     	; 0x3968 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x306>
    3944:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    3948:	d8 01       	movw	r26, r16
    394a:	6d 93       	st	X+, r22
    394c:	7d 93       	st	X+, r23
    394e:	8d 93       	st	X+, r24
    3950:	9c 93       	st	X, r25
    3952:	13 97       	sbiw	r26, 0x03	; 3
    3954:	f3 01       	movw	r30, r6
    3956:	e0 57       	subi	r30, 0x70	; 112
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	10 82       	st	Z, r1
    395c:	f7 01       	movw	r30, r14
    395e:	11 82       	std	Z+1, r1	; 0x01
    3960:	10 82       	st	Z, r1
    3962:	dd 24       	eor	r13, r13
    3964:	d3 94       	inc	r13
    3966:	15 c0       	rjmp	.+42     	; 0x3992 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x330>
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	d9 01       	movw	r26, r18
    396c:	8d 93       	st	X+, r24
    396e:	9c 93       	st	X, r25
    3970:	f3 01       	movw	r30, r6
    3972:	84 81       	ldd	r24, Z+4	; 0x04
    3974:	95 81       	ldd	r25, Z+5	; 0x05
    3976:	dc 01       	movw	r26, r24
    3978:	ed 91       	ld	r30, X+
    397a:	fc 91       	ld	r31, X
    397c:	04 88       	ldd	r0, Z+20	; 0x14
    397e:	f5 89       	ldd	r31, Z+21	; 0x15
    3980:	e0 2d       	mov	r30, r0
    3982:	09 95       	icall
    3984:	06 c0       	rjmp	.+12     	; 0x3992 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b+0x330>
    3986:	e1 56       	subi	r30, 0x61	; 97
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	8e ef       	ldi	r24, 0xFE	; 254
    398c:	9f ef       	ldi	r25, 0xFF	; 255
    398e:	91 83       	std	Z+1, r25	; 0x01
    3990:	80 83       	st	Z, r24
    3992:	8d 2d       	mov	r24, r13
    3994:	2e 96       	adiw	r28, 0x0e	; 14
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
    39a8:	ff 90       	pop	r15
    39aa:	ef 90       	pop	r14
    39ac:	df 90       	pop	r13
    39ae:	cf 90       	pop	r12
    39b0:	bf 90       	pop	r11
    39b2:	af 90       	pop	r10
    39b4:	9f 90       	pop	r9
    39b6:	8f 90       	pop	r8
    39b8:	7f 90       	pop	r7
    39ba:	6f 90       	pop	r6
    39bc:	5f 90       	pop	r5
    39be:	4f 90       	pop	r4
    39c0:	3f 90       	pop	r3
    39c2:	2f 90       	pop	r2
    39c4:	08 95       	ret

000039c6 <_ZN12PubSubClient7connectEPKcS1_S1_>:
    39c6:	8f 92       	push	r8
    39c8:	af 92       	push	r10
    39ca:	bf 92       	push	r11
    39cc:	cf 92       	push	r12
    39ce:	ef 92       	push	r14
    39d0:	0f 93       	push	r16
    39d2:	1f 93       	push	r17
    39d4:	88 24       	eor	r8, r8
    39d6:	83 94       	inc	r8
    39d8:	a1 2c       	mov	r10, r1
    39da:	b1 2c       	mov	r11, r1
    39dc:	c1 2c       	mov	r12, r1
    39de:	e1 2c       	mov	r14, r1
    39e0:	00 e0       	ldi	r16, 0x00	; 0
    39e2:	10 e0       	ldi	r17, 0x00	; 0
    39e4:	0e 94 31 1b 	call	0x3662	; 0x3662 <_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_b>
    39e8:	1f 91       	pop	r17
    39ea:	0f 91       	pop	r16
    39ec:	ef 90       	pop	r14
    39ee:	cf 90       	pop	r12
    39f0:	bf 90       	pop	r11
    39f2:	af 90       	pop	r10
    39f4:	8f 90       	pop	r8
    39f6:	08 95       	ret

000039f8 <_ZN12PubSubClient4loopEv>:
    39f8:	2f 92       	push	r2
    39fa:	3f 92       	push	r3
    39fc:	4f 92       	push	r4
    39fe:	5f 92       	push	r5
    3a00:	6f 92       	push	r6
    3a02:	7f 92       	push	r7
    3a04:	8f 92       	push	r8
    3a06:	9f 92       	push	r9
    3a08:	af 92       	push	r10
    3a0a:	bf 92       	push	r11
    3a0c:	cf 92       	push	r12
    3a0e:	df 92       	push	r13
    3a10:	ef 92       	push	r14
    3a12:	ff 92       	push	r15
    3a14:	0f 93       	push	r16
    3a16:	1f 93       	push	r17
    3a18:	cf 93       	push	r28
    3a1a:	df 93       	push	r29
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	27 97       	sbiw	r28, 0x07	; 7
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	f8 94       	cli
    3a26:	de bf       	out	0x3e, r29	; 62
    3a28:	0f be       	out	0x3f, r0	; 63
    3a2a:	cd bf       	out	0x3d, r28	; 61
    3a2c:	8c 01       	movw	r16, r24
    3a2e:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN12PubSubClient9connectedEv>
    3a32:	8c 83       	std	Y+4, r24	; 0x04
    3a34:	88 23       	and	r24, r24
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <_ZN12PubSubClient4loopEv+0x42>
    3a38:	42 c1       	rjmp	.+644    	; 0x3cbe <_ZN12PubSubClient4loopEv+0x2c6>
    3a3a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    3a3e:	2b 01       	movw	r4, r22
    3a40:	3c 01       	movw	r6, r24
    3a42:	78 01       	movw	r14, r16
    3a44:	2c e8       	ldi	r18, 0x8C	; 140
    3a46:	e2 0e       	add	r14, r18
    3a48:	f1 1c       	adc	r15, r1
    3a4a:	f7 01       	movw	r30, r14
    3a4c:	80 81       	ld	r24, Z
    3a4e:	91 81       	ldd	r25, Z+1	; 0x01
    3a50:	a2 81       	ldd	r26, Z+2	; 0x02
    3a52:	b3 81       	ldd	r27, Z+3	; 0x03
    3a54:	a3 01       	movw	r20, r6
    3a56:	92 01       	movw	r18, r4
    3a58:	28 1b       	sub	r18, r24
    3a5a:	39 0b       	sbc	r19, r25
    3a5c:	4a 0b       	sbc	r20, r26
    3a5e:	5b 0b       	sbc	r21, r27
    3a60:	da 01       	movw	r26, r20
    3a62:	c9 01       	movw	r24, r18
    3a64:	89 39       	cpi	r24, 0x99	; 153
    3a66:	9a 43       	sbci	r25, 0x3A	; 58
    3a68:	a1 05       	cpc	r26, r1
    3a6a:	b1 05       	cpc	r27, r1
    3a6c:	90 f4       	brcc	.+36     	; 0x3a92 <_ZN12PubSubClient4loopEv+0x9a>
    3a6e:	34 97       	sbiw	r30, 0x04	; 4
    3a70:	80 81       	ld	r24, Z
    3a72:	91 81       	ldd	r25, Z+1	; 0x01
    3a74:	a2 81       	ldd	r26, Z+2	; 0x02
    3a76:	b3 81       	ldd	r27, Z+3	; 0x03
    3a78:	a3 01       	movw	r20, r6
    3a7a:	92 01       	movw	r18, r4
    3a7c:	28 1b       	sub	r18, r24
    3a7e:	39 0b       	sbc	r19, r25
    3a80:	4a 0b       	sbc	r20, r26
    3a82:	5b 0b       	sbc	r21, r27
    3a84:	da 01       	movw	r26, r20
    3a86:	c9 01       	movw	r24, r18
    3a88:	89 39       	cpi	r24, 0x99	; 153
    3a8a:	9a 43       	sbci	r25, 0x3A	; 58
    3a8c:	a1 05       	cpc	r26, r1
    3a8e:	b1 05       	cpc	r27, r1
    3a90:	c0 f1       	brcs	.+112    	; 0x3b02 <_ZN12PubSubClient4loopEv+0x10a>
    3a92:	68 01       	movw	r12, r16
    3a94:	40 e9       	ldi	r20, 0x90	; 144
    3a96:	c4 0e       	add	r12, r20
    3a98:	d1 1c       	adc	r13, r1
    3a9a:	d6 01       	movw	r26, r12
    3a9c:	2c 91       	ld	r18, X
    3a9e:	f8 01       	movw	r30, r16
    3aa0:	84 81       	ldd	r24, Z+4	; 0x04
    3aa2:	95 81       	ldd	r25, Z+5	; 0x05
    3aa4:	22 23       	and	r18, r18
    3aa6:	71 f0       	breq	.+28     	; 0x3ac4 <_ZN12PubSubClient4loopEv+0xcc>
    3aa8:	e1 56       	subi	r30, 0x61	; 97
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	2c ef       	ldi	r18, 0xFC	; 252
    3aae:	3f ef       	ldi	r19, 0xFF	; 255
    3ab0:	31 83       	std	Z+1, r19	; 0x01
    3ab2:	20 83       	st	Z, r18
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	ed 91       	ld	r30, X+
    3ab8:	fc 91       	ld	r31, X
    3aba:	04 88       	ldd	r0, Z+20	; 0x14
    3abc:	f5 89       	ldd	r31, Z+21	; 0x15
    3abe:	e0 2d       	mov	r30, r0
    3ac0:	09 95       	icall
    3ac2:	fc c0       	rjmp	.+504    	; 0x3cbc <_ZN12PubSubClient4loopEv+0x2c4>
    3ac4:	20 ec       	ldi	r18, 0xC0	; 192
    3ac6:	f8 01       	movw	r30, r16
    3ac8:	26 83       	std	Z+6, r18	; 0x06
    3aca:	17 82       	std	Z+7, r1	; 0x07
    3acc:	dc 01       	movw	r26, r24
    3ace:	ed 91       	ld	r30, X+
    3ad0:	fc 91       	ld	r31, X
    3ad2:	02 80       	ldd	r0, Z+2	; 0x02
    3ad4:	f3 81       	ldd	r31, Z+3	; 0x03
    3ad6:	e0 2d       	mov	r30, r0
    3ad8:	42 e0       	ldi	r20, 0x02	; 2
    3ada:	50 e0       	ldi	r21, 0x00	; 0
    3adc:	b8 01       	movw	r22, r16
    3ade:	6a 5f       	subi	r22, 0xFA	; 250
    3ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae2:	09 95       	icall
    3ae4:	f8 01       	movw	r30, r16
    3ae6:	e8 57       	subi	r30, 0x78	; 120
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	40 82       	st	Z, r4
    3aec:	51 82       	std	Z+1, r5	; 0x01
    3aee:	62 82       	std	Z+2, r6	; 0x02
    3af0:	73 82       	std	Z+3, r7	; 0x03
    3af2:	f7 01       	movw	r30, r14
    3af4:	40 82       	st	Z, r4
    3af6:	51 82       	std	Z+1, r5	; 0x01
    3af8:	62 82       	std	Z+2, r6	; 0x02
    3afa:	73 82       	std	Z+3, r7	; 0x03
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	d6 01       	movw	r26, r12
    3b00:	8c 93       	st	X, r24
    3b02:	f8 01       	movw	r30, r16
    3b04:	84 81       	ldd	r24, Z+4	; 0x04
    3b06:	95 81       	ldd	r25, Z+5	; 0x05
    3b08:	dc 01       	movw	r26, r24
    3b0a:	ed 91       	ld	r30, X+
    3b0c:	fc 91       	ld	r31, X
    3b0e:	00 84       	ldd	r0, Z+8	; 0x08
    3b10:	f1 85       	ldd	r31, Z+9	; 0x09
    3b12:	e0 2d       	mov	r30, r0
    3b14:	09 95       	icall
    3b16:	89 2b       	or	r24, r25
    3b18:	09 f4       	brne	.+2      	; 0x3b1c <_ZN12PubSubClient4loopEv+0x124>
    3b1a:	d1 c0       	rjmp	.+418    	; 0x3cbe <_ZN12PubSubClient4loopEv+0x2c6>
    3b1c:	be 01       	movw	r22, r28
    3b1e:	6f 5f       	subi	r22, 0xFF	; 255
    3b20:	7f 4f       	sbci	r23, 0xFF	; 255
    3b22:	c8 01       	movw	r24, r16
    3b24:	0e 94 65 19 	call	0x32ca	; 0x32ca <_ZN12PubSubClient10readPacketEPh>
    3b28:	1c 01       	movw	r2, r24
    3b2a:	89 2b       	or	r24, r25
    3b2c:	09 f4       	brne	.+2      	; 0x3b30 <_ZN12PubSubClient4loopEv+0x138>
    3b2e:	c1 c0       	rjmp	.+386    	; 0x3cb2 <_ZN12PubSubClient4loopEv+0x2ba>
    3b30:	f7 01       	movw	r30, r14
    3b32:	40 82       	st	Z, r4
    3b34:	51 82       	std	Z+1, r5	; 0x01
    3b36:	62 82       	std	Z+2, r6	; 0x02
    3b38:	73 82       	std	Z+3, r7	; 0x03
    3b3a:	d8 01       	movw	r26, r16
    3b3c:	16 96       	adiw	r26, 0x06	; 6
    3b3e:	8c 91       	ld	r24, X
    3b40:	80 7f       	andi	r24, 0xF0	; 240
    3b42:	80 33       	cpi	r24, 0x30	; 48
    3b44:	09 f0       	breq	.+2      	; 0x3b48 <_ZN12PubSubClient4loopEv+0x150>
    3b46:	93 c0       	rjmp	.+294    	; 0x3c6e <_ZN12PubSubClient4loopEv+0x276>
    3b48:	f8 01       	movw	r30, r16
    3b4a:	ef 56       	subi	r30, 0x6F	; 111
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	fb 83       	std	Y+3, r31	; 0x03
    3b50:	ea 83       	std	Y+2, r30	; 0x02
    3b52:	80 81       	ld	r24, Z
    3b54:	91 81       	ldd	r25, Z+1	; 0x01
    3b56:	89 2b       	or	r24, r25
    3b58:	09 f4       	brne	.+2      	; 0x3b5c <_ZN12PubSubClient4loopEv+0x164>
    3b5a:	b1 c0       	rjmp	.+354    	; 0x3cbe <_ZN12PubSubClient4loopEv+0x2c6>
    3b5c:	c9 80       	ldd	r12, Y+1	; 0x01
    3b5e:	d1 2c       	mov	r13, r1
    3b60:	f8 01       	movw	r30, r16
    3b62:	ec 0d       	add	r30, r12
    3b64:	fd 1d       	adc	r31, r13
    3b66:	e7 80       	ldd	r14, Z+7	; 0x07
    3b68:	f1 2c       	mov	r15, r1
    3b6a:	fe 2c       	mov	r15, r14
    3b6c:	ee 24       	eor	r14, r14
    3b6e:	80 85       	ldd	r24, Z+8	; 0x08
    3b70:	e8 0e       	add	r14, r24
    3b72:	f1 1c       	adc	r15, r1
    3b74:	48 01       	movw	r8, r16
    3b76:	f6 e0       	ldi	r31, 0x06	; 6
    3b78:	8f 0e       	add	r8, r31
    3b7a:	91 1c       	adc	r9, r1
    3b7c:	56 01       	movw	r10, r12
    3b7e:	22 e0       	ldi	r18, 0x02	; 2
    3b80:	a2 0e       	add	r10, r18
    3b82:	b1 1c       	adc	r11, r1
    3b84:	a8 0c       	add	r10, r8
    3b86:	b9 1c       	adc	r11, r9
    3b88:	b6 01       	movw	r22, r12
    3b8a:	6d 5f       	subi	r22, 0xFD	; 253
    3b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8e:	68 0d       	add	r22, r8
    3b90:	79 1d       	adc	r23, r9
    3b92:	a7 01       	movw	r20, r14
    3b94:	c5 01       	movw	r24, r10
    3b96:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <memmove>
    3b9a:	b7 01       	movw	r22, r14
    3b9c:	6c 0d       	add	r22, r12
    3b9e:	7d 1d       	adc	r23, r13
    3ba0:	d8 01       	movw	r26, r16
    3ba2:	a6 0f       	add	r26, r22
    3ba4:	b7 1f       	adc	r27, r23
    3ba6:	18 96       	adiw	r26, 0x08	; 8
    3ba8:	1c 92       	st	X, r1
    3baa:	18 97       	sbiw	r26, 0x08	; 8
    3bac:	f8 01       	movw	r30, r16
    3bae:	86 81       	ldd	r24, Z+6	; 0x06
    3bb0:	86 70       	andi	r24, 0x06	; 6
    3bb2:	8d 83       	std	Y+5, r24	; 0x05
    3bb4:	ea 81       	ldd	r30, Y+2	; 0x02
    3bb6:	fb 81       	ldd	r31, Y+3	; 0x03
    3bb8:	01 90       	ld	r0, Z+
    3bba:	f0 81       	ld	r31, Z
    3bbc:	e0 2d       	mov	r30, r0
    3bbe:	ff 83       	std	Y+7, r31	; 0x07
    3bc0:	ee 83       	std	Y+6, r30	; 0x06
    3bc2:	82 30       	cpi	r24, 0x02	; 2
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <_ZN12PubSubClient4loopEv+0x1d0>
    3bc6:	42 c0       	rjmp	.+132    	; 0x3c4c <_ZN12PubSubClient4loopEv+0x254>
    3bc8:	19 96       	adiw	r26, 0x09	; 9
    3bca:	8c 91       	ld	r24, X
    3bcc:	19 97       	sbiw	r26, 0x09	; 9
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	98 2f       	mov	r25, r24
    3bd2:	88 27       	eor	r24, r24
    3bd4:	1a 96       	adiw	r26, 0x0a	; 10
    3bd6:	2c 91       	ld	r18, X
    3bd8:	ac 01       	movw	r20, r24
    3bda:	42 0f       	add	r20, r18
    3bdc:	51 1d       	adc	r21, r1
    3bde:	5b 83       	std	Y+3, r21	; 0x03
    3be0:	4a 83       	std	Y+2, r20	; 0x02
    3be2:	4b ef       	ldi	r20, 0xFB	; 251
    3be4:	5f ef       	ldi	r21, 0xFF	; 255
    3be6:	4c 19       	sub	r20, r12
    3be8:	5d 09       	sbc	r21, r13
    3bea:	4e 19       	sub	r20, r14
    3bec:	5f 09       	sbc	r21, r15
    3bee:	42 0d       	add	r20, r2
    3bf0:	53 1d       	adc	r21, r3
    3bf2:	6b 5f       	subi	r22, 0xFB	; 251
    3bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf6:	68 0d       	add	r22, r8
    3bf8:	79 1d       	adc	r23, r9
    3bfa:	c5 01       	movw	r24, r10
    3bfc:	09 95       	icall
    3bfe:	80 e4       	ldi	r24, 0x40	; 64
    3c00:	d8 01       	movw	r26, r16
    3c02:	16 96       	adiw	r26, 0x06	; 6
    3c04:	8c 93       	st	X, r24
    3c06:	16 97       	sbiw	r26, 0x06	; 6
    3c08:	ed 81       	ldd	r30, Y+5	; 0x05
    3c0a:	17 96       	adiw	r26, 0x07	; 7
    3c0c:	ec 93       	st	X, r30
    3c0e:	17 97       	sbiw	r26, 0x07	; 7
    3c10:	fb 81       	ldd	r31, Y+3	; 0x03
    3c12:	18 96       	adiw	r26, 0x08	; 8
    3c14:	fc 93       	st	X, r31
    3c16:	18 97       	sbiw	r26, 0x08	; 8
    3c18:	2a 81       	ldd	r18, Y+2	; 0x02
    3c1a:	19 96       	adiw	r26, 0x09	; 9
    3c1c:	2c 93       	st	X, r18
    3c1e:	19 97       	sbiw	r26, 0x09	; 9
    3c20:	14 96       	adiw	r26, 0x04	; 4
    3c22:	8d 91       	ld	r24, X+
    3c24:	9c 91       	ld	r25, X
    3c26:	15 97       	sbiw	r26, 0x05	; 5
    3c28:	dc 01       	movw	r26, r24
    3c2a:	ed 91       	ld	r30, X+
    3c2c:	fc 91       	ld	r31, X
    3c2e:	02 80       	ldd	r0, Z+2	; 0x02
    3c30:	f3 81       	ldd	r31, Z+3	; 0x03
    3c32:	e0 2d       	mov	r30, r0
    3c34:	44 e0       	ldi	r20, 0x04	; 4
    3c36:	50 e0       	ldi	r21, 0x00	; 0
    3c38:	b4 01       	movw	r22, r8
    3c3a:	09 95       	icall
    3c3c:	f8 01       	movw	r30, r16
    3c3e:	e8 57       	subi	r30, 0x78	; 120
    3c40:	ff 4f       	sbci	r31, 0xFF	; 255
    3c42:	40 82       	st	Z, r4
    3c44:	51 82       	std	Z+1, r5	; 0x01
    3c46:	62 82       	std	Z+2, r6	; 0x02
    3c48:	73 82       	std	Z+3, r7	; 0x03
    3c4a:	39 c0       	rjmp	.+114    	; 0x3cbe <_ZN12PubSubClient4loopEv+0x2c6>
    3c4c:	4d ef       	ldi	r20, 0xFD	; 253
    3c4e:	5f ef       	ldi	r21, 0xFF	; 255
    3c50:	4c 19       	sub	r20, r12
    3c52:	5d 09       	sbc	r21, r13
    3c54:	4e 19       	sub	r20, r14
    3c56:	5f 09       	sbc	r21, r15
    3c58:	42 0d       	add	r20, r2
    3c5a:	53 1d       	adc	r21, r3
    3c5c:	6d 5f       	subi	r22, 0xFD	; 253
    3c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c60:	68 0d       	add	r22, r8
    3c62:	79 1d       	adc	r23, r9
    3c64:	c5 01       	movw	r24, r10
    3c66:	ee 81       	ldd	r30, Y+6	; 0x06
    3c68:	ff 81       	ldd	r31, Y+7	; 0x07
    3c6a:	09 95       	icall
    3c6c:	28 c0       	rjmp	.+80     	; 0x3cbe <_ZN12PubSubClient4loopEv+0x2c6>
    3c6e:	80 3c       	cpi	r24, 0xC0	; 192
    3c70:	c9 f4       	brne	.+50     	; 0x3ca4 <_ZN12PubSubClient4loopEv+0x2ac>
    3c72:	80 ed       	ldi	r24, 0xD0	; 208
    3c74:	d8 01       	movw	r26, r16
    3c76:	16 96       	adiw	r26, 0x06	; 6
    3c78:	8c 93       	st	X, r24
    3c7a:	16 97       	sbiw	r26, 0x06	; 6
    3c7c:	17 96       	adiw	r26, 0x07	; 7
    3c7e:	1c 92       	st	X, r1
    3c80:	17 97       	sbiw	r26, 0x07	; 7
    3c82:	14 96       	adiw	r26, 0x04	; 4
    3c84:	8d 91       	ld	r24, X+
    3c86:	9c 91       	ld	r25, X
    3c88:	15 97       	sbiw	r26, 0x05	; 5
    3c8a:	b8 01       	movw	r22, r16
    3c8c:	6a 5f       	subi	r22, 0xFA	; 250
    3c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c90:	dc 01       	movw	r26, r24
    3c92:	ed 91       	ld	r30, X+
    3c94:	fc 91       	ld	r31, X
    3c96:	02 80       	ldd	r0, Z+2	; 0x02
    3c98:	f3 81       	ldd	r31, Z+3	; 0x03
    3c9a:	e0 2d       	mov	r30, r0
    3c9c:	42 e0       	ldi	r20, 0x02	; 2
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
    3ca0:	09 95       	icall
    3ca2:	0d c0       	rjmp	.+26     	; 0x3cbe <_ZN12PubSubClient4loopEv+0x2c6>
    3ca4:	80 3d       	cpi	r24, 0xD0	; 208
    3ca6:	59 f4       	brne	.+22     	; 0x3cbe <_ZN12PubSubClient4loopEv+0x2c6>
    3ca8:	f8 01       	movw	r30, r16
    3caa:	e0 57       	subi	r30, 0x70	; 112
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	10 82       	st	Z, r1
    3cb0:	06 c0       	rjmp	.+12     	; 0x3cbe <_ZN12PubSubClient4loopEv+0x2c6>
    3cb2:	c8 01       	movw	r24, r16
    3cb4:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN12PubSubClient9connectedEv>
    3cb8:	81 11       	cpse	r24, r1
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <_ZN12PubSubClient4loopEv+0x2c6>
    3cbc:	1c 82       	std	Y+4, r1	; 0x04
    3cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3cc0:	27 96       	adiw	r28, 0x07	; 7
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	de bf       	out	0x3e, r29	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	cd bf       	out	0x3d, r28	; 61
    3ccc:	df 91       	pop	r29
    3cce:	cf 91       	pop	r28
    3cd0:	1f 91       	pop	r17
    3cd2:	0f 91       	pop	r16
    3cd4:	ff 90       	pop	r15
    3cd6:	ef 90       	pop	r14
    3cd8:	df 90       	pop	r13
    3cda:	cf 90       	pop	r12
    3cdc:	bf 90       	pop	r11
    3cde:	af 90       	pop	r10
    3ce0:	9f 90       	pop	r9
    3ce2:	8f 90       	pop	r8
    3ce4:	7f 90       	pop	r7
    3ce6:	6f 90       	pop	r6
    3ce8:	5f 90       	pop	r5
    3cea:	4f 90       	pop	r4
    3cec:	3f 90       	pop	r3
    3cee:	2f 90       	pop	r2
    3cf0:	08 95       	ret

00003cf2 <_ZN12PubSubClient7publishEPKcPKhjb>:
    3cf2:	9f 92       	push	r9
    3cf4:	af 92       	push	r10
    3cf6:	bf 92       	push	r11
    3cf8:	cf 92       	push	r12
    3cfa:	df 92       	push	r13
    3cfc:	ef 92       	push	r14
    3cfe:	ff 92       	push	r15
    3d00:	0f 93       	push	r16
    3d02:	1f 93       	push	r17
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	7c 01       	movw	r14, r24
    3d0a:	6b 01       	movw	r12, r22
    3d0c:	94 2e       	mov	r9, r20
    3d0e:	15 2f       	mov	r17, r21
    3d10:	e9 01       	movw	r28, r18
    3d12:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN12PubSubClient9connectedEv>
    3d16:	88 23       	and	r24, r24
    3d18:	09 f4       	brne	.+2      	; 0x3d1c <_ZN12PubSubClient7publishEPKcPKhjb+0x2a>
    3d1a:	40 c0       	rjmp	.+128    	; 0x3d9c <_ZN12PubSubClient7publishEPKcPKhjb+0xaa>
    3d1c:	f6 01       	movw	r30, r12
    3d1e:	01 90       	ld	r0, Z+
    3d20:	00 20       	and	r0, r0
    3d22:	e9 f7       	brne	.-6      	; 0x3d1e <_ZN12PubSubClient7publishEPKcPKhjb+0x2c>
    3d24:	31 97       	sbiw	r30, 0x01	; 1
    3d26:	ec 19       	sub	r30, r12
    3d28:	fd 09       	sbc	r31, r13
    3d2a:	ce 01       	movw	r24, r28
    3d2c:	07 96       	adiw	r24, 0x07	; 7
    3d2e:	e8 0f       	add	r30, r24
    3d30:	f9 1f       	adc	r31, r25
    3d32:	e1 38       	cpi	r30, 0x81	; 129
    3d34:	f1 05       	cpc	r31, r1
    3d36:	90 f5       	brcc	.+100    	; 0x3d9c <_ZN12PubSubClient7publishEPKcPKhjb+0xaa>
    3d38:	57 01       	movw	r10, r14
    3d3a:	86 e0       	ldi	r24, 0x06	; 6
    3d3c:	a8 0e       	add	r10, r24
    3d3e:	b1 1c       	adc	r11, r1
    3d40:	25 e0       	ldi	r18, 0x05	; 5
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	a5 01       	movw	r20, r10
    3d46:	b6 01       	movw	r22, r12
    3d48:	c7 01       	movw	r24, r14
    3d4a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN12PubSubClient11writeStringEPKcPhj>
    3d4e:	e9 2d       	mov	r30, r9
    3d50:	f1 2f       	mov	r31, r17
    3d52:	dc 01       	movw	r26, r24
    3d54:	16 96       	adiw	r26, 0x06	; 6
    3d56:	ae 0d       	add	r26, r14
    3d58:	bf 1d       	adc	r27, r15
    3d5a:	af 01       	movw	r20, r30
    3d5c:	4c 0f       	add	r20, r28
    3d5e:	5d 1f       	adc	r21, r29
    3d60:	e4 17       	cp	r30, r20
    3d62:	f5 07       	cpc	r31, r21
    3d64:	19 f0       	breq	.+6      	; 0x3d6c <_ZN12PubSubClient7publishEPKcPKhjb+0x7a>
    3d66:	21 91       	ld	r18, Z+
    3d68:	2d 93       	st	X+, r18
    3d6a:	fa cf       	rjmp	.-12     	; 0x3d60 <_ZN12PubSubClient7publishEPKcPKhjb+0x6e>
    3d6c:	25 97       	sbiw	r28, 0x05	; 5
    3d6e:	00 23       	and	r16, r16
    3d70:	11 f0       	breq	.+4      	; 0x3d76 <_ZN12PubSubClient7publishEPKcPKhjb+0x84>
    3d72:	61 e3       	ldi	r22, 0x31	; 49
    3d74:	01 c0       	rjmp	.+2      	; 0x3d78 <_ZN12PubSubClient7publishEPKcPKhjb+0x86>
    3d76:	60 e3       	ldi	r22, 0x30	; 48
    3d78:	9c 01       	movw	r18, r24
    3d7a:	2c 0f       	add	r18, r28
    3d7c:	3d 1f       	adc	r19, r29
    3d7e:	a5 01       	movw	r20, r10
    3d80:	c7 01       	movw	r24, r14
    3d82:	df 91       	pop	r29
    3d84:	cf 91       	pop	r28
    3d86:	1f 91       	pop	r17
    3d88:	0f 91       	pop	r16
    3d8a:	ff 90       	pop	r15
    3d8c:	ef 90       	pop	r14
    3d8e:	df 90       	pop	r13
    3d90:	cf 90       	pop	r12
    3d92:	bf 90       	pop	r11
    3d94:	af 90       	pop	r10
    3d96:	9f 90       	pop	r9
    3d98:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <_ZN12PubSubClient5writeEhPhj>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	df 91       	pop	r29
    3da0:	cf 91       	pop	r28
    3da2:	1f 91       	pop	r17
    3da4:	0f 91       	pop	r16
    3da6:	ff 90       	pop	r15
    3da8:	ef 90       	pop	r14
    3daa:	df 90       	pop	r13
    3dac:	cf 90       	pop	r12
    3dae:	bf 90       	pop	r11
    3db0:	af 90       	pop	r10
    3db2:	9f 90       	pop	r9
    3db4:	08 95       	ret

00003db6 <_ZN12PubSubClient7publishEPKcS1_>:
    3db6:	0f 93       	push	r16
    3db8:	fa 01       	movw	r30, r20
    3dba:	01 90       	ld	r0, Z+
    3dbc:	00 20       	and	r0, r0
    3dbe:	e9 f7       	brne	.-6      	; 0x3dba <_ZN12PubSubClient7publishEPKcS1_+0x4>
    3dc0:	31 97       	sbiw	r30, 0x01	; 1
    3dc2:	9f 01       	movw	r18, r30
    3dc4:	24 1b       	sub	r18, r20
    3dc6:	35 0b       	sbc	r19, r21
    3dc8:	00 e0       	ldi	r16, 0x00	; 0
    3dca:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_ZN12PubSubClient7publishEPKcPKhjb>
    3dce:	0f 91       	pop	r16
    3dd0:	08 95       	ret

00003dd2 <_ZN12PubSubClient9subscribeEPKch>:
    3dd2:	df 92       	push	r13
    3dd4:	ef 92       	push	r14
    3dd6:	ff 92       	push	r15
    3dd8:	0f 93       	push	r16
    3dda:	1f 93       	push	r17
    3ddc:	cf 93       	push	r28
    3dde:	df 93       	push	r29
    3de0:	42 30       	cpi	r20, 0x02	; 2
    3de2:	08 f0       	brcs	.+2      	; 0x3de6 <_ZN12PubSubClient9subscribeEPKch+0x14>
    3de4:	40 c0       	rjmp	.+128    	; 0x3e66 <_ZN12PubSubClient9subscribeEPKch+0x94>
    3de6:	fb 01       	movw	r30, r22
    3de8:	01 90       	ld	r0, Z+
    3dea:	00 20       	and	r0, r0
    3dec:	e9 f7       	brne	.-6      	; 0x3de8 <_ZN12PubSubClient9subscribeEPKch+0x16>
    3dee:	9f 01       	movw	r18, r30
    3df0:	26 1b       	sub	r18, r22
    3df2:	37 0b       	sbc	r19, r23
    3df4:	28 5f       	subi	r18, 0xF8	; 248
    3df6:	3f 4f       	sbci	r19, 0xFF	; 255
    3df8:	21 38       	cpi	r18, 0x81	; 129
    3dfa:	31 05       	cpc	r19, r1
    3dfc:	a0 f5       	brcc	.+104    	; 0x3e66 <_ZN12PubSubClient9subscribeEPKch+0x94>
    3dfe:	d4 2e       	mov	r13, r20
    3e00:	8b 01       	movw	r16, r22
    3e02:	ec 01       	movw	r28, r24
    3e04:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN12PubSubClient9connectedEv>
    3e08:	88 23       	and	r24, r24
    3e0a:	69 f1       	breq	.+90     	; 0x3e66 <_ZN12PubSubClient9subscribeEPKch+0x94>
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	ea 57       	subi	r30, 0x7A	; 122
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	80 81       	ld	r24, Z
    3e14:	91 81       	ldd	r25, Z+1	; 0x01
    3e16:	01 96       	adiw	r24, 0x01	; 1
    3e18:	11 f4       	brne	.+4      	; 0x3e1e <_ZN12PubSubClient9subscribeEPKch+0x4c>
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	91 83       	std	Z+1, r25	; 0x01
    3e20:	80 83       	st	Z, r24
    3e22:	80 81       	ld	r24, Z
    3e24:	91 81       	ldd	r25, Z+1	; 0x01
    3e26:	9b 87       	std	Y+11, r25	; 0x0b
    3e28:	8c 87       	std	Y+12, r24	; 0x0c
    3e2a:	7e 01       	movw	r14, r28
    3e2c:	86 e0       	ldi	r24, 0x06	; 6
    3e2e:	e8 0e       	add	r14, r24
    3e30:	f1 1c       	adc	r15, r1
    3e32:	27 e0       	ldi	r18, 0x07	; 7
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	a7 01       	movw	r20, r14
    3e38:	b8 01       	movw	r22, r16
    3e3a:	ce 01       	movw	r24, r28
    3e3c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN12PubSubClient11writeStringEPKcPhj>
    3e40:	fe 01       	movw	r30, r28
    3e42:	e8 0f       	add	r30, r24
    3e44:	f9 1f       	adc	r31, r25
    3e46:	d6 82       	std	Z+6, r13	; 0x06
    3e48:	9c 01       	movw	r18, r24
    3e4a:	24 50       	subi	r18, 0x04	; 4
    3e4c:	31 09       	sbc	r19, r1
    3e4e:	a7 01       	movw	r20, r14
    3e50:	62 e8       	ldi	r22, 0x82	; 130
    3e52:	ce 01       	movw	r24, r28
    3e54:	df 91       	pop	r29
    3e56:	cf 91       	pop	r28
    3e58:	1f 91       	pop	r17
    3e5a:	0f 91       	pop	r16
    3e5c:	ff 90       	pop	r15
    3e5e:	ef 90       	pop	r14
    3e60:	df 90       	pop	r13
    3e62:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <_ZN12PubSubClient5writeEhPhj>
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	df 91       	pop	r29
    3e6a:	cf 91       	pop	r28
    3e6c:	1f 91       	pop	r17
    3e6e:	0f 91       	pop	r16
    3e70:	ff 90       	pop	r15
    3e72:	ef 90       	pop	r14
    3e74:	df 90       	pop	r13
    3e76:	08 95       	ret

00003e78 <_ZN12PubSubClient5stateEv>:

int PubSubClient::state() {
    return this->_state;
    3e78:	81 56       	subi	r24, 0x61	; 97
    3e7a:	9f 4f       	sbci	r25, 0xFF	; 255
}
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	80 81       	ld	r24, Z
    3e80:	91 81       	ldd	r25, Z+1	; 0x01
    3e82:	08 95       	ret

00003e84 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>:
    3e84:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3e86:	00 e0       	ldi	r16, 0x00	; 0
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	40 e0       	ldi	r20, 0x00	; 0
    3e8c:	60 e0       	ldi	r22, 0x00	; 0
    3e8e:	8d ea       	ldi	r24, 0xAD	; 173
    3e90:	95 e0       	ldi	r25, 0x05	; 5
    3e92:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN9IPAddressC1Ehhhh>
    3e96:	0f 91       	pop	r16
    3e98:	08 95       	ret

00003e9a <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3e9a:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <_ZN14SoftwareSerial13active_objectE>
    3e9e:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ea2:	28 17       	cp	r18, r24
    3ea4:	39 07       	cpc	r19, r25
    3ea6:	b9 f4       	brne	.+46     	; 0x3ed6 <_ZN14SoftwareSerial4readEv+0x3c>
    3ea8:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3eac:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3eb0:	98 17       	cp	r25, r24
    3eb2:	89 f0       	breq	.+34     	; 0x3ed6 <_ZN14SoftwareSerial4readEv+0x3c>
    3eb4:	e0 91 b3 05 	lds	r30, 0x05B3	; 0x8005b3 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3eb8:	f0 e0       	ldi	r31, 0x00	; 0
    3eba:	eb 54       	subi	r30, 0x4B	; 75
    3ebc:	fa 4f       	sbci	r31, 0xFA	; 250
    3ebe:	80 81       	ld	r24, Z
    3ec0:	20 91 b3 05 	lds	r18, 0x05B3	; 0x8005b3 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	2f 5f       	subi	r18, 0xFF	; 255
    3ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eca:	2f 73       	andi	r18, 0x3F	; 63
    3ecc:	33 27       	eor	r19, r19
    3ece:	20 93 b3 05 	sts	0x05B3, r18	; 0x8005b3 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	08 95       	ret
    3ed6:	8f ef       	ldi	r24, 0xFF	; 255
    3ed8:	9f ef       	ldi	r25, 0xFF	; 255
    3eda:	08 95       	ret

00003edc <_ZN14SoftwareSerial5writeEh>:
    3edc:	1f 93       	push	r17
    3ede:	cf 93       	push	r28
    3ee0:	df 93       	push	r29
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	5c 96       	adiw	r26, 0x1c	; 28
    3ee6:	8d 91       	ld	r24, X+
    3ee8:	9c 91       	ld	r25, X
    3eea:	5d 97       	sbiw	r26, 0x1d	; 29
    3eec:	00 97       	sbiw	r24, 0x00	; 0
    3eee:	39 f4       	brne	.+14     	; 0x3efe <_ZN14SoftwareSerial5writeEh+0x22>
    3ef0:	21 e0       	ldi	r18, 0x01	; 1
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	13 96       	adiw	r26, 0x03	; 3
    3ef6:	3c 93       	st	X, r19
    3ef8:	2e 93       	st	-X, r18
    3efa:	12 97       	sbiw	r26, 0x02	; 2
    3efc:	3b c0       	rjmp	.+118    	; 0x3f74 <_ZN14SoftwareSerial5writeEh+0x98>
    3efe:	51 96       	adiw	r26, 0x11	; 17
    3f00:	ed 91       	ld	r30, X+
    3f02:	fc 91       	ld	r31, X
    3f04:	52 97       	sbiw	r26, 0x12	; 18
    3f06:	50 96       	adiw	r26, 0x10	; 16
    3f08:	2c 91       	ld	r18, X
    3f0a:	50 97       	sbiw	r26, 0x10	; 16
    3f0c:	32 2f       	mov	r19, r18
    3f0e:	30 95       	com	r19
    3f10:	1f b7       	in	r17, 0x3f	; 63
    3f12:	5e 96       	adiw	r26, 0x1e	; 30
    3f14:	4c 91       	ld	r20, X
    3f16:	5e 97       	sbiw	r26, 0x1e	; 30
    3f18:	74 2f       	mov	r23, r20
    3f1a:	72 70       	andi	r23, 0x02	; 2
    3f1c:	41 fd       	sbrc	r20, 1
    3f1e:	60 95       	com	r22
    3f20:	f8 94       	cli
    3f22:	40 81       	ld	r20, Z
    3f24:	77 23       	and	r23, r23
    3f26:	11 f0       	breq	.+4      	; 0x3f2c <_ZN14SoftwareSerial5writeEh+0x50>
    3f28:	42 2b       	or	r20, r18
    3f2a:	01 c0       	rjmp	.+2      	; 0x3f2e <_ZN14SoftwareSerial5writeEh+0x52>
    3f2c:	43 23       	and	r20, r19
    3f2e:	40 83       	st	Z, r20
    3f30:	ec 01       	movw	r28, r24
    3f32:	21 97       	sbiw	r28, 0x01	; 1
    3f34:	f1 f7       	brne	.-4      	; 0x3f32 <_ZN14SoftwareSerial5writeEh+0x56>
    3f36:	48 e0       	ldi	r20, 0x08	; 8
    3f38:	50 81       	ld	r21, Z
    3f3a:	60 ff       	sbrs	r22, 0
    3f3c:	02 c0       	rjmp	.+4      	; 0x3f42 <_ZN14SoftwareSerial5writeEh+0x66>
    3f3e:	52 2b       	or	r21, r18
    3f40:	01 c0       	rjmp	.+2      	; 0x3f44 <_ZN14SoftwareSerial5writeEh+0x68>
    3f42:	53 23       	and	r21, r19
    3f44:	50 83       	st	Z, r21
    3f46:	ec 01       	movw	r28, r24
    3f48:	21 97       	sbiw	r28, 0x01	; 1
    3f4a:	f1 f7       	brne	.-4      	; 0x3f48 <_ZN14SoftwareSerial5writeEh+0x6c>
    3f4c:	66 95       	lsr	r22
    3f4e:	41 50       	subi	r20, 0x01	; 1
    3f50:	99 f7       	brne	.-26     	; 0x3f38 <_ZN14SoftwareSerial5writeEh+0x5c>
    3f52:	80 81       	ld	r24, Z
    3f54:	77 23       	and	r23, r23
    3f56:	19 f0       	breq	.+6      	; 0x3f5e <_ZN14SoftwareSerial5writeEh+0x82>
    3f58:	83 23       	and	r24, r19
    3f5a:	80 83       	st	Z, r24
    3f5c:	02 c0       	rjmp	.+4      	; 0x3f62 <_ZN14SoftwareSerial5writeEh+0x86>
    3f5e:	28 2b       	or	r18, r24
    3f60:	20 83       	st	Z, r18
    3f62:	1f bf       	out	0x3f, r17	; 63
    3f64:	5c 96       	adiw	r26, 0x1c	; 28
    3f66:	8d 91       	ld	r24, X+
    3f68:	9c 91       	ld	r25, X
    3f6a:	5d 97       	sbiw	r26, 0x1d	; 29
    3f6c:	01 97       	sbiw	r24, 0x01	; 1
    3f6e:	f1 f7       	brne	.-4      	; 0x3f6c <_ZN14SoftwareSerial5writeEh+0x90>
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	df 91       	pop	r29
    3f76:	cf 91       	pop	r28
    3f78:	1f 91       	pop	r17
    3f7a:	08 95       	ret

00003f7c <_ZN14SoftwareSerial5flushEv>:
    3f7c:	08 95       	ret

00003f7e <_ZN14SoftwareSerial4peekEv>:
    3f7e:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <_ZN14SoftwareSerial13active_objectE>
    3f82:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f86:	28 17       	cp	r18, r24
    3f88:	39 07       	cpc	r19, r25
    3f8a:	71 f4       	brne	.+28     	; 0x3fa8 <_ZN14SoftwareSerial4peekEv+0x2a>
    3f8c:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3f90:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f94:	98 17       	cp	r25, r24
    3f96:	41 f0       	breq	.+16     	; 0x3fa8 <_ZN14SoftwareSerial4peekEv+0x2a>
    3f98:	e0 91 b3 05 	lds	r30, 0x05B3	; 0x8005b3 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3f9c:	f0 e0       	ldi	r31, 0x00	; 0
    3f9e:	eb 54       	subi	r30, 0x4B	; 75
    3fa0:	fa 4f       	sbci	r31, 0xFA	; 250
    3fa2:	80 81       	ld	r24, Z
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	08 95       	ret
    3fa8:	8f ef       	ldi	r24, 0xFF	; 255
    3faa:	9f ef       	ldi	r25, 0xFF	; 255
    3fac:	08 95       	ret

00003fae <_ZN14SoftwareSerial9availableEv>:
    3fae:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <_ZN14SoftwareSerial13active_objectE>
    3fb2:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <_ZN14SoftwareSerial13active_objectE+0x1>
    3fb6:	28 17       	cp	r18, r24
    3fb8:	39 07       	cpc	r19, r25
    3fba:	71 f4       	brne	.+28     	; 0x3fd8 <_ZN14SoftwareSerial9availableEv+0x2a>
    3fbc:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3fc0:	20 91 b3 05 	lds	r18, 0x05B3	; 0x8005b3 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	80 5c       	subi	r24, 0xC0	; 192
    3fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3fca:	82 1b       	sub	r24, r18
    3fcc:	91 09       	sbc	r25, r1
    3fce:	60 e4       	ldi	r22, 0x40	; 64
    3fd0:	70 e0       	ldi	r23, 0x00	; 0
    3fd2:	0e 94 92 32 	call	0x6524	; 0x6524 <__divmodhi4>
    3fd6:	08 95       	ret
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	08 95       	ret

00003fde <_ZN14SoftwareSerial13stopListeningEv>:
    3fde:	e0 91 f5 05 	lds	r30, 0x05F5	; 0x8005f5 <_ZN14SoftwareSerial13active_objectE>
    3fe2:	f0 91 f6 05 	lds	r31, 0x05F6	; 0x8005f6 <_ZN14SoftwareSerial13active_objectE+0x1>
    3fe6:	e8 17       	cp	r30, r24
    3fe8:	f9 07       	cpc	r31, r25
    3fea:	69 f4       	brne	.+26     	; 0x4006 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3fec:	a3 89       	ldd	r26, Z+19	; 0x13
    3fee:	b4 89       	ldd	r27, Z+20	; 0x14
    3ff0:	9c 91       	ld	r25, X
    3ff2:	85 89       	ldd	r24, Z+21	; 0x15
    3ff4:	80 95       	com	r24
    3ff6:	89 23       	and	r24, r25
    3ff8:	8c 93       	st	X, r24
    3ffa:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ffe:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <_ZN14SoftwareSerial13active_objectE>
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	08 95       	ret
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	08 95       	ret

0000400a <_ZN14SoftwareSerial6listenEv>:
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	ec 01       	movw	r28, r24
    4010:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4012:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4014:	89 2b       	or	r24, r25
    4016:	f1 f0       	breq	.+60     	; 0x4054 <_ZN14SoftwareSerial6listenEv+0x4a>
    4018:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <_ZN14SoftwareSerial13active_objectE>
    401c:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <_ZN14SoftwareSerial13active_objectE+0x1>
    4020:	c8 17       	cp	r28, r24
    4022:	d9 07       	cpc	r29, r25
    4024:	b9 f0       	breq	.+46     	; 0x4054 <_ZN14SoftwareSerial6listenEv+0x4a>
    4026:	00 97       	sbiw	r24, 0x00	; 0
    4028:	11 f0       	breq	.+4      	; 0x402e <_ZN14SoftwareSerial6listenEv+0x24>
    402a:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZN14SoftwareSerial13stopListeningEv>
    402e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4030:	8e 7f       	andi	r24, 0xFE	; 254
    4032:	8e 8f       	std	Y+30, r24	; 0x1e
    4034:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4038:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <_ZN14SoftwareSerial20_receive_buffer_headE>
    403c:	d0 93 f6 05 	sts	0x05F6, r29	; 0x8005f6 <_ZN14SoftwareSerial13active_objectE+0x1>
    4040:	c0 93 f5 05 	sts	0x05F5, r28	; 0x8005f5 <_ZN14SoftwareSerial13active_objectE>
    4044:	eb 89       	ldd	r30, Y+19	; 0x13
    4046:	fc 89       	ldd	r31, Y+20	; 0x14
    4048:	90 81       	ld	r25, Z
    404a:	8d 89       	ldd	r24, Y+21	; 0x15
    404c:	89 2b       	or	r24, r25
    404e:	80 83       	st	Z, r24
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	01 c0       	rjmp	.+2      	; 0x4056 <_ZN14SoftwareSerial6listenEv+0x4c>
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	df 91       	pop	r29
    4058:	cf 91       	pop	r28
    405a:	08 95       	ret

0000405c <__vector_3>:
    405c:	1f 92       	push	r1
    405e:	0f 92       	push	r0
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	0f 92       	push	r0
    4064:	11 24       	eor	r1, r1
    4066:	2f 93       	push	r18
    4068:	3f 93       	push	r19
    406a:	4f 93       	push	r20
    406c:	5f 93       	push	r21
    406e:	6f 93       	push	r22
    4070:	7f 93       	push	r23
    4072:	8f 93       	push	r24
    4074:	9f 93       	push	r25
    4076:	af 93       	push	r26
    4078:	bf 93       	push	r27
    407a:	ef 93       	push	r30
    407c:	ff 93       	push	r31
    407e:	e0 91 f5 05 	lds	r30, 0x05F5	; 0x8005f5 <_ZN14SoftwareSerial13active_objectE>
    4082:	f0 91 f6 05 	lds	r31, 0x05F6	; 0x8005f6 <_ZN14SoftwareSerial13active_objectE+0x1>
    4086:	30 97       	sbiw	r30, 0x00	; 0
    4088:	09 f4       	brne	.+2      	; 0x408c <__vector_3+0x30>
    408a:	51 c0       	rjmp	.+162    	; 0x412e <__vector_3+0xd2>
    408c:	96 8d       	ldd	r25, Z+30	; 0x1e
    408e:	a6 85       	ldd	r26, Z+14	; 0x0e
    4090:	b7 85       	ldd	r27, Z+15	; 0x0f
    4092:	85 85       	ldd	r24, Z+13	; 0x0d
    4094:	91 ff       	sbrs	r25, 1
    4096:	04 c0       	rjmp	.+8      	; 0x40a0 <__vector_3+0x44>
    4098:	9c 91       	ld	r25, X
    409a:	89 23       	and	r24, r25
    409c:	29 f4       	brne	.+10     	; 0x40a8 <__vector_3+0x4c>
    409e:	47 c0       	rjmp	.+142    	; 0x412e <__vector_3+0xd2>
    40a0:	9c 91       	ld	r25, X
    40a2:	89 23       	and	r24, r25
    40a4:	09 f0       	breq	.+2      	; 0x40a8 <__vector_3+0x4c>
    40a6:	43 c0       	rjmp	.+134    	; 0x412e <__vector_3+0xd2>
    40a8:	a3 89       	ldd	r26, Z+19	; 0x13
    40aa:	b4 89       	ldd	r27, Z+20	; 0x14
    40ac:	9c 91       	ld	r25, X
    40ae:	85 89       	ldd	r24, Z+21	; 0x15
    40b0:	80 95       	com	r24
    40b2:	89 23       	and	r24, r25
    40b4:	8c 93       	st	X, r24
    40b6:	86 89       	ldd	r24, Z+22	; 0x16
    40b8:	97 89       	ldd	r25, Z+23	; 0x17
    40ba:	01 97       	sbiw	r24, 0x01	; 1
    40bc:	f1 f7       	brne	.-4      	; 0x40ba <__vector_3+0x5e>
    40be:	60 8d       	ldd	r22, Z+24	; 0x18
    40c0:	71 8d       	ldd	r23, Z+25	; 0x19
    40c2:	a6 85       	ldd	r26, Z+14	; 0x0e
    40c4:	b7 85       	ldd	r27, Z+15	; 0x0f
    40c6:	55 85       	ldd	r21, Z+13	; 0x0d
    40c8:	38 e0       	ldi	r19, 0x08	; 8
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	cb 01       	movw	r24, r22
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	f1 f7       	brne	.-4      	; 0x40ce <__vector_3+0x72>
    40d2:	82 2f       	mov	r24, r18
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	95 95       	asr	r25
    40d8:	87 95       	ror	r24
    40da:	28 2f       	mov	r18, r24
    40dc:	4c 91       	ld	r20, X
    40de:	45 23       	and	r20, r21
    40e0:	09 f0       	breq	.+2      	; 0x40e4 <__vector_3+0x88>
    40e2:	20 68       	ori	r18, 0x80	; 128
    40e4:	31 50       	subi	r19, 0x01	; 1
    40e6:	91 f7       	brne	.-28     	; 0x40cc <__vector_3+0x70>
    40e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    40ea:	81 fd       	sbrc	r24, 1
    40ec:	20 95       	com	r18
    40ee:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	01 96       	adiw	r24, 0x01	; 1
    40f6:	8f 73       	andi	r24, 0x3F	; 63
    40f8:	99 27       	eor	r25, r25
    40fa:	30 91 b3 05 	lds	r19, 0x05B3	; 0x8005b3 <_ZN14SoftwareSerial20_receive_buffer_headE>
    40fe:	38 17       	cp	r19, r24
    4100:	49 f0       	breq	.+18     	; 0x4114 <__vector_3+0xb8>
    4102:	a0 91 b4 05 	lds	r26, 0x05B4	; 0x8005b4 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4106:	b0 e0       	ldi	r27, 0x00	; 0
    4108:	ab 54       	subi	r26, 0x4B	; 75
    410a:	ba 4f       	sbci	r27, 0xFA	; 250
    410c:	2c 93       	st	X, r18
    410e:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4112:	03 c0       	rjmp	.+6      	; 0x411a <__vector_3+0xbe>
    4114:	86 8d       	ldd	r24, Z+30	; 0x1e
    4116:	81 60       	ori	r24, 0x01	; 1
    4118:	86 8f       	std	Z+30, r24	; 0x1e
    411a:	82 8d       	ldd	r24, Z+26	; 0x1a
    411c:	93 8d       	ldd	r25, Z+27	; 0x1b
    411e:	01 97       	sbiw	r24, 0x01	; 1
    4120:	f1 f7       	brne	.-4      	; 0x411e <__vector_3+0xc2>
    4122:	a3 89       	ldd	r26, Z+19	; 0x13
    4124:	b4 89       	ldd	r27, Z+20	; 0x14
    4126:	9c 91       	ld	r25, X
    4128:	85 89       	ldd	r24, Z+21	; 0x15
    412a:	89 2b       	or	r24, r25
    412c:	8c 93       	st	X, r24
    412e:	ff 91       	pop	r31
    4130:	ef 91       	pop	r30
    4132:	bf 91       	pop	r27
    4134:	af 91       	pop	r26
    4136:	9f 91       	pop	r25
    4138:	8f 91       	pop	r24
    413a:	7f 91       	pop	r23
    413c:	6f 91       	pop	r22
    413e:	5f 91       	pop	r21
    4140:	4f 91       	pop	r20
    4142:	3f 91       	pop	r19
    4144:	2f 91       	pop	r18
    4146:	0f 90       	pop	r0
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	0f 90       	pop	r0
    414c:	1f 90       	pop	r1
    414e:	18 95       	reti

00004150 <_ZN14SoftwareSerialD1Ev>:
    4150:	25 e0       	ldi	r18, 0x05	; 5
    4152:	33 e0       	ldi	r19, 0x03	; 3
    4154:	fc 01       	movw	r30, r24
    4156:	31 83       	std	Z+1, r19	; 0x01
    4158:	20 83       	st	Z, r18
    415a:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <_ZN14SoftwareSerial13stopListeningEv>

0000415e <_ZN14SoftwareSerial5setTXEh>:
    415e:	1f 93       	push	r17
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
    4164:	ec 01       	movw	r28, r24
    4166:	16 2f       	mov	r17, r22
    4168:	6e 8d       	ldd	r22, Y+30	; 0x1e
    416a:	66 95       	lsr	r22
    416c:	61 70       	andi	r22, 0x01	; 1
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	68 27       	eor	r22, r24
    4172:	81 2f       	mov	r24, r17
    4174:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    4178:	61 e0       	ldi	r22, 0x01	; 1
    417a:	81 2f       	mov	r24, r17
    417c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>
    4180:	81 2f       	mov	r24, r17
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	fc 01       	movw	r30, r24
    4186:	ea 5c       	subi	r30, 0xCA	; 202
    4188:	fb 4f       	sbci	r31, 0xFB	; 251
    418a:	e4 91       	lpm	r30, Z
    418c:	e8 8b       	std	Y+16, r30	; 0x10
    418e:	fc 01       	movw	r30, r24
    4190:	e5 5b       	subi	r30, 0xB5	; 181
    4192:	fb 4f       	sbci	r31, 0xFB	; 251
    4194:	e4 91       	lpm	r30, Z
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	ee 0f       	add	r30, r30
    419a:	ff 1f       	adc	r31, r31
    419c:	e6 59       	subi	r30, 0x96	; 150
    419e:	fb 4f       	sbci	r31, 0xFB	; 251
    41a0:	85 91       	lpm	r24, Z+
    41a2:	94 91       	lpm	r25, Z
    41a4:	9a 8b       	std	Y+18, r25	; 0x12
    41a6:	89 8b       	std	Y+17, r24	; 0x11
    41a8:	df 91       	pop	r29
    41aa:	cf 91       	pop	r28
    41ac:	1f 91       	pop	r17
    41ae:	08 95       	ret

000041b0 <_ZN14SoftwareSerial5setRXEh>:
    41b0:	1f 93       	push	r17
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	ec 01       	movw	r28, r24
    41b8:	16 2f       	mov	r17, r22
    41ba:	60 e0       	ldi	r22, 0x00	; 0
    41bc:	81 2f       	mov	r24, r17
    41be:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>
    41c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    41c4:	81 fd       	sbrc	r24, 1
    41c6:	04 c0       	rjmp	.+8      	; 0x41d0 <_ZN14SoftwareSerial5setRXEh+0x20>
    41c8:	61 e0       	ldi	r22, 0x01	; 1
    41ca:	81 2f       	mov	r24, r17
    41cc:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    41d0:	1c 87       	std	Y+12, r17	; 0x0c
    41d2:	81 2f       	mov	r24, r17
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	fc 01       	movw	r30, r24
    41d8:	ea 5c       	subi	r30, 0xCA	; 202
    41da:	fb 4f       	sbci	r31, 0xFB	; 251
    41dc:	e4 91       	lpm	r30, Z
    41de:	ed 87       	std	Y+13, r30	; 0x0d
    41e0:	fc 01       	movw	r30, r24
    41e2:	e5 5b       	subi	r30, 0xB5	; 181
    41e4:	fb 4f       	sbci	r31, 0xFB	; 251
    41e6:	e4 91       	lpm	r30, Z
    41e8:	f0 e0       	ldi	r31, 0x00	; 0
    41ea:	ee 0f       	add	r30, r30
    41ec:	ff 1f       	adc	r31, r31
    41ee:	e0 5a       	subi	r30, 0xA0	; 160
    41f0:	fb 4f       	sbci	r31, 0xFB	; 251
    41f2:	85 91       	lpm	r24, Z+
    41f4:	94 91       	lpm	r25, Z
    41f6:	9f 87       	std	Y+15, r25	; 0x0f
    41f8:	8e 87       	std	Y+14, r24	; 0x0e
    41fa:	df 91       	pop	r29
    41fc:	cf 91       	pop	r28
    41fe:	1f 91       	pop	r17
    4200:	08 95       	ret

00004202 <_ZN14SoftwareSerialC1Ehhb>:
    4202:	1f 93       	push	r17
    4204:	cf 93       	push	r28
    4206:	df 93       	push	r29
    4208:	ec 01       	movw	r28, r24
    420a:	16 2f       	mov	r17, r22
    420c:	1b 82       	std	Y+3, r1	; 0x03
    420e:	1a 82       	std	Y+2, r1	; 0x02
    4210:	88 ee       	ldi	r24, 0xE8	; 232
    4212:	93 e0       	ldi	r25, 0x03	; 3
    4214:	a0 e0       	ldi	r26, 0x00	; 0
    4216:	b0 e0       	ldi	r27, 0x00	; 0
    4218:	8c 83       	std	Y+4, r24	; 0x04
    421a:	9d 83       	std	Y+5, r25	; 0x05
    421c:	ae 83       	std	Y+6, r26	; 0x06
    421e:	bf 83       	std	Y+7, r27	; 0x07
    4220:	85 e0       	ldi	r24, 0x05	; 5
    4222:	93 e0       	ldi	r25, 0x03	; 3
    4224:	99 83       	std	Y+1, r25	; 0x01
    4226:	88 83       	st	Y, r24
    4228:	1f 8a       	std	Y+23, r1	; 0x17
    422a:	1e 8a       	std	Y+22, r1	; 0x16
    422c:	19 8e       	std	Y+25, r1	; 0x19
    422e:	18 8e       	std	Y+24, r1	; 0x18
    4230:	1b 8e       	std	Y+27, r1	; 0x1b
    4232:	1a 8e       	std	Y+26, r1	; 0x1a
    4234:	1d 8e       	std	Y+29, r1	; 0x1d
    4236:	1c 8e       	std	Y+28, r1	; 0x1c
    4238:	8e 8d       	ldd	r24, Y+30	; 0x1e
    423a:	8e 7f       	andi	r24, 0xFE	; 254
    423c:	20 fb       	bst	r18, 0
    423e:	81 f9       	bld	r24, 1
    4240:	8e 8f       	std	Y+30, r24	; 0x1e
    4242:	64 2f       	mov	r22, r20
    4244:	ce 01       	movw	r24, r28
    4246:	0e 94 af 20 	call	0x415e	; 0x415e <_ZN14SoftwareSerial5setTXEh>
    424a:	61 2f       	mov	r22, r17
    424c:	ce 01       	movw	r24, r28
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
    4252:	1f 91       	pop	r17
    4254:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <_ZN14SoftwareSerial5setRXEh>

00004258 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    4258:	cf 93       	push	r28
    425a:	df 93       	push	r29
    425c:	ec 01       	movw	r28, r24
    425e:	9a 01       	movw	r18, r20
    4260:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    4262:	1b 8e       	std	Y+27, r1	; 0x1b
    4264:	1a 8e       	std	Y+26, r1	; 0x1a
    4266:	19 8e       	std	Y+25, r1	; 0x19
    4268:	18 8e       	std	Y+24, r1	; 0x18
    426a:	1f 8a       	std	Y+23, r1	; 0x17
    426c:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    426e:	60 e0       	ldi	r22, 0x00	; 0
    4270:	79 e0       	ldi	r23, 0x09	; 9
    4272:	8d e3       	ldi	r24, 0x3D	; 61
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	0e 94 c8 32 	call	0x6590	; 0x6590 <__divmodsi4>
    427a:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    427c:	24 30       	cpi	r18, 0x04	; 4
    427e:	31 05       	cpc	r19, r1
    4280:	18 f0       	brcs	.+6      	; 0x4288 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    4282:	c9 01       	movw	r24, r18
    4284:	03 97       	sbiw	r24, 0x03	; 3
    4286:	02 c0       	rjmp	.+4      	; 0x428c <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    428c:	9d 8f       	std	Y+29, r25	; 0x1d
    428e:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    4290:	6c 85       	ldd	r22, Y+12	; 0x0c
    4292:	66 31       	cpi	r22, 0x16	; 22
    4294:	08 f0       	brcs	.+2      	; 0x4298 <_ZN14SoftwareSerial5beginEl+0x40>
    4296:	69 c0       	rjmp	.+210    	; 0x436a <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4298:	c9 01       	movw	r24, r18
    429a:	96 95       	lsr	r25
    429c:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    429e:	84 31       	cpi	r24, 0x14	; 20
    42a0:	91 05       	cpc	r25, r1
    42a2:	10 f0       	brcs	.+4      	; 0x42a8 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    42a4:	43 97       	sbiw	r24, 0x13	; 19
    42a6:	02 c0       	rjmp	.+4      	; 0x42ac <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    42ac:	9f 8b       	std	Y+23, r25	; 0x17
    42ae:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    42b0:	36 97       	sbiw	r30, 0x06	; 6
    42b2:	18 f0       	brcs	.+6      	; 0x42ba <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    42b4:	c9 01       	movw	r24, r18
    42b6:	05 97       	sbiw	r24, 0x05	; 5
    42b8:	02 c0       	rjmp	.+4      	; 0x42be <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    42be:	99 8f       	std	Y+25, r25	; 0x19
    42c0:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    42c2:	c9 01       	movw	r24, r18
    42c4:	88 0f       	add	r24, r24
    42c6:	99 1f       	adc	r25, r25
    42c8:	28 0f       	add	r18, r24
    42ca:	39 1f       	adc	r19, r25
    42cc:	36 95       	lsr	r19
    42ce:	27 95       	ror	r18
    42d0:	36 95       	lsr	r19
    42d2:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    42d4:	2d 30       	cpi	r18, 0x0D	; 13
    42d6:	31 05       	cpc	r19, r1
    42d8:	18 f0       	brcs	.+6      	; 0x42e0 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    42da:	2c 50       	subi	r18, 0x0C	; 12
    42dc:	31 09       	sbc	r19, r1
    42de:	02 c0       	rjmp	.+4      	; 0x42e4 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    42e0:	21 e0       	ldi	r18, 0x01	; 1
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    42e4:	3b 8f       	std	Y+27, r19	; 0x1b
    42e6:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    42e8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    42ec:	68 30       	cpi	r22, 0x08	; 8
    42ee:	50 f0       	brcs	.+20     	; 0x4304 <_ZN14SoftwareSerial5beginEl+0xac>
    42f0:	21 e0       	ldi	r18, 0x01	; 1
    42f2:	6e 30       	cpi	r22, 0x0E	; 14
    42f4:	08 f4       	brcc	.+2      	; 0x42f8 <_ZN14SoftwareSerial5beginEl+0xa0>
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	01 c0       	rjmp	.+2      	; 0x42fe <_ZN14SoftwareSerial5beginEl+0xa6>
    42fc:	88 0f       	add	r24, r24
    42fe:	2a 95       	dec	r18
    4300:	ea f7       	brpl	.-6      	; 0x42fc <_ZN14SoftwareSerial5beginEl+0xa4>
    4302:	01 c0       	rjmp	.+2      	; 0x4306 <_ZN14SoftwareSerial5beginEl+0xae>
    4304:	84 e0       	ldi	r24, 0x04	; 4
    4306:	89 2b       	or	r24, r25
    4308:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    430c:	9c 85       	ldd	r25, Y+12	; 0x0c
    430e:	98 30       	cpi	r25, 0x08	; 8
    4310:	38 f0       	brcs	.+14     	; 0x4320 <_ZN14SoftwareSerial5beginEl+0xc8>
    4312:	9e 30       	cpi	r25, 0x0E	; 14
    4314:	40 f0       	brcs	.+16     	; 0x4326 <_ZN14SoftwareSerial5beginEl+0xce>
    4316:	96 31       	cpi	r25, 0x16	; 22
    4318:	48 f0       	brcs	.+18     	; 0x432c <_ZN14SoftwareSerial5beginEl+0xd4>
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	08 c0       	rjmp	.+16     	; 0x4330 <_ZN14SoftwareSerial5beginEl+0xd8>
    4320:	2d e6       	ldi	r18, 0x6D	; 109
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	05 c0       	rjmp	.+10     	; 0x4330 <_ZN14SoftwareSerial5beginEl+0xd8>
    4326:	2b e6       	ldi	r18, 0x6B	; 107
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	02 c0       	rjmp	.+4      	; 0x4330 <_ZN14SoftwareSerial5beginEl+0xd8>
    432c:	2c e6       	ldi	r18, 0x6C	; 108
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	3c 8b       	std	Y+20, r19	; 0x14
    4332:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    4334:	98 30       	cpi	r25, 0x08	; 8
    4336:	30 f4       	brcc	.+12     	; 0x4344 <_ZN14SoftwareSerial5beginEl+0xec>
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	01 c0       	rjmp	.+2      	; 0x433e <_ZN14SoftwareSerial5beginEl+0xe6>
    433c:	88 0f       	add	r24, r24
    433e:	9a 95       	dec	r25
    4340:	ea f7       	brpl	.-6      	; 0x433c <_ZN14SoftwareSerial5beginEl+0xe4>
    4342:	0e c0       	rjmp	.+28     	; 0x4360 <_ZN14SoftwareSerial5beginEl+0x108>
    4344:	29 2f       	mov	r18, r25
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	9e 30       	cpi	r25, 0x0E	; 14
    434a:	18 f4       	brcc	.+6      	; 0x4352 <_ZN14SoftwareSerial5beginEl+0xfa>
    434c:	28 50       	subi	r18, 0x08	; 8
    434e:	31 09       	sbc	r19, r1
    4350:	02 c0       	rjmp	.+4      	; 0x4356 <_ZN14SoftwareSerial5beginEl+0xfe>
    4352:	2e 50       	subi	r18, 0x0E	; 14
    4354:	31 09       	sbc	r19, r1
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	01 c0       	rjmp	.+2      	; 0x435c <_ZN14SoftwareSerial5beginEl+0x104>
    435a:	88 0f       	add	r24, r24
    435c:	2a 95       	dec	r18
    435e:	ea f7       	brpl	.-6      	; 0x435a <_ZN14SoftwareSerial5beginEl+0x102>
    4360:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    4362:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4364:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	f1 f7       	brne	.-4      	; 0x4366 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    436a:	ce 01       	movw	r24, r28
}
    436c:	df 91       	pop	r29
    436e:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4370:	0c 94 05 20 	jmp	0x400a	; 0x400a <_ZN14SoftwareSerial6listenEv>

00004374 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    4374:	cf 93       	push	r28
  uint8_t sreg = SREG;
    4376:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4378:	f8 94       	cli
  if (!initialized) {
    437a:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <_ZN8SPIClass11initializedE>
    437e:	81 11       	cpse	r24, r1
    4380:	27 c0       	rjmp	.+78     	; 0x43d0 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4382:	e5 e5       	ldi	r30, 0x55	; 85
    4384:	f4 e0       	ldi	r31, 0x04	; 4
    4386:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    4388:	e0 e4       	ldi	r30, 0x40	; 64
    438a:	f4 e0       	ldi	r31, 0x04	; 4
    438c:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    438e:	e8 2f       	mov	r30, r24
    4390:	f0 e0       	ldi	r31, 0x00	; 0
    4392:	ee 0f       	add	r30, r30
    4394:	ff 1f       	adc	r31, r31
    4396:	ec 58       	subi	r30, 0x8C	; 140
    4398:	fb 4f       	sbci	r31, 0xFB	; 251
    439a:	a5 91       	lpm	r26, Z+
    439c:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    439e:	ec 91       	ld	r30, X
    43a0:	e9 23       	and	r30, r25
    43a2:	21 f4       	brne	.+8      	; 0x43ac <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    43a4:	61 e0       	ldi	r22, 0x01	; 1
    43a6:	8a e0       	ldi	r24, 0x0A	; 10
    43a8:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    43ac:	61 e0       	ldi	r22, 0x01	; 1
    43ae:	8a e0       	ldi	r24, 0x0A	; 10
    43b0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    43b4:	8c b5       	in	r24, 0x2c	; 44
    43b6:	80 61       	ori	r24, 0x10	; 16
    43b8:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    43ba:	8c b5       	in	r24, 0x2c	; 44
    43bc:	80 64       	ori	r24, 0x40	; 64
    43be:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    43c0:	61 e0       	ldi	r22, 0x01	; 1
    43c2:	8d e0       	ldi	r24, 0x0D	; 13
    43c4:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>
    pinMode(MOSI, OUTPUT);
    43c8:	61 e0       	ldi	r22, 0x01	; 1
    43ca:	8b e0       	ldi	r24, 0x0B	; 11
    43cc:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>
  }
  initialized++; // reference count
    43d0:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <_ZN8SPIClass11initializedE>
    43d4:	8f 5f       	subi	r24, 0xFF	; 255
    43d6:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <_ZN8SPIClass11initializedE>
  SREG = sreg;
    43da:	cf bf       	out	0x3f, r28	; 63
}
    43dc:	cf 91       	pop	r28
    43de:	08 95       	ret

000043e0 <_ZN12WiFiEspClass4initEP6Stream>:
*/


bool WiFiEspClass::ping(const char *host)
{
	return EspDrv::ping(host);
    43e0:	cf 93       	push	r28
    43e2:	df 93       	push	r29
    43e4:	ec 01       	movw	r28, r24
    43e6:	63 e1       	ldi	r22, 0x13	; 19
    43e8:	73 e0       	ldi	r23, 0x03	; 3
    43ea:	87 e0       	ldi	r24, 0x07	; 7
    43ec:	95 e0       	ldi	r25, 0x05	; 5
    43ee:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    43f2:	6e e7       	ldi	r22, 0x7E	; 126
    43f4:	74 e0       	ldi	r23, 0x04	; 4
    43f6:	87 e0       	ldi	r24, 0x07	; 7
    43f8:	95 e0       	ldi	r25, 0x05	; 5
    43fa:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    43fe:	ce 01       	movw	r24, r28
    4400:	df 91       	pop	r29
    4402:	cf 91       	pop	r28
    4404:	0c 94 17 2b 	jmp	0x562e	; 0x562e <_ZN6EspDrv14wifiDriverInitEP6Stream>

00004408 <_ZN12WiFiEspClass5beginEPKcS1_>:
    4408:	cb 01       	movw	r24, r22
    440a:	21 e0       	ldi	r18, 0x01	; 1
    440c:	20 93 fc 05 	sts	0x05FC, r18	; 0x8005fc <_ZN12WiFiEspClass7espModeE>
    4410:	ba 01       	movw	r22, r20
    4412:	0e 94 42 2c 	call	0x5884	; 0x5884 <_ZN6EspDrv11wifiConnectEPKcS1_>
    4416:	81 11       	cpse	r24, r1
    4418:	03 c0       	rjmp	.+6      	; 0x4420 <_ZN12WiFiEspClass5beginEPKcS1_+0x18>
    441a:	82 e0       	ldi	r24, 0x02	; 2
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	08 95       	ret
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	08 95       	ret

00004426 <_ZN12WiFiEspClass6statusEv>:
    4426:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <_ZN6EspDrv19getConnectionStatusEv>

0000442a <_ZN12WiFiEspClass13getFreeSocketEv>:
}

uint8_t WiFiEspClass::getFreeSocket()
{
    442a:	e3 eb       	ldi	r30, 0xB3	; 179
    442c:	f1 e0       	ldi	r31, 0x01	; 1
  // ESP Module assigns socket numbers in ascending order, so we will assign them in descending order
    for (int i = MAX_SOCK_NUM - 1; i >= 0; i--)
    442e:	83 e0       	ldi	r24, 0x03	; 3
    4430:	90 e0       	ldi	r25, 0x00	; 0
	{
      if (_state[i] == NA_STATE)
    4432:	32 91       	ld	r19, -Z
    4434:	22 91       	ld	r18, -Z
    4436:	2f 3f       	cpi	r18, 0xFF	; 255
    4438:	3f 4f       	sbci	r19, 0xFF	; 255
    443a:	19 f0       	breq	.+6      	; 0x4442 <_ZN12WiFiEspClass13getFreeSocketEv+0x18>
}

uint8_t WiFiEspClass::getFreeSocket()
{
  // ESP Module assigns socket numbers in ascending order, so we will assign them in descending order
    for (int i = MAX_SOCK_NUM - 1; i >= 0; i--)
    443c:	01 97       	sbiw	r24, 0x01	; 1
    443e:	c8 f7       	brcc	.-14     	; 0x4432 <_ZN12WiFiEspClass13getFreeSocketEv+0x8>
      if (_state[i] == NA_STATE)
      {
          return i;
      }
    }
    return SOCK_NOT_AVAIL;
    4440:	8f ef       	ldi	r24, 0xFF	; 255
}
    4442:	08 95       	ret

00004444 <_ZN12WiFiEspClass14allocateSocketEh>:

void WiFiEspClass::allocateSocket(uint8_t sock)
{
  _state[sock] = sock;
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	fc 01       	movw	r30, r24
    4448:	ee 0f       	add	r30, r30
    444a:	ff 1f       	adc	r31, r31
    444c:	e5 55       	subi	r30, 0x55	; 85
    444e:	fe 4f       	sbci	r31, 0xFE	; 254
    4450:	91 83       	std	Z+1, r25	; 0x01
    4452:	80 83       	st	Z, r24
    4454:	08 95       	ret

00004456 <_ZN12WiFiEspClass13releaseSocketEh>:
}

void WiFiEspClass::releaseSocket(uint8_t sock)
{
  _state[sock] = NA_STATE;
    4456:	e8 2f       	mov	r30, r24
    4458:	f0 e0       	ldi	r31, 0x00	; 0
    445a:	ee 0f       	add	r30, r30
    445c:	ff 1f       	adc	r31, r31
    445e:	e5 55       	subi	r30, 0x55	; 85
    4460:	fe 4f       	sbci	r31, 0xFE	; 254
    4462:	8f ef       	ldi	r24, 0xFF	; 255
    4464:	9f ef       	ldi	r25, 0xFF	; 255
    4466:	91 83       	std	Z+1, r25	; 0x01
    4468:	80 83       	st	Z, r24
    446a:	08 95       	ret

0000446c <_GLOBAL__sub_I__ZN12WiFiEspClass6_stateE>:
}


WiFiEspClass WiFi;
    446c:	0f 93       	push	r16
    446e:	00 e0       	ldi	r16, 0x00	; 0
    4470:	20 e0       	ldi	r18, 0x00	; 0
    4472:	40 e0       	ldi	r20, 0x00	; 0
    4474:	60 e0       	ldi	r22, 0x00	; 0
    4476:	8d ef       	ldi	r24, 0xFD	; 253
    4478:	95 e0       	ldi	r25, 0x05	; 5
    447a:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN9IPAddressC1Ehhhh>
    447e:	0f 91       	pop	r16
    4480:	08 95       	ret

00004482 <_ZN13WiFiEspClient5writeEh>:

// if we do override this, the standard println will call the print
// method twice
size_t WiFiEspClient::println(const __FlashStringHelper *ifsh)
{
	printFSH(ifsh, true);
    4482:	cf 93       	push	r28
    4484:	df 93       	push	r29
    4486:	1f 92       	push	r1
    4488:	cd b7       	in	r28, 0x3d	; 61
    448a:	de b7       	in	r29, 0x3e	; 62
    448c:	69 83       	std	Y+1, r22	; 0x01
    448e:	dc 01       	movw	r26, r24
    4490:	ed 91       	ld	r30, X+
    4492:	fc 91       	ld	r31, X
    4494:	02 80       	ldd	r0, Z+2	; 0x02
    4496:	f3 81       	ldd	r31, Z+3	; 0x03
    4498:	e0 2d       	mov	r30, r0
    449a:	41 e0       	ldi	r20, 0x01	; 1
    449c:	50 e0       	ldi	r21, 0x00	; 0
    449e:	be 01       	movw	r22, r28
    44a0:	6f 5f       	subi	r22, 0xFF	; 255
    44a2:	7f 4f       	sbci	r23, 0xFF	; 255
    44a4:	09 95       	icall
    44a6:	0f 90       	pop	r0
    44a8:	df 91       	pop	r29
    44aa:	cf 91       	pop	r28
    44ac:	08 95       	ret

000044ae <_ZN13WiFiEspClient5flushEv>:
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
    44b2:	ec 01       	movw	r28, r24
    44b4:	e8 81       	ld	r30, Y
    44b6:	f9 81       	ldd	r31, Y+1	; 0x01
    44b8:	00 84       	ldd	r0, Z+8	; 0x08
    44ba:	f1 85       	ldd	r31, Z+9	; 0x09
    44bc:	e0 2d       	mov	r30, r0
    44be:	ce 01       	movw	r24, r28
    44c0:	09 95       	icall
    44c2:	89 2b       	or	r24, r25
    44c4:	41 f0       	breq	.+16     	; 0x44d6 <_ZN13WiFiEspClient5flushEv+0x28>
    44c6:	e8 81       	ld	r30, Y
    44c8:	f9 81       	ldd	r31, Y+1	; 0x01
    44ca:	02 84       	ldd	r0, Z+10	; 0x0a
    44cc:	f3 85       	ldd	r31, Z+11	; 0x0b
    44ce:	e0 2d       	mov	r30, r0
    44d0:	ce 01       	movw	r24, r28
    44d2:	09 95       	icall
    44d4:	ef cf       	rjmp	.-34     	; 0x44b4 <_ZN13WiFiEspClient5flushEv+0x6>
    44d6:	df 91       	pop	r29
    44d8:	cf 91       	pop	r28
    44da:	08 95       	ret

000044dc <_ZN13WiFiEspClientcvbEv>:
    44dc:	21 e0       	ldi	r18, 0x01	; 1
    44de:	fc 01       	movw	r30, r24
    44e0:	84 85       	ldd	r24, Z+12	; 0x0c
    44e2:	8f 3f       	cpi	r24, 0xFF	; 255
    44e4:	09 f4       	brne	.+2      	; 0x44e8 <_ZN13WiFiEspClientcvbEv+0xc>
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	82 2f       	mov	r24, r18
    44ea:	08 95       	ret

000044ec <_ZN13WiFiEspClient9availableEv>:
    44ec:	fc 01       	movw	r30, r24
    44ee:	84 85       	ldd	r24, Z+12	; 0x0c
    44f0:	8f 3f       	cpi	r24, 0xFF	; 255
    44f2:	21 f0       	breq	.+8      	; 0x44fc <_ZN13WiFiEspClient9availableEv+0x10>
    44f4:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <_ZN6EspDrv9availDataEh>
    44f8:	97 ff       	sbrs	r25, 7
    44fa:	02 c0       	rjmp	.+4      	; 0x4500 <_ZN13WiFiEspClient9availableEv+0x14>
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	08 95       	ret

00004502 <_ZN13WiFiEspClient4readEv>:
    4502:	0f 93       	push	r16
    4504:	1f 93       	push	r17
    4506:	cf 93       	push	r28
    4508:	df 93       	push	r29
    450a:	00 d0       	rcall	.+0      	; 0x450c <_ZN13WiFiEspClient4readEv+0xa>
    450c:	cd b7       	in	r28, 0x3d	; 61
    450e:	de b7       	in	r29, 0x3e	; 62
    4510:	8c 01       	movw	r16, r24
    4512:	dc 01       	movw	r26, r24
    4514:	ed 91       	ld	r30, X+
    4516:	fc 91       	ld	r31, X
    4518:	00 84       	ldd	r0, Z+8	; 0x08
    451a:	f1 85       	ldd	r31, Z+9	; 0x09
    451c:	e0 2d       	mov	r30, r0
    451e:	09 95       	icall
    4520:	89 2b       	or	r24, r25
    4522:	d1 f0       	breq	.+52     	; 0x4558 <_ZN13WiFiEspClient4readEv+0x56>
    4524:	19 82       	std	Y+1, r1	; 0x01
    4526:	9e 01       	movw	r18, r28
    4528:	2f 5f       	subi	r18, 0xFF	; 255
    452a:	3f 4f       	sbci	r19, 0xFF	; 255
    452c:	40 e0       	ldi	r20, 0x00	; 0
    452e:	be 01       	movw	r22, r28
    4530:	6e 5f       	subi	r22, 0xFE	; 254
    4532:	7f 4f       	sbci	r23, 0xFF	; 255
    4534:	f8 01       	movw	r30, r16
    4536:	84 85       	ldd	r24, Z+12	; 0x0c
    4538:	0e 94 05 28 	call	0x500a	; 0x500a <_ZN6EspDrv7getDataEhPhbPb>
    453c:	89 81       	ldd	r24, Y+1	; 0x01
    453e:	88 23       	and	r24, r24
    4540:	41 f0       	breq	.+16     	; 0x4552 <_ZN13WiFiEspClient4readEv+0x50>
    4542:	d8 01       	movw	r26, r16
    4544:	1c 96       	adiw	r26, 0x0c	; 12
    4546:	8c 91       	ld	r24, X
    4548:	0e 94 2b 22 	call	0x4456	; 0x4456 <_ZN12WiFiEspClass13releaseSocketEh>
    454c:	8f ef       	ldi	r24, 0xFF	; 255
    454e:	f8 01       	movw	r30, r16
    4550:	84 87       	std	Z+12, r24	; 0x0c
    4552:	8a 81       	ldd	r24, Y+2	; 0x02
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	02 c0       	rjmp	.+4      	; 0x455c <_ZN13WiFiEspClient4readEv+0x5a>
    4558:	8f ef       	ldi	r24, 0xFF	; 255
    455a:	9f ef       	ldi	r25, 0xFF	; 255
    455c:	0f 90       	pop	r0
    455e:	0f 90       	pop	r0
    4560:	df 91       	pop	r29
    4562:	cf 91       	pop	r28
    4564:	1f 91       	pop	r17
    4566:	0f 91       	pop	r16
    4568:	08 95       	ret

0000456a <_ZN13WiFiEspClient4peekEv>:
    456a:	0f 93       	push	r16
    456c:	1f 93       	push	r17
    456e:	cf 93       	push	r28
    4570:	df 93       	push	r29
    4572:	00 d0       	rcall	.+0      	; 0x4574 <_ZN13WiFiEspClient4peekEv+0xa>
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
    4578:	8c 01       	movw	r16, r24
    457a:	dc 01       	movw	r26, r24
    457c:	ed 91       	ld	r30, X+
    457e:	fc 91       	ld	r31, X
    4580:	00 84       	ldd	r0, Z+8	; 0x08
    4582:	f1 85       	ldd	r31, Z+9	; 0x09
    4584:	e0 2d       	mov	r30, r0
    4586:	09 95       	icall
    4588:	89 2b       	or	r24, r25
    458a:	d1 f0       	breq	.+52     	; 0x45c0 <_ZN13WiFiEspClient4peekEv+0x56>
    458c:	19 82       	std	Y+1, r1	; 0x01
    458e:	9e 01       	movw	r18, r28
    4590:	2f 5f       	subi	r18, 0xFF	; 255
    4592:	3f 4f       	sbci	r19, 0xFF	; 255
    4594:	41 e0       	ldi	r20, 0x01	; 1
    4596:	be 01       	movw	r22, r28
    4598:	6e 5f       	subi	r22, 0xFE	; 254
    459a:	7f 4f       	sbci	r23, 0xFF	; 255
    459c:	f8 01       	movw	r30, r16
    459e:	84 85       	ldd	r24, Z+12	; 0x0c
    45a0:	0e 94 05 28 	call	0x500a	; 0x500a <_ZN6EspDrv7getDataEhPhbPb>
    45a4:	89 81       	ldd	r24, Y+1	; 0x01
    45a6:	88 23       	and	r24, r24
    45a8:	41 f0       	breq	.+16     	; 0x45ba <_ZN13WiFiEspClient4peekEv+0x50>
    45aa:	d8 01       	movw	r26, r16
    45ac:	1c 96       	adiw	r26, 0x0c	; 12
    45ae:	8c 91       	ld	r24, X
    45b0:	0e 94 2b 22 	call	0x4456	; 0x4456 <_ZN12WiFiEspClass13releaseSocketEh>
    45b4:	8f ef       	ldi	r24, 0xFF	; 255
    45b6:	f8 01       	movw	r30, r16
    45b8:	84 87       	std	Z+12, r24	; 0x0c
    45ba:	8a 81       	ldd	r24, Y+2	; 0x02
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	02 c0       	rjmp	.+4      	; 0x45c4 <_ZN13WiFiEspClient4peekEv+0x5a>
    45c0:	8f ef       	ldi	r24, 0xFF	; 255
    45c2:	9f ef       	ldi	r25, 0xFF	; 255
    45c4:	0f 90       	pop	r0
    45c6:	0f 90       	pop	r0
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	1f 91       	pop	r17
    45ce:	0f 91       	pop	r16
    45d0:	08 95       	ret

000045d2 <_ZN13WiFiEspClient4readEPhj>:
    45d2:	ef 92       	push	r14
    45d4:	ff 92       	push	r15
    45d6:	0f 93       	push	r16
    45d8:	1f 93       	push	r17
    45da:	cf 93       	push	r28
    45dc:	df 93       	push	r29
    45de:	ec 01       	movw	r28, r24
    45e0:	8b 01       	movw	r16, r22
    45e2:	7a 01       	movw	r14, r20
    45e4:	e8 81       	ld	r30, Y
    45e6:	f9 81       	ldd	r31, Y+1	; 0x01
    45e8:	00 84       	ldd	r0, Z+8	; 0x08
    45ea:	f1 85       	ldd	r31, Z+9	; 0x09
    45ec:	e0 2d       	mov	r30, r0
    45ee:	09 95       	icall
    45f0:	89 2b       	or	r24, r25
    45f2:	59 f0       	breq	.+22     	; 0x460a <_ZN13WiFiEspClient4readEPhj+0x38>
    45f4:	a7 01       	movw	r20, r14
    45f6:	b8 01       	movw	r22, r16
    45f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    45fa:	df 91       	pop	r29
    45fc:	cf 91       	pop	r28
    45fe:	1f 91       	pop	r17
    4600:	0f 91       	pop	r16
    4602:	ff 90       	pop	r15
    4604:	ef 90       	pop	r14
    4606:	0c 94 c5 2c 	jmp	0x598a	; 0x598a <_ZN6EspDrv10getDataBufEhPhj>
    460a:	8f ef       	ldi	r24, 0xFF	; 255
    460c:	9f ef       	ldi	r25, 0xFF	; 255
    460e:	df 91       	pop	r29
    4610:	cf 91       	pop	r28
    4612:	1f 91       	pop	r17
    4614:	0f 91       	pop	r16
    4616:	ff 90       	pop	r15
    4618:	ef 90       	pop	r14
    461a:	08 95       	ret

0000461c <_ZN13WiFiEspClient5writeEPKhj>:
    461c:	0f 93       	push	r16
    461e:	1f 93       	push	r17
    4620:	cf 93       	push	r28
    4622:	df 93       	push	r29
    4624:	ec 01       	movw	r28, r24
    4626:	8c 85       	ldd	r24, Y+12	; 0x0c
    4628:	84 30       	cpi	r24, 0x04	; 4
    462a:	18 f4       	brcc	.+6      	; 0x4632 <_ZN13WiFiEspClient5writeEPKhj+0x16>
    462c:	41 15       	cp	r20, r1
    462e:	51 05       	cpc	r21, r1
    4630:	29 f4       	brne	.+10     	; 0x463c <_ZN13WiFiEspClient5writeEPKhj+0x20>
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	9b 83       	std	Y+3, r25	; 0x03
    4638:	8a 83       	std	Y+2, r24	; 0x02
    463a:	2f c0       	rjmp	.+94     	; 0x469a <_ZN13WiFiEspClient5writeEPKhj+0x7e>
    463c:	8a 01       	movw	r16, r20
    463e:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <_ZN6EspDrv8sendDataEhPKhj>
    4642:	81 11       	cpse	r24, r1
    4644:	2d c0       	rjmp	.+90     	; 0x46a0 <_ZN13WiFiEspClient5writeEPKhj+0x84>
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	9b 83       	std	Y+3, r25	; 0x03
    464c:	8a 83       	std	Y+2, r24	; 0x02
    464e:	63 e1       	ldi	r22, 0x13	; 19
    4650:	73 e0       	ldi	r23, 0x03	; 3
    4652:	87 e0       	ldi	r24, 0x07	; 7
    4654:	95 e0       	ldi	r25, 0x05	; 5
    4656:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    465a:	65 ea       	ldi	r22, 0xA5	; 165
    465c:	74 e0       	ldi	r23, 0x04	; 4
    465e:	87 e0       	ldi	r24, 0x07	; 7
    4660:	95 e0       	ldi	r25, 0x05	; 5
    4662:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
    4666:	65 e2       	ldi	r22, 0x25	; 37
    4668:	72 e0       	ldi	r23, 0x02	; 2
    466a:	87 e0       	ldi	r24, 0x07	; 7
    466c:	95 e0       	ldi	r25, 0x05	; 5
    466e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    4672:	4a e0       	ldi	r20, 0x0A	; 10
    4674:	50 e0       	ldi	r21, 0x00	; 0
    4676:	6c 85       	ldd	r22, Y+12	; 0x0c
    4678:	87 e0       	ldi	r24, 0x07	; 7
    467a:	95 e0       	ldi	r25, 0x05	; 5
    467c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN5Print7printlnEhi>
    4680:	60 ea       	ldi	r22, 0xA0	; 160
    4682:	7f e0       	ldi	r23, 0x0F	; 15
    4684:	80 e0       	ldi	r24, 0x00	; 0
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    468c:	e8 81       	ld	r30, Y
    468e:	f9 81       	ldd	r31, Y+1	; 0x01
    4690:	04 88       	ldd	r0, Z+20	; 0x14
    4692:	f5 89       	ldd	r31, Z+21	; 0x15
    4694:	e0 2d       	mov	r30, r0
    4696:	ce 01       	movw	r24, r28
    4698:	09 95       	icall
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	01 c0       	rjmp	.+2      	; 0x46a2 <_ZN13WiFiEspClient5writeEPKhj+0x86>
    46a0:	c8 01       	movw	r24, r16
    46a2:	df 91       	pop	r29
    46a4:	cf 91       	pop	r28
    46a6:	1f 91       	pop	r17
    46a8:	0f 91       	pop	r16
    46aa:	08 95       	ret

000046ac <_ZN13WiFiEspClient4stopEv>:
    46ac:	cf 93       	push	r28
    46ae:	df 93       	push	r29
    46b0:	fc 01       	movw	r30, r24
    46b2:	24 85       	ldd	r18, Z+12	; 0x0c
    46b4:	2f 3f       	cpi	r18, 0xFF	; 255
    46b6:	11 f1       	breq	.+68     	; 0x46fc <_ZN13WiFiEspClient4stopEv+0x50>
    46b8:	ec 01       	movw	r28, r24
    46ba:	63 e1       	ldi	r22, 0x13	; 19
    46bc:	73 e0       	ldi	r23, 0x03	; 3
    46be:	87 e0       	ldi	r24, 0x07	; 7
    46c0:	95 e0       	ldi	r25, 0x05	; 5
    46c2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    46c6:	66 e9       	ldi	r22, 0x96	; 150
    46c8:	74 e0       	ldi	r23, 0x04	; 4
    46ca:	87 e0       	ldi	r24, 0x07	; 7
    46cc:	95 e0       	ldi	r25, 0x05	; 5
    46ce:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
    46d2:	65 e2       	ldi	r22, 0x25	; 37
    46d4:	72 e0       	ldi	r23, 0x02	; 2
    46d6:	87 e0       	ldi	r24, 0x07	; 7
    46d8:	95 e0       	ldi	r25, 0x05	; 5
    46da:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    46de:	4a e0       	ldi	r20, 0x0A	; 10
    46e0:	50 e0       	ldi	r21, 0x00	; 0
    46e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    46e4:	87 e0       	ldi	r24, 0x07	; 7
    46e6:	95 e0       	ldi	r25, 0x05	; 5
    46e8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN5Print7printlnEhi>
    46ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    46ee:	0e 94 2f 2c 	call	0x585e	; 0x585e <_ZN6EspDrv10stopClientEh>
    46f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    46f4:	0e 94 2b 22 	call	0x4456	; 0x4456 <_ZN12WiFiEspClass13releaseSocketEh>
    46f8:	8f ef       	ldi	r24, 0xFF	; 255
    46fa:	8c 87       	std	Y+12, r24	; 0x0c
    46fc:	df 91       	pop	r29
    46fe:	cf 91       	pop	r28
    4700:	08 95       	ret

00004702 <_ZN13WiFiEspClientC1Ev>:
    4702:	fc 01       	movw	r30, r24
    4704:	13 82       	std	Z+3, r1	; 0x03
    4706:	12 82       	std	Z+2, r1	; 0x02
    4708:	88 ee       	ldi	r24, 0xE8	; 232
    470a:	93 e0       	ldi	r25, 0x03	; 3
    470c:	a0 e0       	ldi	r26, 0x00	; 0
    470e:	b0 e0       	ldi	r27, 0x00	; 0
    4710:	84 83       	std	Z+4, r24	; 0x04
    4712:	95 83       	std	Z+5, r25	; 0x05
    4714:	a6 83       	std	Z+6, r26	; 0x06
    4716:	b7 83       	std	Z+7, r27	; 0x07
    4718:	82 e2       	ldi	r24, 0x22	; 34
    471a:	93 e0       	ldi	r25, 0x03	; 3
    471c:	91 83       	std	Z+1, r25	; 0x01
    471e:	80 83       	st	Z, r24
    4720:	8f ef       	ldi	r24, 0xFF	; 255
    4722:	84 87       	std	Z+12, r24	; 0x0c
    4724:	08 95       	ret

00004726 <_ZN13WiFiEspClient7connectEPKcjh>:
    4726:	df 92       	push	r13
    4728:	ef 92       	push	r14
    472a:	ff 92       	push	r15
    472c:	0f 93       	push	r16
    472e:	1f 93       	push	r17
    4730:	cf 93       	push	r28
    4732:	df 93       	push	r29
    4734:	ec 01       	movw	r28, r24
    4736:	8b 01       	movw	r16, r22
    4738:	7a 01       	movw	r14, r20
    473a:	d2 2e       	mov	r13, r18
    473c:	63 e1       	ldi	r22, 0x13	; 19
    473e:	73 e0       	ldi	r23, 0x03	; 3
    4740:	87 e0       	ldi	r24, 0x07	; 7
    4742:	95 e0       	ldi	r25, 0x05	; 5
    4744:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    4748:	63 ed       	ldi	r22, 0xD3	; 211
    474a:	74 e0       	ldi	r23, 0x04	; 4
    474c:	87 e0       	ldi	r24, 0x07	; 7
    474e:	95 e0       	ldi	r25, 0x05	; 5
    4750:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
    4754:	65 e2       	ldi	r22, 0x25	; 37
    4756:	72 e0       	ldi	r23, 0x02	; 2
    4758:	87 e0       	ldi	r24, 0x07	; 7
    475a:	95 e0       	ldi	r25, 0x05	; 5
    475c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    4760:	b8 01       	movw	r22, r16
    4762:	87 e0       	ldi	r24, 0x07	; 7
    4764:	95 e0       	ldi	r25, 0x05	; 5
    4766:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>
    476a:	0e 94 15 22 	call	0x442a	; 0x442a <_ZN12WiFiEspClass13getFreeSocketEv>
    476e:	8c 87       	std	Y+12, r24	; 0x0c
    4770:	8f 3f       	cpi	r24, 0xFF	; 255
    4772:	71 f0       	breq	.+28     	; 0x4790 <_ZN13WiFiEspClient7connectEPKcjh+0x6a>
    4774:	2d 2d       	mov	r18, r13
    4776:	48 2f       	mov	r20, r24
    4778:	b7 01       	movw	r22, r14
    477a:	c8 01       	movw	r24, r16
    477c:	0e 94 c2 2b 	call	0x5784	; 0x5784 <_ZN6EspDrv11startClientEPKcjhh>
    4780:	88 23       	and	r24, r24
    4782:	91 f0       	breq	.+36     	; 0x47a8 <_ZN13WiFiEspClient7connectEPKcjh+0x82>
    4784:	8c 85       	ldd	r24, Y+12	; 0x0c
    4786:	0e 94 22 22 	call	0x4444	; 0x4444 <_ZN12WiFiEspClass14allocateSocketEh>
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	0e c0       	rjmp	.+28     	; 0x47ac <_ZN13WiFiEspClient7connectEPKcjh+0x86>
    4790:	63 e1       	ldi	r22, 0x13	; 19
    4792:	73 e0       	ldi	r23, 0x03	; 3
    4794:	87 e0       	ldi	r24, 0x07	; 7
    4796:	95 e0       	ldi	r25, 0x05	; 5
    4798:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    479c:	6f eb       	ldi	r22, 0xBF	; 191
    479e:	74 e0       	ldi	r23, 0x04	; 4
    47a0:	87 e0       	ldi	r24, 0x07	; 7
    47a2:	95 e0       	ldi	r25, 0x05	; 5
    47a4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	df 91       	pop	r29
    47ae:	cf 91       	pop	r28
    47b0:	1f 91       	pop	r17
    47b2:	0f 91       	pop	r16
    47b4:	ff 90       	pop	r15
    47b6:	ef 90       	pop	r14
    47b8:	df 90       	pop	r13
    47ba:	08 95       	ret

000047bc <_ZN13WiFiEspClient7connectEPKcj>:
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	0c 94 93 23 	jmp	0x4726	; 0x4726 <_ZN13WiFiEspClient7connectEPKcjh>

000047c2 <_ZN13WiFiEspClient7connectE9IPAddressj>:
    47c2:	cf 92       	push	r12
    47c4:	df 92       	push	r13
    47c6:	ef 92       	push	r14
    47c8:	ff 92       	push	r15
    47ca:	0f 93       	push	r16
    47cc:	1f 93       	push	r17
    47ce:	cf 93       	push	r28
    47d0:	df 93       	push	r29
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
    47d6:	60 97       	sbiw	r28, 0x10	; 16
    47d8:	0f b6       	in	r0, 0x3f	; 63
    47da:	f8 94       	cli
    47dc:	de bf       	out	0x3e, r29	; 62
    47de:	0f be       	out	0x3f, r0	; 63
    47e0:	cd bf       	out	0x3d, r28	; 61
    47e2:	7c 01       	movw	r14, r24
    47e4:	fb 01       	movw	r30, r22
    47e6:	6a 01       	movw	r12, r20
    47e8:	85 81       	ldd	r24, Z+5	; 0x05
    47ea:	1f 92       	push	r1
    47ec:	8f 93       	push	r24
    47ee:	84 81       	ldd	r24, Z+4	; 0x04
    47f0:	1f 92       	push	r1
    47f2:	8f 93       	push	r24
    47f4:	83 81       	ldd	r24, Z+3	; 0x03
    47f6:	1f 92       	push	r1
    47f8:	8f 93       	push	r24
    47fa:	82 81       	ldd	r24, Z+2	; 0x02
    47fc:	1f 92       	push	r1
    47fe:	8f 93       	push	r24
    4800:	81 ee       	ldi	r24, 0xE1	; 225
    4802:	94 e0       	ldi	r25, 0x04	; 4
    4804:	9f 93       	push	r25
    4806:	8f 93       	push	r24
    4808:	8e 01       	movw	r16, r28
    480a:	0f 5f       	subi	r16, 0xFF	; 255
    480c:	1f 4f       	sbci	r17, 0xFF	; 255
    480e:	1f 93       	push	r17
    4810:	0f 93       	push	r16
    4812:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <sprintf_P>
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	a6 01       	movw	r20, r12
    481a:	b8 01       	movw	r22, r16
    481c:	c7 01       	movw	r24, r14
    481e:	0e 94 93 23 	call	0x4726	; 0x4726 <_ZN13WiFiEspClient7connectEPKcjh>
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
    482c:	60 96       	adiw	r28, 0x10	; 16
    482e:	0f b6       	in	r0, 0x3f	; 63
    4830:	f8 94       	cli
    4832:	de bf       	out	0x3e, r29	; 62
    4834:	0f be       	out	0x3f, r0	; 63
    4836:	cd bf       	out	0x3d, r28	; 61
    4838:	df 91       	pop	r29
    483a:	cf 91       	pop	r28
    483c:	1f 91       	pop	r17
    483e:	0f 91       	pop	r16
    4840:	ff 90       	pop	r15
    4842:	ef 90       	pop	r14
    4844:	df 90       	pop	r13
    4846:	cf 90       	pop	r12
    4848:	08 95       	ret

0000484a <_ZN13WiFiEspClient6statusEv>:
    484a:	1f 93       	push	r17
    484c:	cf 93       	push	r28
    484e:	df 93       	push	r29
    4850:	ec 01       	movw	r28, r24
    4852:	8c 85       	ldd	r24, Y+12	; 0x0c
    4854:	8f 3f       	cpi	r24, 0xFF	; 255
    4856:	91 f0       	breq	.+36     	; 0x487c <_ZN13WiFiEspClient6statusEv+0x32>
    4858:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <_ZN6EspDrv9availDataEh>
    485c:	89 2b       	or	r24, r25
    485e:	11 f0       	breq	.+4      	; 0x4864 <_ZN13WiFiEspClient6statusEv+0x1a>
    4860:	14 e0       	ldi	r17, 0x04	; 4
    4862:	0d c0       	rjmp	.+26     	; 0x487e <_ZN13WiFiEspClient6statusEv+0x34>
    4864:	8c 85       	ldd	r24, Y+12	; 0x0c
    4866:	0e 94 da 29 	call	0x53b4	; 0x53b4 <_ZN6EspDrv14getClientStateEh>
    486a:	18 2f       	mov	r17, r24
    486c:	81 11       	cpse	r24, r1
    486e:	f8 cf       	rjmp	.-16     	; 0x4860 <_ZN13WiFiEspClient6statusEv+0x16>
    4870:	8c 85       	ldd	r24, Y+12	; 0x0c
    4872:	0e 94 2b 22 	call	0x4456	; 0x4456 <_ZN12WiFiEspClass13releaseSocketEh>
    4876:	8f ef       	ldi	r24, 0xFF	; 255
    4878:	8c 87       	std	Y+12, r24	; 0x0c
    487a:	01 c0       	rjmp	.+2      	; 0x487e <_ZN13WiFiEspClient6statusEv+0x34>
    487c:	10 e0       	ldi	r17, 0x00	; 0
    487e:	81 2f       	mov	r24, r17
    4880:	df 91       	pop	r29
    4882:	cf 91       	pop	r28
    4884:	1f 91       	pop	r17
    4886:	08 95       	ret

00004888 <_ZN13WiFiEspClient9connectedEv>:
    4888:	0e 94 25 24 	call	0x484a	; 0x484a <_ZN13WiFiEspClient6statusEv>
    488c:	91 e0       	ldi	r25, 0x01	; 1
    488e:	84 30       	cpi	r24, 0x04	; 4
    4890:	09 f0       	breq	.+2      	; 0x4894 <_ZN13WiFiEspClient9connectedEv+0xc>
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	89 2f       	mov	r24, r25
    4896:	08 95       	ret

00004898 <_GLOBAL__sub_I__ZN13WiFiEspClientC2Ev>:
		stop();
		return 0;
	}

	return size;
}
    4898:	0f 93       	push	r16
    489a:	00 e0       	ldi	r16, 0x00	; 0
    489c:	20 e0       	ldi	r18, 0x00	; 0
    489e:	40 e0       	ldi	r20, 0x00	; 0
    48a0:	60 e0       	ldi	r22, 0x00	; 0
    48a2:	83 e0       	ldi	r24, 0x03	; 3
    48a4:	96 e0       	ldi	r25, 0x06	; 6
    48a6:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN9IPAddressC1Ehhhh>
    48aa:	0f 91       	pop	r16
    48ac:	08 95       	ret

000048ae <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    48ae:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <_ZN7TwoWire14rxBufferLengthE>
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	20 91 3e 06 	lds	r18, 0x063E	; 0x80063e <_ZN7TwoWire13rxBufferIndexE>
    48b8:	82 1b       	sub	r24, r18
    48ba:	91 09       	sbc	r25, r1
    48bc:	08 95       	ret

000048be <_ZN7TwoWire4readEv>:
    48be:	90 91 3e 06 	lds	r25, 0x063E	; 0x80063e <_ZN7TwoWire13rxBufferIndexE>
    48c2:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <_ZN7TwoWire14rxBufferLengthE>
    48c6:	98 17       	cp	r25, r24
    48c8:	50 f4       	brcc	.+20     	; 0x48de <_ZN7TwoWire4readEv+0x20>
    48ca:	e9 2f       	mov	r30, r25
    48cc:	f0 e0       	ldi	r31, 0x00	; 0
    48ce:	e1 5c       	subi	r30, 0xC1	; 193
    48d0:	f9 4f       	sbci	r31, 0xF9	; 249
    48d2:	20 81       	ld	r18, Z
    48d4:	30 e0       	ldi	r19, 0x00	; 0
    48d6:	9f 5f       	subi	r25, 0xFF	; 255
    48d8:	90 93 3e 06 	sts	0x063E, r25	; 0x80063e <_ZN7TwoWire13rxBufferIndexE>
    48dc:	02 c0       	rjmp	.+4      	; 0x48e2 <_ZN7TwoWire4readEv+0x24>
    48de:	2f ef       	ldi	r18, 0xFF	; 255
    48e0:	3f ef       	ldi	r19, 0xFF	; 255
    48e2:	c9 01       	movw	r24, r18
    48e4:	08 95       	ret

000048e6 <_ZN7TwoWire4peekEv>:
    48e6:	e0 91 3e 06 	lds	r30, 0x063E	; 0x80063e <_ZN7TwoWire13rxBufferIndexE>
    48ea:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <_ZN7TwoWire14rxBufferLengthE>
    48ee:	e8 17       	cp	r30, r24
    48f0:	30 f4       	brcc	.+12     	; 0x48fe <_ZN7TwoWire4peekEv+0x18>
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	e1 5c       	subi	r30, 0xC1	; 193
    48f6:	f9 4f       	sbci	r31, 0xF9	; 249
    48f8:	80 81       	ld	r24, Z
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	08 95       	ret
    48fe:	8f ef       	ldi	r24, 0xFF	; 255
    4900:	9f ef       	ldi	r25, 0xFF	; 255
    4902:	08 95       	ret

00004904 <_ZN7TwoWire5flushEv>:
    4904:	08 95       	ret

00004906 <_ZN7TwoWire16onReceiveServiceEPhi>:
    4906:	cf 93       	push	r28
    4908:	df 93       	push	r29
    490a:	ec 01       	movw	r28, r24
    490c:	e0 91 15 06 	lds	r30, 0x0615	; 0x800615 <_ZN7TwoWire14user_onReceiveE>
    4910:	f0 91 16 06 	lds	r31, 0x0616	; 0x800616 <_ZN7TwoWire14user_onReceiveE+0x1>
    4914:	30 97       	sbiw	r30, 0x00	; 0
    4916:	f1 f0       	breq	.+60     	; 0x4954 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    4918:	90 91 3e 06 	lds	r25, 0x063E	; 0x80063e <_ZN7TwoWire13rxBufferIndexE>
    491c:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <_ZN7TwoWire14rxBufferLengthE>
    4920:	98 17       	cp	r25, r24
    4922:	c0 f0       	brcs	.+48     	; 0x4954 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	29 2f       	mov	r18, r25
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	26 17       	cp	r18, r22
    492c:	37 07       	cpc	r19, r23
    492e:	54 f4       	brge	.+20     	; 0x4944 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    4930:	de 01       	movw	r26, r28
    4932:	a2 0f       	add	r26, r18
    4934:	b3 1f       	adc	r27, r19
    4936:	4c 91       	ld	r20, X
    4938:	d9 01       	movw	r26, r18
    493a:	a1 5c       	subi	r26, 0xC1	; 193
    493c:	b9 4f       	sbci	r27, 0xF9	; 249
    493e:	4c 93       	st	X, r20
    4940:	9f 5f       	subi	r25, 0xFF	; 255
    4942:	f1 cf       	rjmp	.-30     	; 0x4926 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    4944:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <_ZN7TwoWire13rxBufferIndexE>
    4948:	60 93 3d 06 	sts	0x063D, r22	; 0x80063d <_ZN7TwoWire14rxBufferLengthE>
    494c:	cb 01       	movw	r24, r22
    494e:	df 91       	pop	r29
    4950:	cf 91       	pop	r28
    4952:	09 94       	ijmp
    4954:	df 91       	pop	r29
    4956:	cf 91       	pop	r28
    4958:	08 95       	ret

0000495a <_ZN7TwoWire16onRequestServiceEv>:
    495a:	e0 91 17 06 	lds	r30, 0x0617	; 0x800617 <_ZN7TwoWire14user_onRequestE>
    495e:	f0 91 18 06 	lds	r31, 0x0618	; 0x800618 <_ZN7TwoWire14user_onRequestE+0x1>
    4962:	30 97       	sbiw	r30, 0x00	; 0
    4964:	29 f0       	breq	.+10     	; 0x4970 <_ZN7TwoWire16onRequestServiceEv+0x16>
    4966:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <_ZN7TwoWire13txBufferIndexE>
    496a:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <_ZN7TwoWire14txBufferLengthE>
    496e:	09 94       	ijmp
    4970:	08 95       	ret

00004972 <_ZN7TwoWire5writeEPKhj>:
    4972:	cf 92       	push	r12
    4974:	df 92       	push	r13
    4976:	ef 92       	push	r14
    4978:	ff 92       	push	r15
    497a:	0f 93       	push	r16
    497c:	1f 93       	push	r17
    497e:	cf 93       	push	r28
    4980:	df 93       	push	r29
    4982:	7c 01       	movw	r14, r24
    4984:	cb 01       	movw	r24, r22
    4986:	8a 01       	movw	r16, r20
    4988:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <_ZN7TwoWire12transmittingE>
    498c:	22 23       	and	r18, r18
    498e:	89 f0       	breq	.+34     	; 0x49b2 <_ZN7TwoWire5writeEPKhj+0x40>
    4990:	eb 01       	movw	r28, r22
    4992:	6b 01       	movw	r12, r22
    4994:	c4 0e       	add	r12, r20
    4996:	d5 1e       	adc	r13, r21
    4998:	cc 15       	cp	r28, r12
    499a:	dd 05       	cpc	r29, r13
    499c:	69 f0       	breq	.+26     	; 0x49b8 <_ZN7TwoWire5writeEPKhj+0x46>
    499e:	69 91       	ld	r22, Y+
    49a0:	d7 01       	movw	r26, r14
    49a2:	ed 91       	ld	r30, X+
    49a4:	fc 91       	ld	r31, X
    49a6:	01 90       	ld	r0, Z+
    49a8:	f0 81       	ld	r31, Z
    49aa:	e0 2d       	mov	r30, r0
    49ac:	c7 01       	movw	r24, r14
    49ae:	09 95       	icall
    49b0:	f3 cf       	rjmp	.-26     	; 0x4998 <_ZN7TwoWire5writeEPKhj+0x26>
    49b2:	64 2f       	mov	r22, r20
    49b4:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <twi_transmit>
    49b8:	c8 01       	movw	r24, r16
    49ba:	df 91       	pop	r29
    49bc:	cf 91       	pop	r28
    49be:	1f 91       	pop	r17
    49c0:	0f 91       	pop	r16
    49c2:	ff 90       	pop	r15
    49c4:	ef 90       	pop	r14
    49c6:	df 90       	pop	r13
    49c8:	cf 90       	pop	r12
    49ca:	08 95       	ret

000049cc <_ZN7TwoWire5writeEh>:
    49cc:	cf 93       	push	r28
    49ce:	df 93       	push	r29
    49d0:	1f 92       	push	r1
    49d2:	cd b7       	in	r28, 0x3d	; 61
    49d4:	de b7       	in	r29, 0x3e	; 62
    49d6:	69 83       	std	Y+1, r22	; 0x01
    49d8:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <_ZN7TwoWire12transmittingE>
    49dc:	22 23       	and	r18, r18
    49de:	d1 f0       	breq	.+52     	; 0x4a14 <_ZN7TwoWire5writeEh+0x48>
    49e0:	20 91 1a 06 	lds	r18, 0x061A	; 0x80061a <_ZN7TwoWire14txBufferLengthE>
    49e4:	20 32       	cpi	r18, 0x20	; 32
    49e6:	40 f0       	brcs	.+16     	; 0x49f8 <_ZN7TwoWire5writeEh+0x2c>
    49e8:	21 e0       	ldi	r18, 0x01	; 1
    49ea:	30 e0       	ldi	r19, 0x00	; 0
    49ec:	fc 01       	movw	r30, r24
    49ee:	33 83       	std	Z+3, r19	; 0x03
    49f0:	22 83       	std	Z+2, r18	; 0x02
    49f2:	80 e0       	ldi	r24, 0x00	; 0
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	15 c0       	rjmp	.+42     	; 0x4a22 <_ZN7TwoWire5writeEh+0x56>
    49f8:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <_ZN7TwoWire13txBufferIndexE>
    49fc:	e8 2f       	mov	r30, r24
    49fe:	f0 e0       	ldi	r31, 0x00	; 0
    4a00:	e4 5e       	subi	r30, 0xE4	; 228
    4a02:	f9 4f       	sbci	r31, 0xF9	; 249
    4a04:	99 81       	ldd	r25, Y+1	; 0x01
    4a06:	90 83       	st	Z, r25
    4a08:	8f 5f       	subi	r24, 0xFF	; 255
    4a0a:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <_ZN7TwoWire13txBufferIndexE>
    4a0e:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <_ZN7TwoWire14txBufferLengthE>
    4a12:	05 c0       	rjmp	.+10     	; 0x4a1e <_ZN7TwoWire5writeEh+0x52>
    4a14:	61 e0       	ldi	r22, 0x01	; 1
    4a16:	ce 01       	movw	r24, r28
    4a18:	01 96       	adiw	r24, 0x01	; 1
    4a1a:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <twi_transmit>
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	0f 90       	pop	r0
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	08 95       	ret

00004a2a <_ZN7TwoWireC1Ev>:
    4a2a:	fc 01       	movw	r30, r24
    4a2c:	13 82       	std	Z+3, r1	; 0x03
    4a2e:	12 82       	std	Z+2, r1	; 0x02
    4a30:	88 ee       	ldi	r24, 0xE8	; 232
    4a32:	93 e0       	ldi	r25, 0x03	; 3
    4a34:	a0 e0       	ldi	r26, 0x00	; 0
    4a36:	b0 e0       	ldi	r27, 0x00	; 0
    4a38:	84 83       	std	Z+4, r24	; 0x04
    4a3a:	95 83       	std	Z+5, r25	; 0x05
    4a3c:	a6 83       	std	Z+6, r26	; 0x06
    4a3e:	b7 83       	std	Z+7, r27	; 0x07
    4a40:	80 e4       	ldi	r24, 0x40	; 64
    4a42:	93 e0       	ldi	r25, 0x03	; 3
    4a44:	91 83       	std	Z+1, r25	; 0x01
    4a46:	80 83       	st	Z, r24
    4a48:	08 95       	ret

00004a4a <_ZN7TwoWire5beginEv>:
    4a4a:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <_ZN7TwoWire13rxBufferIndexE>
    4a4e:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <_ZN7TwoWire14rxBufferLengthE>
    4a52:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <_ZN7TwoWire13txBufferIndexE>
    4a56:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <_ZN7TwoWire14txBufferLengthE>
    4a5a:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <twi_init>
    4a5e:	8d ea       	ldi	r24, 0xAD	; 173
    4a60:	94 e2       	ldi	r25, 0x24	; 36
    4a62:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <twi_attachSlaveTxEvent>
    4a66:	83 e8       	ldi	r24, 0x83	; 131
    4a68:	94 e2       	ldi	r25, 0x24	; 36
    4a6a:	0c 94 9b 2e 	jmp	0x5d36	; 0x5d36 <twi_attachSlaveRxEvent>

00004a6e <_ZN7TwoWire17beginTransmissionEh>:
    4a6e:	81 e0       	ldi	r24, 0x01	; 1
    4a70:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <_ZN7TwoWire12transmittingE>
    4a74:	60 93 3c 06 	sts	0x063C, r22	; 0x80063c <_ZN7TwoWire9txAddressE>
    4a78:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <_ZN7TwoWire13txBufferIndexE>
    4a7c:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <_ZN7TwoWire14txBufferLengthE>
    4a80:	08 95       	ret

00004a82 <_ZN7TwoWire15endTransmissionEh>:
    4a82:	0f 93       	push	r16
    4a84:	06 2f       	mov	r16, r22
    4a86:	21 e0       	ldi	r18, 0x01	; 1
    4a88:	40 91 1a 06 	lds	r20, 0x061A	; 0x80061a <_ZN7TwoWire14txBufferLengthE>
    4a8c:	6c e1       	ldi	r22, 0x1C	; 28
    4a8e:	76 e0       	ldi	r23, 0x06	; 6
    4a90:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <_ZN7TwoWire9txAddressE>
    4a94:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <twi_writeTo>
    4a98:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <_ZN7TwoWire13txBufferIndexE>
    4a9c:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <_ZN7TwoWire14txBufferLengthE>
    4aa0:	10 92 19 06 	sts	0x0619, r1	; 0x800619 <_ZN7TwoWire12transmittingE>
    4aa4:	0f 91       	pop	r16
    4aa6:	08 95       	ret

00004aa8 <_ZN7TwoWire11requestFromEhhmhh>:
    4aa8:	4f 92       	push	r4
    4aaa:	5f 92       	push	r5
    4aac:	6f 92       	push	r6
    4aae:	7f 92       	push	r7
    4ab0:	af 92       	push	r10
    4ab2:	bf 92       	push	r11
    4ab4:	cf 92       	push	r12
    4ab6:	ef 92       	push	r14
    4ab8:	ff 92       	push	r15
    4aba:	0f 93       	push	r16
    4abc:	1f 93       	push	r17
    4abe:	cf 93       	push	r28
    4ac0:	df 93       	push	r29
    4ac2:	5c 01       	movw	r10, r24
    4ac4:	f6 2e       	mov	r15, r22
    4ac6:	d4 2f       	mov	r29, r20
    4ac8:	28 01       	movw	r4, r16
    4aca:	39 01       	movw	r6, r18
    4acc:	ee 20       	and	r14, r14
    4ace:	21 f1       	breq	.+72     	; 0x4b18 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    4ad0:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire17beginTransmissionEh>
    4ad4:	ce 2d       	mov	r28, r14
    4ad6:	c4 30       	cpi	r28, 0x04	; 4
    4ad8:	08 f0       	brcs	.+2      	; 0x4adc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    4ada:	c3 e0       	ldi	r28, 0x03	; 3
    4adc:	c1 50       	subi	r28, 0x01	; 1
    4ade:	c0 f0       	brcs	.+48     	; 0x4b10 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    4ae0:	28 e0       	ldi	r18, 0x08	; 8
    4ae2:	c2 9f       	mul	r28, r18
    4ae4:	c0 01       	movw	r24, r0
    4ae6:	11 24       	eor	r1, r1
    4ae8:	a3 01       	movw	r20, r6
    4aea:	92 01       	movw	r18, r4
    4aec:	04 c0       	rjmp	.+8      	; 0x4af6 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    4aee:	56 95       	lsr	r21
    4af0:	47 95       	ror	r20
    4af2:	37 95       	ror	r19
    4af4:	27 95       	ror	r18
    4af6:	8a 95       	dec	r24
    4af8:	d2 f7       	brpl	.-12     	; 0x4aee <_ZN7TwoWire11requestFromEhhmhh+0x46>
    4afa:	ca 01       	movw	r24, r20
    4afc:	b9 01       	movw	r22, r18
    4afe:	d5 01       	movw	r26, r10
    4b00:	ed 91       	ld	r30, X+
    4b02:	fc 91       	ld	r31, X
    4b04:	01 90       	ld	r0, Z+
    4b06:	f0 81       	ld	r31, Z
    4b08:	e0 2d       	mov	r30, r0
    4b0a:	c5 01       	movw	r24, r10
    4b0c:	09 95       	icall
    4b0e:	e6 cf       	rjmp	.-52     	; 0x4adc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    4b10:	60 e0       	ldi	r22, 0x00	; 0
    4b12:	c5 01       	movw	r24, r10
    4b14:	0e 94 41 25 	call	0x4a82	; 0x4a82 <_ZN7TwoWire15endTransmissionEh>
    4b18:	4d 2f       	mov	r20, r29
    4b1a:	d1 32       	cpi	r29, 0x21	; 33
    4b1c:	08 f0       	brcs	.+2      	; 0x4b20 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    4b1e:	40 e2       	ldi	r20, 0x20	; 32
    4b20:	2c 2d       	mov	r18, r12
    4b22:	6f e3       	ldi	r22, 0x3F	; 63
    4b24:	76 e0       	ldi	r23, 0x06	; 6
    4b26:	8f 2d       	mov	r24, r15
    4b28:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <twi_readFrom>
    4b2c:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <_ZN7TwoWire13rxBufferIndexE>
    4b30:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <_ZN7TwoWire14rxBufferLengthE>
    4b34:	df 91       	pop	r29
    4b36:	cf 91       	pop	r28
    4b38:	1f 91       	pop	r17
    4b3a:	0f 91       	pop	r16
    4b3c:	ff 90       	pop	r15
    4b3e:	ef 90       	pop	r14
    4b40:	cf 90       	pop	r12
    4b42:	bf 90       	pop	r11
    4b44:	af 90       	pop	r10
    4b46:	7f 90       	pop	r7
    4b48:	6f 90       	pop	r6
    4b4a:	5f 90       	pop	r5
    4b4c:	4f 90       	pop	r4
    4b4e:	08 95       	ret

00004b50 <_ZN7TwoWire11requestFromEhhh>:
    4b50:	cf 92       	push	r12
    4b52:	ef 92       	push	r14
    4b54:	0f 93       	push	r16
    4b56:	1f 93       	push	r17
    4b58:	c2 2e       	mov	r12, r18
    4b5a:	e1 2c       	mov	r14, r1
    4b5c:	00 e0       	ldi	r16, 0x00	; 0
    4b5e:	10 e0       	ldi	r17, 0x00	; 0
    4b60:	98 01       	movw	r18, r16
    4b62:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_ZN7TwoWire11requestFromEhhmhh>
    4b66:	1f 91       	pop	r17
    4b68:	0f 91       	pop	r16
    4b6a:	ef 90       	pop	r14
    4b6c:	cf 90       	pop	r12
    4b6e:	08 95       	ret

00004b70 <_ZN7TwoWire11requestFromEhh>:
    4b70:	21 e0       	ldi	r18, 0x01	; 1
    4b72:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <_ZN7TwoWire11requestFromEhhh>

00004b76 <_ZN7TwoWire15endTransmissionEv>:
    4b76:	61 e0       	ldi	r22, 0x01	; 1
    4b78:	0c 94 41 25 	jmp	0x4a82	; 0x4a82 <_ZN7TwoWire15endTransmissionEh>

00004b7c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4b7c:	89 e0       	ldi	r24, 0x09	; 9
    4b7e:	96 e0       	ldi	r25, 0x06	; 6
    4b80:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <_ZN7TwoWireC1Ev>

00004b84 <_ZN10co2_sensorC1Ev>:
#include "co2_sensor.h"

co2_sensor::co2_sensor() {
    4b84:	08 95       	ret

00004b86 <_ZN10co2_sensor5beginEi>:
}


boolean co2_sensor::begin(int co2pin) {
    4b86:	fc 01       	movw	r30, r24
    4b88:	86 2f       	mov	r24, r22
  co2analogPin = co2pin;
    4b8a:	60 83       	st	Z, r22
    4b8c:	71 83       	std	Z+1, r23	; 0x01
  pinMode(co2analogPin, INPUT);
    4b8e:	60 e0       	ldi	r22, 0x00	; 0
    4b90:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <pinMode>
  return true;
}
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	08 95       	ret

00004b98 <_ZN10co2_sensor12readCO2levelEv>:


float co2_sensor::readCO2level() {
    4b98:	cf 92       	push	r12
    4b9a:	df 92       	push	r13
    4b9c:	ef 92       	push	r14
    4b9e:	ff 92       	push	r15
  float voltageDiference = 0.0;
  float concentration = 0.0;
  float voltage = 0.0;
  
  int adcVal = analogRead(co2analogPin);
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	80 81       	ld	r24, Z
    4ba4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <analogRead>
  voltage = adcVal*(3.3/4095.0);
    4ba8:	bc 01       	movw	r22, r24
    4baa:	99 0f       	add	r25, r25
    4bac:	88 0b       	sbc	r24, r24
    4bae:	99 0b       	sbc	r25, r25
    4bb0:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatsisf>
    4bb4:	27 e6       	ldi	r18, 0x67	; 103
    4bb6:	30 e4       	ldi	r19, 0x40	; 64
    4bb8:	43 e5       	ldi	r20, 0x53	; 83
    4bba:	5a e3       	ldi	r21, 0x3A	; 58
    4bbc:	0e 94 81 08 	call	0x1102	; 0x1102 <__mulsf3>
    4bc0:	6b 01       	movw	r12, r22
    4bc2:	7c 01       	movw	r14, r24

  if(voltage == 0.0) {
    4bc4:	20 e0       	ldi	r18, 0x00	; 0
    4bc6:	30 e0       	ldi	r19, 0x00	; 0
    4bc8:	a9 01       	movw	r20, r18
    4bca:	0e 94 ae 31 	call	0x635c	; 0x635c <__cmpsf2>
    4bce:	81 11       	cpse	r24, r1
    4bd0:	03 c0       	rjmp	.+6      	; 0x4bd8 <_ZN10co2_sensor12readCO2levelEv+0x40>
    Serial.println("A problem has occurred with the sensor.");
    4bd2:	6e e4       	ldi	r22, 0x4E	; 78
    4bd4:	73 e0       	ldi	r23, 0x03	; 3
    4bd6:	3f c0       	rjmp	.+126    	; 0x4c56 <_ZN10co2_sensor12readCO2levelEv+0xbe>
  }
  else if(voltage < 0.4) {
    4bd8:	2d ec       	ldi	r18, 0xCD	; 205
    4bda:	3c ec       	ldi	r19, 0xCC	; 204
    4bdc:	4c ec       	ldi	r20, 0xCC	; 204
    4bde:	5e e3       	ldi	r21, 0x3E	; 62
    4be0:	c7 01       	movw	r24, r14
    4be2:	b6 01       	movw	r22, r12
    4be4:	0e 94 ae 31 	call	0x635c	; 0x635c <__cmpsf2>
    4be8:	87 ff       	sbrs	r24, 7
    4bea:	03 c0       	rjmp	.+6      	; 0x4bf2 <_ZN10co2_sensor12readCO2levelEv+0x5a>
    Serial.println("Pre-heating the sensor...");
    4bec:	66 e7       	ldi	r22, 0x76	; 118
    4bee:	73 e0       	ldi	r23, 0x03	; 3
    4bf0:	32 c0       	rjmp	.+100    	; 0x4c56 <_ZN10co2_sensor12readCO2levelEv+0xbe>
  }
  else {
    float voltageDiference=voltage-0.4;
    float concentration=(voltageDiference*5000.0)/1.6;

    Serial.print("voltage:");
    4bf2:	60 e9       	ldi	r22, 0x90	; 144
    4bf4:	73 e0       	ldi	r23, 0x03	; 3
    4bf6:	87 e0       	ldi	r24, 0x07	; 7
    4bf8:	95 e0       	ldi	r25, 0x05	; 5
    4bfa:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    Serial.print(voltage);
    4bfe:	22 e0       	ldi	r18, 0x02	; 2
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	b7 01       	movw	r22, r14
    4c04:	a6 01       	movw	r20, r12
    4c06:	87 e0       	ldi	r24, 0x07	; 7
    4c08:	95 e0       	ldi	r25, 0x05	; 5
    4c0a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN5Print5printEdi>
    Serial.println("V");
    4c0e:	69 e9       	ldi	r22, 0x99	; 153
    4c10:	73 e0       	ldi	r23, 0x03	; 3
    4c12:	87 e0       	ldi	r24, 0x07	; 7
    4c14:	95 e0       	ldi	r25, 0x05	; 5
    4c16:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>
    Serial.print(concentration);
    4c1a:	2d ec       	ldi	r18, 0xCD	; 205
    4c1c:	3c ec       	ldi	r19, 0xCC	; 204
    4c1e:	4c ec       	ldi	r20, 0xCC	; 204
    4c20:	5e e3       	ldi	r21, 0x3E	; 62
    4c22:	c7 01       	movw	r24, r14
    4c24:	b6 01       	movw	r22, r12
    4c26:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
    4c2a:	20 e0       	ldi	r18, 0x00	; 0
    4c2c:	30 e4       	ldi	r19, 0x40	; 64
    4c2e:	4c e9       	ldi	r20, 0x9C	; 156
    4c30:	55 e4       	ldi	r21, 0x45	; 69
    4c32:	0e 94 81 08 	call	0x1102	; 0x1102 <__mulsf3>
    4c36:	2d ec       	ldi	r18, 0xCD	; 205
    4c38:	3c ec       	ldi	r19, 0xCC	; 204
    4c3a:	4c ec       	ldi	r20, 0xCC	; 204
    4c3c:	5f e3       	ldi	r21, 0x3F	; 63
    4c3e:	0e 94 b3 31 	call	0x6366	; 0x6366 <__divsf3>
    4c42:	ab 01       	movw	r20, r22
    4c44:	bc 01       	movw	r22, r24
    4c46:	22 e0       	ldi	r18, 0x02	; 2
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	87 e0       	ldi	r24, 0x07	; 7
    4c4c:	95 e0       	ldi	r25, 0x05	; 5
    4c4e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN5Print5printEdi>
    Serial.println("ppm");
    4c52:	6b e9       	ldi	r22, 0x9B	; 155
    4c54:	73 e0       	ldi	r23, 0x03	; 3
    4c56:	87 e0       	ldi	r24, 0x07	; 7
    4c58:	95 e0       	ldi	r25, 0x05	; 5
    4c5a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>
  }

  delay(2000);
    4c5e:	60 ed       	ldi	r22, 0xD0	; 208
    4c60:	77 e0       	ldi	r23, 0x07	; 7
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
  return concentration;
}
    4c6a:	60 e0       	ldi	r22, 0x00	; 0
    4c6c:	70 e0       	ldi	r23, 0x00	; 0
    4c6e:	cb 01       	movw	r24, r22
    4c70:	ff 90       	pop	r15
    4c72:	ef 90       	pop	r14
    4c74:	df 90       	pop	r13
    4c76:	cf 90       	pop	r12
    4c78:	08 95       	ret

00004c7a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4c7a:	08 95       	ret

00004c7c <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    4c7c:	4f 92       	push	r4
    4c7e:	5f 92       	push	r5
    4c80:	6f 92       	push	r6
    4c82:	7f 92       	push	r7
    4c84:	af 92       	push	r10
    4c86:	bf 92       	push	r11
    4c88:	cf 92       	push	r12
    4c8a:	df 92       	push	r13
    4c8c:	ef 92       	push	r14
    4c8e:	ff 92       	push	r15
    4c90:	0f 93       	push	r16
    4c92:	1f 93       	push	r17
    4c94:	cf 93       	push	r28
    4c96:	df 93       	push	r29
    4c98:	cd b7       	in	r28, 0x3d	; 61
    4c9a:	de b7       	in	r29, 0x3e	; 62
    4c9c:	29 01       	movw	r4, r18
    4c9e:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    4ca0:	9b 01       	movw	r18, r22
    4ca2:	ac 01       	movw	r20, r24
    4ca4:	24 19       	sub	r18, r4
    4ca6:	35 09       	sbc	r19, r5
    4ca8:	46 09       	sbc	r20, r6
    4caa:	57 09       	sbc	r21, r7
    4cac:	89 89       	ldd	r24, Y+17	; 0x11
    4cae:	9a 89       	ldd	r25, Y+18	; 0x12
    4cb0:	ab 89       	ldd	r26, Y+19	; 0x13
    4cb2:	bc 89       	ldd	r27, Y+20	; 0x14
    4cb4:	bc 01       	movw	r22, r24
    4cb6:	cd 01       	movw	r24, r26
    4cb8:	6a 19       	sub	r22, r10
    4cba:	7b 09       	sbc	r23, r11
    4cbc:	8c 09       	sbc	r24, r12
    4cbe:	9d 09       	sbc	r25, r13
    4cc0:	0e 94 82 32 	call	0x6504	; 0x6504 <__mulsi3>
    4cc4:	a8 01       	movw	r20, r16
    4cc6:	97 01       	movw	r18, r14
    4cc8:	24 19       	sub	r18, r4
    4cca:	35 09       	sbc	r19, r5
    4ccc:	46 09       	sbc	r20, r6
    4cce:	57 09       	sbc	r21, r7
    4cd0:	0e 94 c8 32 	call	0x6590	; 0x6590 <__divmodsi4>
    4cd4:	ca 01       	movw	r24, r20
    4cd6:	b9 01       	movw	r22, r18
    4cd8:	6a 0d       	add	r22, r10
    4cda:	7b 1d       	adc	r23, r11
    4cdc:	8c 1d       	adc	r24, r12
    4cde:	9d 1d       	adc	r25, r13
}
    4ce0:	df 91       	pop	r29
    4ce2:	cf 91       	pop	r28
    4ce4:	1f 91       	pop	r17
    4ce6:	0f 91       	pop	r16
    4ce8:	ff 90       	pop	r15
    4cea:	ef 90       	pop	r14
    4cec:	df 90       	pop	r13
    4cee:	cf 90       	pop	r12
    4cf0:	bf 90       	pop	r11
    4cf2:	af 90       	pop	r10
    4cf4:	7f 90       	pop	r7
    4cf6:	6f 90       	pop	r6
    4cf8:	5f 90       	pop	r5
    4cfa:	4f 90       	pop	r4
    4cfc:	08 95       	ret

00004cfe <_ZN6EspDrv9availDataEh>:
	LOGDEBUG1(F("> startServer"), port);

	int ret = sendCmd(F("AT+CIPSERVER=%d,%d"), 1000, sock, port);

	return ret==TAG_OK;
}
    4cfe:	cf 93       	push	r28
    4d00:	40 91 66 06 	lds	r20, 0x0666	; 0x800666 <_ZN6EspDrv7_bufPosE>
    4d04:	50 91 67 06 	lds	r21, 0x0667	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    4d08:	60 91 68 06 	lds	r22, 0x0668	; 0x800668 <_ZN6EspDrv7_bufPosE+0x2>
    4d0c:	70 91 69 06 	lds	r23, 0x0669	; 0x800669 <_ZN6EspDrv7_bufPosE+0x3>
    4d10:	14 16       	cp	r1, r20
    4d12:	15 06       	cpc	r1, r21
    4d14:	16 06       	cpc	r1, r22
    4d16:	17 06       	cpc	r1, r23
    4d18:	44 f4       	brge	.+16     	; 0x4d2a <_ZN6EspDrv9availDataEh+0x2c>
    4d1a:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <_ZN6EspDrv7_connIdE>
    4d1e:	98 17       	cp	r25, r24
    4d20:	11 f0       	breq	.+4      	; 0x4d26 <_ZN6EspDrv9availDataEh+0x28>
    4d22:	91 11       	cpse	r25, r1
    4d24:	02 c0       	rjmp	.+4      	; 0x4d2a <_ZN6EspDrv9availDataEh+0x2c>
    4d26:	ca 01       	movw	r24, r20
    4d28:	cb c0       	rjmp	.+406    	; 0x4ec0 <_ZN6EspDrv9availDataEh+0x1c2>
    4d2a:	c8 2f       	mov	r28, r24
    4d2c:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4d30:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4d34:	dc 01       	movw	r26, r24
    4d36:	ed 91       	ld	r30, X+
    4d38:	fc 91       	ld	r31, X
    4d3a:	00 84       	ldd	r0, Z+8	; 0x08
    4d3c:	f1 85       	ldd	r31, Z+9	; 0x09
    4d3e:	e0 2d       	mov	r30, r0
    4d40:	09 95       	icall
    4d42:	89 2b       	or	r24, r25
    4d44:	19 f4       	brne	.+6      	; 0x4d4c <_ZN6EspDrv9availDataEh+0x4e>
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	ba c0       	rjmp	.+372    	; 0x4ec0 <_ZN6EspDrv9availDataEh+0x1c2>
    4d4c:	6f e9       	ldi	r22, 0x9F	; 159
    4d4e:	73 e0       	ldi	r23, 0x03	; 3
    4d50:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4d54:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4d58:	0e 94 a4 31 	call	0x6348	; 0x6348 <_ZN6Stream4findEPc>
    4d5c:	88 23       	and	r24, r24
    4d5e:	99 f3       	breq	.-26     	; 0x4d46 <_ZN6EspDrv9availDataEh+0x48>
    4d60:	41 e0       	ldi	r20, 0x01	; 1
    4d62:	60 e0       	ldi	r22, 0x00	; 0
    4d64:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4d68:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4d6c:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6Stream8parseIntE13LookaheadModec>
    4d70:	60 93 65 06 	sts	0x0665, r22	; 0x800665 <_ZN6EspDrv7_connIdE>
    4d74:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4d78:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	ed 91       	ld	r30, X+
    4d80:	fc 91       	ld	r31, X
    4d82:	02 84       	ldd	r0, Z+10	; 0x0a
    4d84:	f3 85       	ldd	r31, Z+11	; 0x0b
    4d86:	e0 2d       	mov	r30, r0
    4d88:	09 95       	icall
    4d8a:	41 e0       	ldi	r20, 0x01	; 1
    4d8c:	60 e0       	ldi	r22, 0x00	; 0
    4d8e:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4d92:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4d96:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6Stream8parseIntE13LookaheadModec>
    4d9a:	60 93 66 06 	sts	0x0666, r22	; 0x800666 <_ZN6EspDrv7_bufPosE>
    4d9e:	70 93 67 06 	sts	0x0667, r23	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    4da2:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <_ZN6EspDrv7_bufPosE+0x2>
    4da6:	90 93 69 06 	sts	0x0669, r25	; 0x800669 <_ZN6EspDrv7_bufPosE+0x3>
    4daa:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4dae:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4db2:	dc 01       	movw	r26, r24
    4db4:	ed 91       	ld	r30, X+
    4db6:	fc 91       	ld	r31, X
    4db8:	02 84       	ldd	r0, Z+10	; 0x0a
    4dba:	f3 85       	ldd	r31, Z+11	; 0x0b
    4dbc:	e0 2d       	mov	r30, r0
    4dbe:	09 95       	icall
    4dc0:	41 e0       	ldi	r20, 0x01	; 1
    4dc2:	60 e0       	ldi	r22, 0x00	; 0
    4dc4:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4dc8:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4dcc:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6Stream8parseIntE13LookaheadModec>
    4dd0:	60 93 5f 06 	sts	0x065F, r22	; 0x80065f <_ZN6EspDrv9_remoteIpE>
    4dd4:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4dd8:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4ddc:	dc 01       	movw	r26, r24
    4dde:	ed 91       	ld	r30, X+
    4de0:	fc 91       	ld	r31, X
    4de2:	02 84       	ldd	r0, Z+10	; 0x0a
    4de4:	f3 85       	ldd	r31, Z+11	; 0x0b
    4de6:	e0 2d       	mov	r30, r0
    4de8:	09 95       	icall
    4dea:	41 e0       	ldi	r20, 0x01	; 1
    4dec:	60 e0       	ldi	r22, 0x00	; 0
    4dee:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4df2:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4df6:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6Stream8parseIntE13LookaheadModec>
    4dfa:	60 93 60 06 	sts	0x0660, r22	; 0x800660 <_ZN6EspDrv9_remoteIpE+0x1>
    4dfe:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4e02:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4e06:	dc 01       	movw	r26, r24
    4e08:	ed 91       	ld	r30, X+
    4e0a:	fc 91       	ld	r31, X
    4e0c:	02 84       	ldd	r0, Z+10	; 0x0a
    4e0e:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e10:	e0 2d       	mov	r30, r0
    4e12:	09 95       	icall
    4e14:	41 e0       	ldi	r20, 0x01	; 1
    4e16:	60 e0       	ldi	r22, 0x00	; 0
    4e18:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4e1c:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4e20:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6Stream8parseIntE13LookaheadModec>
    4e24:	60 93 61 06 	sts	0x0661, r22	; 0x800661 <_ZN6EspDrv9_remoteIpE+0x2>
    4e28:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4e2c:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4e30:	dc 01       	movw	r26, r24
    4e32:	ed 91       	ld	r30, X+
    4e34:	fc 91       	ld	r31, X
    4e36:	02 84       	ldd	r0, Z+10	; 0x0a
    4e38:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e3a:	e0 2d       	mov	r30, r0
    4e3c:	09 95       	icall
    4e3e:	41 e0       	ldi	r20, 0x01	; 1
    4e40:	60 e0       	ldi	r22, 0x00	; 0
    4e42:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4e46:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4e4a:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6Stream8parseIntE13LookaheadModec>
    4e4e:	60 93 62 06 	sts	0x0662, r22	; 0x800662 <_ZN6EspDrv9_remoteIpE+0x3>
    4e52:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4e56:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	ed 91       	ld	r30, X+
    4e5e:	fc 91       	ld	r31, X
    4e60:	02 84       	ldd	r0, Z+10	; 0x0a
    4e62:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e64:	e0 2d       	mov	r30, r0
    4e66:	09 95       	icall
    4e68:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4e6c:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4e70:	dc 01       	movw	r26, r24
    4e72:	ed 91       	ld	r30, X+
    4e74:	fc 91       	ld	r31, X
    4e76:	02 84       	ldd	r0, Z+10	; 0x0a
    4e78:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e7a:	e0 2d       	mov	r30, r0
    4e7c:	09 95       	icall
    4e7e:	41 e0       	ldi	r20, 0x01	; 1
    4e80:	60 e0       	ldi	r22, 0x00	; 0
    4e82:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4e86:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4e8a:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6Stream8parseIntE13LookaheadModec>
    4e8e:	70 93 64 06 	sts	0x0664, r23	; 0x800664 <_ZN6EspDrv11_remotePortE+0x1>
    4e92:	60 93 63 06 	sts	0x0663, r22	; 0x800663 <_ZN6EspDrv11_remotePortE>
    4e96:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4e9a:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4e9e:	dc 01       	movw	r26, r24
    4ea0:	ed 91       	ld	r30, X+
    4ea2:	fc 91       	ld	r31, X
    4ea4:	02 84       	ldd	r0, Z+10	; 0x0a
    4ea6:	f3 85       	ldd	r31, Z+11	; 0x0b
    4ea8:	e0 2d       	mov	r30, r0
    4eaa:	09 95       	icall
    4eac:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <_ZN6EspDrv7_connIdE>
    4eb0:	c8 17       	cp	r28, r24
    4eb2:	11 f0       	breq	.+4      	; 0x4eb8 <_ZN6EspDrv9availDataEh+0x1ba>
    4eb4:	c1 11       	cpse	r28, r1
    4eb6:	47 cf       	rjmp	.-370    	; 0x4d46 <_ZN6EspDrv9availDataEh+0x48>
    4eb8:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <_ZN6EspDrv7_bufPosE>
    4ebc:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    4ec0:	cf 91       	pop	r28
    4ec2:	08 95       	ret

00004ec4 <_ZN6EspDrv9readUntilEiPKcb>:
    4ec4:	3f 92       	push	r3
    4ec6:	4f 92       	push	r4
    4ec8:	5f 92       	push	r5
    4eca:	6f 92       	push	r6
    4ecc:	7f 92       	push	r7
    4ece:	8f 92       	push	r8
    4ed0:	9f 92       	push	r9
    4ed2:	af 92       	push	r10
    4ed4:	bf 92       	push	r11
    4ed6:	cf 92       	push	r12
    4ed8:	df 92       	push	r13
    4eda:	ef 92       	push	r14
    4edc:	ff 92       	push	r15
    4ede:	0f 93       	push	r16
    4ee0:	1f 93       	push	r17
    4ee2:	cf 93       	push	r28
    4ee4:	df 93       	push	r29
    4ee6:	6c 01       	movw	r12, r24
    4ee8:	2b 01       	movw	r4, r22
    4eea:	34 2e       	mov	r3, r20
    4eec:	80 e7       	ldi	r24, 0x70	; 112
    4eee:	96 e0       	ldi	r25, 0x06	; 6
    4ef0:	0e 94 2a 2d 	call	0x5a54	; 0x5a54 <_ZN10RingBuffer5resetEv>
    4ef4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    4ef8:	4b 01       	movw	r8, r22
    4efa:	5c 01       	movw	r10, r24
    4efc:	66 24       	eor	r6, r6
    4efe:	6a 94       	dec	r6
    4f00:	76 2c       	mov	r7, r6
    4f02:	0d 2c       	mov	r0, r13
    4f04:	00 0c       	add	r0, r0
    4f06:	ee 08       	sbc	r14, r14
    4f08:	ff 08       	sbc	r15, r15
    4f0a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	88 19       	sub	r24, r8
    4f14:	99 09       	sbc	r25, r9
    4f16:	aa 09       	sbc	r26, r10
    4f18:	bb 09       	sbc	r27, r11
    4f1a:	8c 15       	cp	r24, r12
    4f1c:	9d 05       	cpc	r25, r13
    4f1e:	ae 05       	cpc	r26, r14
    4f20:	bf 05       	cpc	r27, r15
    4f22:	08 f0       	brcs	.+2      	; 0x4f26 <_ZN6EspDrv9readUntilEiPKcb+0x62>
    4f24:	46 c0       	rjmp	.+140    	; 0x4fb2 <_ZN6EspDrv9readUntilEiPKcb+0xee>
    4f26:	8f ef       	ldi	r24, 0xFF	; 255
    4f28:	68 16       	cp	r6, r24
    4f2a:	78 06       	cpc	r7, r24
    4f2c:	09 f0       	breq	.+2      	; 0x4f30 <_ZN6EspDrv9readUntilEiPKcb+0x6c>
    4f2e:	41 c0       	rjmp	.+130    	; 0x4fb2 <_ZN6EspDrv9readUntilEiPKcb+0xee>
    4f30:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4f34:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4f38:	dc 01       	movw	r26, r24
    4f3a:	ed 91       	ld	r30, X+
    4f3c:	fc 91       	ld	r31, X
    4f3e:	00 84       	ldd	r0, Z+8	; 0x08
    4f40:	f1 85       	ldd	r31, Z+9	; 0x09
    4f42:	e0 2d       	mov	r30, r0
    4f44:	09 95       	icall
    4f46:	89 2b       	or	r24, r25
    4f48:	01 f3       	breq	.-64     	; 0x4f0a <_ZN6EspDrv9readUntilEiPKcb+0x46>
    4f4a:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    4f4e:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    4f52:	dc 01       	movw	r26, r24
    4f54:	ed 91       	ld	r30, X+
    4f56:	fc 91       	ld	r31, X
    4f58:	02 84       	ldd	r0, Z+10	; 0x0a
    4f5a:	f3 85       	ldd	r31, Z+11	; 0x0b
    4f5c:	e0 2d       	mov	r30, r0
    4f5e:	09 95       	icall
    4f60:	68 2f       	mov	r22, r24
    4f62:	80 e7       	ldi	r24, 0x70	; 112
    4f64:	96 e0       	ldi	r25, 0x06	; 6
    4f66:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <_ZN10RingBuffer4pushEc>
    4f6a:	41 14       	cp	r4, r1
    4f6c:	51 04       	cpc	r5, r1
    4f6e:	51 f0       	breq	.+20     	; 0x4f84 <_ZN6EspDrv9readUntilEiPKcb+0xc0>
    4f70:	b2 01       	movw	r22, r4
    4f72:	80 e7       	ldi	r24, 0x70	; 112
    4f74:	96 e0       	ldi	r25, 0x06	; 6
    4f76:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <_ZN10RingBuffer8endsWithEPKc>
    4f7a:	88 23       	and	r24, r24
    4f7c:	19 f0       	breq	.+6      	; 0x4f84 <_ZN6EspDrv9readUntilEiPKcb+0xc0>
    4f7e:	85 e0       	ldi	r24, 0x05	; 5
    4f80:	68 2e       	mov	r6, r24
    4f82:	71 2c       	mov	r7, r1
    4f84:	33 20       	and	r3, r3
    4f86:	09 f2       	breq	.-126    	; 0x4f0a <_ZN6EspDrv9readUntilEiPKcb+0x46>
    4f88:	03 eb       	ldi	r16, 0xB3	; 179
    4f8a:	11 e0       	ldi	r17, 0x01	; 1
    4f8c:	c0 e0       	ldi	r28, 0x00	; 0
    4f8e:	d0 e0       	ldi	r29, 0x00	; 0
    4f90:	f8 01       	movw	r30, r16
    4f92:	61 91       	ld	r22, Z+
    4f94:	71 91       	ld	r23, Z+
    4f96:	8f 01       	movw	r16, r30
    4f98:	80 e7       	ldi	r24, 0x70	; 112
    4f9a:	96 e0       	ldi	r25, 0x06	; 6
    4f9c:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <_ZN10RingBuffer8endsWithEPKc>
    4fa0:	88 23       	and	r24, r24
    4fa2:	11 f0       	breq	.+4      	; 0x4fa8 <_ZN6EspDrv9readUntilEiPKcb+0xe4>
    4fa4:	3e 01       	movw	r6, r28
    4fa6:	b1 cf       	rjmp	.-158    	; 0x4f0a <_ZN6EspDrv9readUntilEiPKcb+0x46>
    4fa8:	21 96       	adiw	r28, 0x01	; 1
    4faa:	c5 30       	cpi	r28, 0x05	; 5
    4fac:	d1 05       	cpc	r29, r1
    4fae:	81 f7       	brne	.-32     	; 0x4f90 <_ZN6EspDrv9readUntilEiPKcb+0xcc>
    4fb0:	ac cf       	rjmp	.-168    	; 0x4f0a <_ZN6EspDrv9readUntilEiPKcb+0x46>
    4fb2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    4fb6:	dc 01       	movw	r26, r24
    4fb8:	cb 01       	movw	r24, r22
    4fba:	88 19       	sub	r24, r8
    4fbc:	99 09       	sbc	r25, r9
    4fbe:	aa 09       	sbc	r26, r10
    4fc0:	bb 09       	sbc	r27, r11
    4fc2:	8c 15       	cp	r24, r12
    4fc4:	9d 05       	cpc	r25, r13
    4fc6:	ae 05       	cpc	r26, r14
    4fc8:	bf 05       	cpc	r27, r15
    4fca:	60 f0       	brcs	.+24     	; 0x4fe4 <_ZN6EspDrv9readUntilEiPKcb+0x120>
    4fcc:	63 e1       	ldi	r22, 0x13	; 19
    4fce:	73 e0       	ldi	r23, 0x03	; 3
    4fd0:	87 e0       	ldi	r24, 0x07	; 7
    4fd2:	95 e0       	ldi	r25, 0x05	; 5
    4fd4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    4fd8:	6d ee       	ldi	r22, 0xED	; 237
    4fda:	74 e0       	ldi	r23, 0x04	; 4
    4fdc:	87 e0       	ldi	r24, 0x07	; 7
    4fde:	95 e0       	ldi	r25, 0x05	; 5
    4fe0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4fe4:	c3 01       	movw	r24, r6
    4fe6:	df 91       	pop	r29
    4fe8:	cf 91       	pop	r28
    4fea:	1f 91       	pop	r17
    4fec:	0f 91       	pop	r16
    4fee:	ff 90       	pop	r15
    4ff0:	ef 90       	pop	r14
    4ff2:	df 90       	pop	r13
    4ff4:	cf 90       	pop	r12
    4ff6:	bf 90       	pop	r11
    4ff8:	af 90       	pop	r10
    4ffa:	9f 90       	pop	r9
    4ffc:	8f 90       	pop	r8
    4ffe:	7f 90       	pop	r7
    5000:	6f 90       	pop	r6
    5002:	5f 90       	pop	r5
    5004:	4f 90       	pop	r4
    5006:	3f 90       	pop	r3
    5008:	08 95       	ret

0000500a <_ZN6EspDrv7getDataEhPhbPb>:
    500a:	8f 92       	push	r8
    500c:	9f 92       	push	r9
    500e:	af 92       	push	r10
    5010:	bf 92       	push	r11
    5012:	ef 92       	push	r14
    5014:	ff 92       	push	r15
    5016:	0f 93       	push	r16
    5018:	1f 93       	push	r17
    501a:	cf 93       	push	r28
    501c:	df 93       	push	r29
    501e:	c0 91 65 06 	lds	r28, 0x0665	; 0x800665 <_ZN6EspDrv7_connIdE>
    5022:	c8 13       	cpse	r28, r24
    5024:	c2 c0       	rjmp	.+388    	; 0x51aa <_ZN6EspDrv7getDataEhPhbPb+0x1a0>
    5026:	79 01       	movw	r14, r18
    5028:	d4 2f       	mov	r29, r20
    502a:	8b 01       	movw	r16, r22
    502c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    5030:	4b 01       	movw	r8, r22
    5032:	5c 01       	movw	r10, r24
    5034:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    5038:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    503c:	dc 01       	movw	r26, r24
    503e:	ed 91       	ld	r30, X+
    5040:	fc 91       	ld	r31, X
    5042:	00 84       	ldd	r0, Z+8	; 0x08
    5044:	f1 85       	ldd	r31, Z+9	; 0x09
    5046:	e0 2d       	mov	r30, r0
    5048:	09 95       	icall
    504a:	89 2b       	or	r24, r25
    504c:	09 f4       	brne	.+2      	; 0x5050 <_ZN6EspDrv7getDataEhPhbPb+0x46>
    504e:	73 c0       	rjmp	.+230    	; 0x5136 <_ZN6EspDrv7getDataEhPhbPb+0x12c>
    5050:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    5054:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    5058:	dc 01       	movw	r26, r24
    505a:	ed 91       	ld	r30, X+
    505c:	fc 91       	ld	r31, X
    505e:	dd 23       	and	r29, r29
    5060:	39 f0       	breq	.+14     	; 0x5070 <_ZN6EspDrv7getDataEhPhbPb+0x66>
    5062:	04 84       	ldd	r0, Z+12	; 0x0c
    5064:	f5 85       	ldd	r31, Z+13	; 0x0d
    5066:	e0 2d       	mov	r30, r0
    5068:	09 95       	icall
    506a:	f8 01       	movw	r30, r16
    506c:	80 83       	st	Z, r24
    506e:	19 c0       	rjmp	.+50     	; 0x50a2 <_ZN6EspDrv7getDataEhPhbPb+0x98>
    5070:	02 84       	ldd	r0, Z+10	; 0x0a
    5072:	f3 85       	ldd	r31, Z+11	; 0x0b
    5074:	e0 2d       	mov	r30, r0
    5076:	09 95       	icall
    5078:	f8 01       	movw	r30, r16
    507a:	80 83       	st	Z, r24
    507c:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <_ZN6EspDrv7_bufPosE>
    5080:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    5084:	a0 91 68 06 	lds	r26, 0x0668	; 0x800668 <_ZN6EspDrv7_bufPosE+0x2>
    5088:	b0 91 69 06 	lds	r27, 0x0669	; 0x800669 <_ZN6EspDrv7_bufPosE+0x3>
    508c:	01 97       	sbiw	r24, 0x01	; 1
    508e:	a1 09       	sbc	r26, r1
    5090:	b1 09       	sbc	r27, r1
    5092:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <_ZN6EspDrv7_bufPosE>
    5096:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    509a:	a0 93 68 06 	sts	0x0668, r26	; 0x800668 <_ZN6EspDrv7_bufPosE+0x2>
    509e:	b0 93 69 06 	sts	0x0669, r27	; 0x800669 <_ZN6EspDrv7_bufPosE+0x3>
    50a2:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <_ZN6EspDrv7_bufPosE>
    50a6:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    50aa:	a0 91 68 06 	lds	r26, 0x0668	; 0x800668 <_ZN6EspDrv7_bufPosE+0x2>
    50ae:	b0 91 69 06 	lds	r27, 0x0669	; 0x800669 <_ZN6EspDrv7_bufPosE+0x3>
    50b2:	89 2b       	or	r24, r25
    50b4:	8a 2b       	or	r24, r26
    50b6:	8b 2b       	or	r24, r27
    50b8:	11 f0       	breq	.+4      	; 0x50be <_ZN6EspDrv7getDataEhPhbPb+0xb4>
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	77 c0       	rjmp	.+238    	; 0x51ac <_ZN6EspDrv7getDataEhPhbPb+0x1a2>
    50be:	65 e0       	ldi	r22, 0x05	; 5
    50c0:	70 e0       	ldi	r23, 0x00	; 0
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    50ca:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    50ce:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    50d2:	dc 01       	movw	r26, r24
    50d4:	ed 91       	ld	r30, X+
    50d6:	fc 91       	ld	r31, X
    50d8:	00 84       	ldd	r0, Z+8	; 0x08
    50da:	f1 85       	ldd	r31, Z+9	; 0x09
    50dc:	e0 2d       	mov	r30, r0
    50de:	09 95       	icall
    50e0:	89 2b       	or	r24, r25
    50e2:	59 f3       	breq	.-42     	; 0x50ba <_ZN6EspDrv7getDataEhPhbPb+0xb0>
    50e4:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    50e8:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    50ec:	dc 01       	movw	r26, r24
    50ee:	ed 91       	ld	r30, X+
    50f0:	fc 91       	ld	r31, X
    50f2:	04 84       	ldd	r0, Z+12	; 0x0c
    50f4:	f5 85       	ldd	r31, Z+13	; 0x0d
    50f6:	e0 2d       	mov	r30, r0
    50f8:	09 95       	icall
    50fa:	d0 e0       	ldi	r29, 0x00	; 0
    50fc:	e0 96       	adiw	r28, 0x30	; 48
    50fe:	8c 17       	cp	r24, r28
    5100:	9d 07       	cpc	r25, r29
    5102:	d9 f6       	brne	.-74     	; 0x50ba <_ZN6EspDrv7getDataEhPhbPb+0xb0>
    5104:	40 e0       	ldi	r20, 0x00	; 0
    5106:	65 ea       	ldi	r22, 0xA5	; 165
    5108:	73 e0       	ldi	r23, 0x03	; 3
    510a:	84 ef       	ldi	r24, 0xF4	; 244
    510c:	91 e0       	ldi	r25, 0x01	; 1
    510e:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <_ZN6EspDrv9readUntilEiPKcb>
    5112:	05 97       	sbiw	r24, 0x05	; 5
    5114:	61 f0       	breq	.+24     	; 0x512e <_ZN6EspDrv7getDataEhPhbPb+0x124>
    5116:	63 e1       	ldi	r22, 0x13	; 19
    5118:	73 e0       	ldi	r23, 0x03	; 3
    511a:	87 e0       	ldi	r24, 0x07	; 7
    511c:	95 e0       	ldi	r25, 0x05	; 5
    511e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    5122:	6c e6       	ldi	r22, 0x6C	; 108
    5124:	75 e0       	ldi	r23, 0x05	; 5
    5126:	87 e0       	ldi	r24, 0x07	; 7
    5128:	95 e0       	ldi	r25, 0x05	; 5
    512a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	f7 01       	movw	r30, r14
    5132:	80 83       	st	Z, r24
    5134:	3b c0       	rjmp	.+118    	; 0x51ac <_ZN6EspDrv7getDataEhPhbPb+0x1a2>
    5136:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	88 19       	sub	r24, r8
    5140:	99 09       	sbc	r25, r9
    5142:	aa 09       	sbc	r26, r10
    5144:	bb 09       	sbc	r27, r11
    5146:	80 3d       	cpi	r24, 0xD0	; 208
    5148:	97 40       	sbci	r25, 0x07	; 7
    514a:	a1 05       	cpc	r26, r1
    514c:	b1 05       	cpc	r27, r1
    514e:	08 f4       	brcc	.+2      	; 0x5152 <_ZN6EspDrv7getDataEhPhbPb+0x148>
    5150:	71 cf       	rjmp	.-286    	; 0x5034 <_ZN6EspDrv7getDataEhPhbPb+0x2a>
    5152:	63 e1       	ldi	r22, 0x13	; 19
    5154:	73 e0       	ldi	r23, 0x03	; 3
    5156:	87 e0       	ldi	r24, 0x07	; 7
    5158:	95 e0       	ldi	r25, 0x05	; 5
    515a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    515e:	63 e6       	ldi	r22, 0x63	; 99
    5160:	75 e0       	ldi	r23, 0x05	; 5
    5162:	87 e0       	ldi	r24, 0x07	; 7
    5164:	95 e0       	ldi	r25, 0x05	; 5
    5166:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
    516a:	65 e2       	ldi	r22, 0x25	; 37
    516c:	72 e0       	ldi	r23, 0x02	; 2
    516e:	87 e0       	ldi	r24, 0x07	; 7
    5170:	95 e0       	ldi	r25, 0x05	; 5
    5172:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    5176:	40 91 66 06 	lds	r20, 0x0666	; 0x800666 <_ZN6EspDrv7_bufPosE>
    517a:	50 91 67 06 	lds	r21, 0x0667	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    517e:	60 91 68 06 	lds	r22, 0x0668	; 0x800668 <_ZN6EspDrv7_bufPosE+0x2>
    5182:	70 91 69 06 	lds	r23, 0x0669	; 0x800669 <_ZN6EspDrv7_bufPosE+0x3>
    5186:	2a e0       	ldi	r18, 0x0A	; 10
    5188:	30 e0       	ldi	r19, 0x00	; 0
    518a:	87 e0       	ldi	r24, 0x07	; 7
    518c:	95 e0       	ldi	r25, 0x05	; 5
    518e:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN5Print7printlnEli>
    5192:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <_ZN6EspDrv7_bufPosE>
    5196:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    519a:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <_ZN6EspDrv7_bufPosE+0x2>
    519e:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <_ZN6EspDrv7_bufPosE+0x3>
    51a2:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <_ZN6EspDrv7_connIdE>
    51a6:	d8 01       	movw	r26, r16
    51a8:	1c 92       	st	X, r1
    51aa:	80 e0       	ldi	r24, 0x00	; 0
    51ac:	df 91       	pop	r29
    51ae:	cf 91       	pop	r28
    51b0:	1f 91       	pop	r17
    51b2:	0f 91       	pop	r16
    51b4:	ff 90       	pop	r15
    51b6:	ef 90       	pop	r14
    51b8:	bf 90       	pop	r11
    51ba:	af 90       	pop	r10
    51bc:	9f 90       	pop	r9
    51be:	8f 90       	pop	r8
    51c0:	08 95       	ret

000051c2 <_ZN6EspDrv8sendDataEhPKhj>:
    51c2:	cf 92       	push	r12
    51c4:	df 92       	push	r13
    51c6:	ef 92       	push	r14
    51c8:	ff 92       	push	r15
    51ca:	0f 93       	push	r16
    51cc:	1f 93       	push	r17
    51ce:	cf 93       	push	r28
    51d0:	df 93       	push	r29
    51d2:	cd b7       	in	r28, 0x3d	; 61
    51d4:	de b7       	in	r29, 0x3e	; 62
    51d6:	64 97       	sbiw	r28, 0x14	; 20
    51d8:	0f b6       	in	r0, 0x3f	; 63
    51da:	f8 94       	cli
    51dc:	de bf       	out	0x3e, r29	; 62
    51de:	0f be       	out	0x3f, r0	; 63
    51e0:	cd bf       	out	0x3d, r28	; 61
    51e2:	6b 01       	movw	r12, r22
    51e4:	8a 01       	movw	r16, r20
    51e6:	1f 93       	push	r17
    51e8:	4f 93       	push	r20
    51ea:	1f 92       	push	r1
    51ec:	8f 93       	push	r24
    51ee:	82 e5       	ldi	r24, 0x52	; 82
    51f0:	95 e0       	ldi	r25, 0x05	; 5
    51f2:	9f 93       	push	r25
    51f4:	8f 93       	push	r24
    51f6:	9e 01       	movw	r18, r28
    51f8:	2f 5f       	subi	r18, 0xFF	; 255
    51fa:	3f 4f       	sbci	r19, 0xFF	; 255
    51fc:	79 01       	movw	r14, r18
    51fe:	3f 93       	push	r19
    5200:	2f 93       	push	r18
    5202:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <sprintf_P>
    5206:	b7 01       	movw	r22, r14
    5208:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    520c:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    5210:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>
    5214:	40 e0       	ldi	r20, 0x00	; 0
    5216:	6f ea       	ldi	r22, 0xAF	; 175
    5218:	73 e0       	ldi	r23, 0x03	; 3
    521a:	88 ee       	ldi	r24, 0xE8	; 232
    521c:	93 e0       	ldi	r25, 0x03	; 3
    521e:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <_ZN6EspDrv9readUntilEiPKcb>
    5222:	0f b6       	in	r0, 0x3f	; 63
    5224:	f8 94       	cli
    5226:	de bf       	out	0x3e, r29	; 62
    5228:	0f be       	out	0x3f, r0	; 63
    522a:	cd bf       	out	0x3d, r28	; 61
    522c:	05 97       	sbiw	r24, 0x05	; 5
    522e:	49 f0       	breq	.+18     	; 0x5242 <_ZN6EspDrv8sendDataEhPKhj+0x80>
    5230:	63 e1       	ldi	r22, 0x13	; 19
    5232:	73 e0       	ldi	r23, 0x03	; 3
    5234:	87 e0       	ldi	r24, 0x07	; 7
    5236:	95 e0       	ldi	r25, 0x05	; 5
    5238:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    523c:	67 e3       	ldi	r22, 0x37	; 55
    523e:	75 e0       	ldi	r23, 0x05	; 5
    5240:	1e c0       	rjmp	.+60     	; 0x527e <_ZN6EspDrv8sendDataEhPKhj+0xbc>
    5242:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    5246:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    524a:	dc 01       	movw	r26, r24
    524c:	ed 91       	ld	r30, X+
    524e:	fc 91       	ld	r31, X
    5250:	02 80       	ldd	r0, Z+2	; 0x02
    5252:	f3 81       	ldd	r31, Z+3	; 0x03
    5254:	e0 2d       	mov	r30, r0
    5256:	a8 01       	movw	r20, r16
    5258:	b6 01       	movw	r22, r12
    525a:	09 95       	icall
    525c:	41 e0       	ldi	r20, 0x01	; 1
    525e:	60 e0       	ldi	r22, 0x00	; 0
    5260:	70 e0       	ldi	r23, 0x00	; 0
    5262:	80 ed       	ldi	r24, 0xD0	; 208
    5264:	97 e0       	ldi	r25, 0x07	; 7
    5266:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <_ZN6EspDrv9readUntilEiPKcb>
    526a:	03 97       	sbiw	r24, 0x03	; 3
    526c:	71 f0       	breq	.+28     	; 0x528a <_ZN6EspDrv8sendDataEhPKhj+0xc8>
    526e:	63 e1       	ldi	r22, 0x13	; 19
    5270:	73 e0       	ldi	r23, 0x03	; 3
    5272:	87 e0       	ldi	r24, 0x07	; 7
    5274:	95 e0       	ldi	r25, 0x05	; 5
    5276:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    527a:	6c e1       	ldi	r22, 0x1C	; 28
    527c:	75 e0       	ldi	r23, 0x05	; 5
    527e:	87 e0       	ldi	r24, 0x07	; 7
    5280:	95 e0       	ldi	r25, 0x05	; 5
    5282:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5286:	80 e0       	ldi	r24, 0x00	; 0
    5288:	01 c0       	rjmp	.+2      	; 0x528c <_ZN6EspDrv8sendDataEhPKhj+0xca>
    528a:	81 e0       	ldi	r24, 0x01	; 1
    528c:	64 96       	adiw	r28, 0x14	; 20
    528e:	0f b6       	in	r0, 0x3f	; 63
    5290:	f8 94       	cli
    5292:	de bf       	out	0x3e, r29	; 62
    5294:	0f be       	out	0x3f, r0	; 63
    5296:	cd bf       	out	0x3d, r28	; 61
    5298:	df 91       	pop	r29
    529a:	cf 91       	pop	r28
    529c:	1f 91       	pop	r17
    529e:	0f 91       	pop	r16
    52a0:	ff 90       	pop	r15
    52a2:	ef 90       	pop	r14
    52a4:	df 90       	pop	r13
    52a6:	cf 90       	pop	r12
    52a8:	08 95       	ret

000052aa <_ZN6EspDrv11espEmptyBufEb>:
    52aa:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    52ae:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    52b2:	dc 01       	movw	r26, r24
    52b4:	ed 91       	ld	r30, X+
    52b6:	fc 91       	ld	r31, X
    52b8:	00 84       	ldd	r0, Z+8	; 0x08
    52ba:	f1 85       	ldd	r31, Z+9	; 0x09
    52bc:	e0 2d       	mov	r30, r0
    52be:	09 95       	icall
    52c0:	18 16       	cp	r1, r24
    52c2:	19 06       	cpc	r1, r25
    52c4:	64 f4       	brge	.+24     	; 0x52de <_ZN6EspDrv11espEmptyBufEb+0x34>
    52c6:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    52ca:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    52ce:	dc 01       	movw	r26, r24
    52d0:	ed 91       	ld	r30, X+
    52d2:	fc 91       	ld	r31, X
    52d4:	02 84       	ldd	r0, Z+10	; 0x0a
    52d6:	f3 85       	ldd	r31, Z+11	; 0x0b
    52d8:	e0 2d       	mov	r30, r0
    52da:	09 95       	icall
    52dc:	e6 cf       	rjmp	.-52     	; 0x52aa <_ZN6EspDrv11espEmptyBufEb>
    52de:	08 95       	ret

000052e0 <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_Pci>:
    52e0:	af 92       	push	r10
    52e2:	bf 92       	push	r11
    52e4:	cf 92       	push	r12
    52e6:	df 92       	push	r13
    52e8:	ef 92       	push	r14
    52ea:	ff 92       	push	r15
    52ec:	0f 93       	push	r16
    52ee:	1f 93       	push	r17
    52f0:	cf 93       	push	r28
    52f2:	df 93       	push	r29
    52f4:	5c 01       	movw	r10, r24
    52f6:	6b 01       	movw	r12, r22
    52f8:	7a 01       	movw	r14, r20
    52fa:	e9 01       	movw	r28, r18
    52fc:	18 82       	st	Y, r1
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	0e 94 55 29 	call	0x52aa	; 0x52aa <_ZN6EspDrv11espEmptyBufEb>
    5304:	b5 01       	movw	r22, r10
    5306:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    530a:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    530e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5312:	41 e0       	ldi	r20, 0x01	; 1
    5314:	b6 01       	movw	r22, r12
    5316:	88 ee       	ldi	r24, 0xE8	; 232
    5318:	93 e0       	ldi	r25, 0x03	; 3
    531a:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <_ZN6EspDrv9readUntilEiPKcb>
    531e:	85 30       	cpi	r24, 0x05	; 5
    5320:	91 05       	cpc	r25, r1
    5322:	71 f5       	brne	.+92     	; 0x5380 <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_Pci+0xa0>
    5324:	80 e7       	ldi	r24, 0x70	; 112
    5326:	96 e0       	ldi	r25, 0x06	; 6
    5328:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <_ZN10RingBuffer4initEv>
    532c:	41 e0       	ldi	r20, 0x01	; 1
    532e:	b7 01       	movw	r22, r14
    5330:	84 ef       	ldi	r24, 0xF4	; 244
    5332:	91 e0       	ldi	r25, 0x01	; 1
    5334:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <_ZN6EspDrv9readUntilEiPKcb>
    5338:	05 97       	sbiw	r24, 0x05	; 5
    533a:	c9 f4       	brne	.+50     	; 0x536e <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_Pci+0x8e>
    533c:	f7 01       	movw	r30, r14
    533e:	01 90       	ld	r0, Z+
    5340:	00 20       	and	r0, r0
    5342:	e9 f7       	brne	.-6      	; 0x533e <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_Pci+0x5e>
    5344:	31 97       	sbiw	r30, 0x01	; 1
    5346:	af 01       	movw	r20, r30
    5348:	4e 19       	sub	r20, r14
    534a:	5f 09       	sbc	r21, r15
    534c:	98 01       	movw	r18, r16
    534e:	21 50       	subi	r18, 0x01	; 1
    5350:	31 09       	sbc	r19, r1
    5352:	be 01       	movw	r22, r28
    5354:	80 e7       	ldi	r24, 0x70	; 112
    5356:	96 e0       	ldi	r25, 0x06	; 6
    5358:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <_ZN10RingBuffer7getStrNEPcjj>
    535c:	41 e0       	ldi	r20, 0x01	; 1
    535e:	60 e0       	ldi	r22, 0x00	; 0
    5360:	70 e0       	ldi	r23, 0x00	; 0
    5362:	80 ed       	ldi	r24, 0xD0	; 208
    5364:	97 e0       	ldi	r25, 0x07	; 7
    5366:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <_ZN6EspDrv9readUntilEiPKcb>
    536a:	81 e0       	ldi	r24, 0x01	; 1
    536c:	18 c0       	rjmp	.+48     	; 0x539e <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_Pci+0xbe>
    536e:	63 e1       	ldi	r22, 0x13	; 19
    5370:	73 e0       	ldi	r23, 0x03	; 3
    5372:	87 e0       	ldi	r24, 0x07	; 7
    5374:	95 e0       	ldi	r25, 0x05	; 5
    5376:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    537a:	6a e0       	ldi	r22, 0x0A	; 10
    537c:	75 e0       	ldi	r23, 0x05	; 5
    537e:	0a c0       	rjmp	.+20     	; 0x5394 <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_Pci+0xb4>
    5380:	05 97       	sbiw	r24, 0x05	; 5
    5382:	60 f0       	brcs	.+24     	; 0x539c <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_Pci+0xbc>
    5384:	63 e1       	ldi	r22, 0x13	; 19
    5386:	73 e0       	ldi	r23, 0x03	; 3
    5388:	87 e0       	ldi	r24, 0x07	; 7
    538a:	95 e0       	ldi	r25, 0x05	; 5
    538c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    5390:	6d ef       	ldi	r22, 0xFD	; 253
    5392:	74 e0       	ldi	r23, 0x04	; 4
    5394:	87 e0       	ldi	r24, 0x07	; 7
    5396:	95 e0       	ldi	r25, 0x05	; 5
    5398:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    539c:	80 e0       	ldi	r24, 0x00	; 0
    539e:	df 91       	pop	r29
    53a0:	cf 91       	pop	r28
    53a2:	1f 91       	pop	r17
    53a4:	0f 91       	pop	r16
    53a6:	ff 90       	pop	r15
    53a8:	ef 90       	pop	r14
    53aa:	df 90       	pop	r13
    53ac:	cf 90       	pop	r12
    53ae:	bf 90       	pop	r11
    53b0:	af 90       	pop	r10
    53b2:	08 95       	ret

000053b4 <_ZN6EspDrv14getClientStateEh>:
    53b4:	ef 92       	push	r14
    53b6:	ff 92       	push	r15
    53b8:	0f 93       	push	r16
    53ba:	1f 93       	push	r17
    53bc:	cf 93       	push	r28
    53be:	df 93       	push	r29
    53c0:	cd b7       	in	r28, 0x3d	; 61
    53c2:	de b7       	in	r29, 0x3e	; 62
    53c4:	6e 97       	sbiw	r28, 0x1e	; 30
    53c6:	0f b6       	in	r0, 0x3f	; 63
    53c8:	f8 94       	cli
    53ca:	de bf       	out	0x3e, r29	; 62
    53cc:	0f be       	out	0x3f, r0	; 63
    53ce:	cd bf       	out	0x3d, r28	; 61
    53d0:	1f 92       	push	r1
    53d2:	8f 93       	push	r24
    53d4:	82 e2       	ldi	r24, 0x22	; 34
    53d6:	96 e0       	ldi	r25, 0x06	; 6
    53d8:	9f 93       	push	r25
    53da:	8f 93       	push	r24
    53dc:	ce 01       	movw	r24, r28
    53de:	01 96       	adiw	r24, 0x01	; 1
    53e0:	7c 01       	movw	r14, r24
    53e2:	9f 93       	push	r25
    53e4:	8f 93       	push	r24
    53e6:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <sprintf_P>
    53ea:	0a e0       	ldi	r16, 0x0A	; 10
    53ec:	10 e0       	ldi	r17, 0x00	; 0
    53ee:	9e 01       	movw	r18, r28
    53f0:	2b 5e       	subi	r18, 0xEB	; 235
    53f2:	3f 4f       	sbci	r19, 0xFF	; 255
    53f4:	43 ea       	ldi	r20, 0xA3	; 163
    53f6:	53 e0       	ldi	r21, 0x03	; 3
    53f8:	b7 01       	movw	r22, r14
    53fa:	85 e1       	ldi	r24, 0x15	; 21
    53fc:	96 e0       	ldi	r25, 0x06	; 6
    53fe:	0e 94 70 29 	call	0x52e0	; 0x52e0 <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_Pci>
    5402:	0f 90       	pop	r0
    5404:	0f 90       	pop	r0
    5406:	0f 90       	pop	r0
    5408:	0f 90       	pop	r0
    540a:	0f 90       	pop	r0
    540c:	0f 90       	pop	r0
    540e:	6e 96       	adiw	r28, 0x1e	; 30
    5410:	0f b6       	in	r0, 0x3f	; 63
    5412:	f8 94       	cli
    5414:	de bf       	out	0x3e, r29	; 62
    5416:	0f be       	out	0x3f, r0	; 63
    5418:	cd bf       	out	0x3d, r28	; 61
    541a:	df 91       	pop	r29
    541c:	cf 91       	pop	r28
    541e:	1f 91       	pop	r17
    5420:	0f 91       	pop	r16
    5422:	ff 90       	pop	r15
    5424:	ef 90       	pop	r14
    5426:	08 95       	ret

00005428 <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperS2_S2_Pci>:
    5428:	4f 92       	push	r4
    542a:	5f 92       	push	r5
    542c:	6f 92       	push	r6
    542e:	7f 92       	push	r7
    5430:	8f 92       	push	r8
    5432:	9f 92       	push	r9
    5434:	af 92       	push	r10
    5436:	bf 92       	push	r11
    5438:	cf 92       	push	r12
    543a:	df 92       	push	r13
    543c:	ef 92       	push	r14
    543e:	ff 92       	push	r15
    5440:	0f 93       	push	r16
    5442:	1f 93       	push	r17
    5444:	cf 93       	push	r28
    5446:	df 93       	push	r29
    5448:	cd b7       	in	r28, 0x3d	; 61
    544a:	de b7       	in	r29, 0x3e	; 62
    544c:	4c 01       	movw	r8, r24
    544e:	6b 01       	movw	r12, r22
    5450:	5a 01       	movw	r10, r20
    5452:	39 01       	movw	r6, r18
    5454:	4d b6       	in	r4, 0x3d	; 61
    5456:	5e b6       	in	r5, 0x3e	; 62
    5458:	cb 01       	movw	r24, r22
    545a:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__strlen_P>
    545e:	01 96       	adiw	r24, 0x01	; 1
    5460:	2d b7       	in	r18, 0x3d	; 61
    5462:	3e b7       	in	r19, 0x3e	; 62
    5464:	28 1b       	sub	r18, r24
    5466:	39 0b       	sbc	r19, r25
    5468:	0f b6       	in	r0, 0x3f	; 63
    546a:	f8 94       	cli
    546c:	3e bf       	out	0x3e, r19	; 62
    546e:	0f be       	out	0x3f, r0	; 63
    5470:	2d bf       	out	0x3d, r18	; 61
    5472:	8d b7       	in	r24, 0x3d	; 61
    5474:	9e b7       	in	r25, 0x3e	; 62
    5476:	01 96       	adiw	r24, 0x01	; 1
    5478:	7c 01       	movw	r14, r24
    547a:	b6 01       	movw	r22, r12
    547c:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <strcpy_P>
    5480:	c5 01       	movw	r24, r10
    5482:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__strlen_P>
    5486:	01 96       	adiw	r24, 0x01	; 1
    5488:	2d b7       	in	r18, 0x3d	; 61
    548a:	3e b7       	in	r19, 0x3e	; 62
    548c:	28 1b       	sub	r18, r24
    548e:	39 0b       	sbc	r19, r25
    5490:	0f b6       	in	r0, 0x3f	; 63
    5492:	f8 94       	cli
    5494:	3e bf       	out	0x3e, r19	; 62
    5496:	0f be       	out	0x3f, r0	; 63
    5498:	2d bf       	out	0x3d, r18	; 61
    549a:	8d b7       	in	r24, 0x3d	; 61
    549c:	9e b7       	in	r25, 0x3e	; 62
    549e:	01 96       	adiw	r24, 0x01	; 1
    54a0:	6c 01       	movw	r12, r24
    54a2:	b5 01       	movw	r22, r10
    54a4:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <strcpy_P>
    54a8:	93 01       	movw	r18, r6
    54aa:	a6 01       	movw	r20, r12
    54ac:	b7 01       	movw	r22, r14
    54ae:	c4 01       	movw	r24, r8
    54b0:	0e 94 70 29 	call	0x52e0	; 0x52e0 <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperPKcS4_Pci>
    54b4:	0f b6       	in	r0, 0x3f	; 63
    54b6:	f8 94       	cli
    54b8:	5e be       	out	0x3e, r5	; 62
    54ba:	0f be       	out	0x3f, r0	; 63
    54bc:	4d be       	out	0x3d, r4	; 61
    54be:	df 91       	pop	r29
    54c0:	cf 91       	pop	r28
    54c2:	1f 91       	pop	r17
    54c4:	0f 91       	pop	r16
    54c6:	ff 90       	pop	r15
    54c8:	ef 90       	pop	r14
    54ca:	df 90       	pop	r13
    54cc:	cf 90       	pop	r12
    54ce:	bf 90       	pop	r11
    54d0:	af 90       	pop	r10
    54d2:	9f 90       	pop	r9
    54d4:	8f 90       	pop	r8
    54d6:	7f 90       	pop	r7
    54d8:	6f 90       	pop	r6
    54da:	5f 90       	pop	r5
    54dc:	4f 90       	pop	r4
    54de:	08 95       	ret

000054e0 <_ZN6EspDrv19getConnectionStatusEv>:
    54e0:	0f 93       	push	r16
    54e2:	1f 93       	push	r17
    54e4:	cf 93       	push	r28
    54e6:	df 93       	push	r29
    54e8:	cd b7       	in	r28, 0x3d	; 61
    54ea:	de b7       	in	r29, 0x3e	; 62
    54ec:	2a 97       	sbiw	r28, 0x0a	; 10
    54ee:	0f b6       	in	r0, 0x3f	; 63
    54f0:	f8 94       	cli
    54f2:	de bf       	out	0x3e, r29	; 62
    54f4:	0f be       	out	0x3f, r0	; 63
    54f6:	cd bf       	out	0x3d, r28	; 61
    54f8:	0a e0       	ldi	r16, 0x0A	; 10
    54fa:	10 e0       	ldi	r17, 0x00	; 0
    54fc:	9e 01       	movw	r18, r28
    54fe:	2f 5f       	subi	r18, 0xFF	; 255
    5500:	3f 4f       	sbci	r19, 0xFF	; 255
    5502:	46 e4       	ldi	r20, 0x46	; 70
    5504:	56 e0       	ldi	r21, 0x06	; 6
    5506:	6e e3       	ldi	r22, 0x3E	; 62
    5508:	76 e0       	ldi	r23, 0x06	; 6
    550a:	81 e3       	ldi	r24, 0x31	; 49
    550c:	96 e0       	ldi	r25, 0x06	; 6
    550e:	0e 94 14 2a 	call	0x5428	; 0x5428 <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperS2_S2_Pci>
    5512:	88 23       	and	r24, r24
    5514:	71 f0       	breq	.+28     	; 0x5532 <_ZN6EspDrv19getConnectionStatusEv+0x52>
    5516:	ce 01       	movw	r24, r28
    5518:	01 96       	adiw	r24, 0x01	; 1
    551a:	0e 94 6d 35 	call	0x6ada	; 0x6ada <atoi>
    551e:	9c 01       	movw	r18, r24
    5520:	22 50       	subi	r18, 0x02	; 2
    5522:	31 09       	sbc	r19, r1
    5524:	23 30       	cpi	r18, 0x03	; 3
    5526:	31 05       	cpc	r19, r1
    5528:	30 f0       	brcs	.+12     	; 0x5536 <_ZN6EspDrv19getConnectionStatusEv+0x56>
    552a:	05 97       	sbiw	r24, 0x05	; 5
    552c:	31 f0       	breq	.+12     	; 0x553a <_ZN6EspDrv19getConnectionStatusEv+0x5a>
    552e:	80 e0       	ldi	r24, 0x00	; 0
    5530:	05 c0       	rjmp	.+10     	; 0x553c <_ZN6EspDrv19getConnectionStatusEv+0x5c>
    5532:	8f ef       	ldi	r24, 0xFF	; 255
    5534:	03 c0       	rjmp	.+6      	; 0x553c <_ZN6EspDrv19getConnectionStatusEv+0x5c>
    5536:	81 e0       	ldi	r24, 0x01	; 1
    5538:	01 c0       	rjmp	.+2      	; 0x553c <_ZN6EspDrv19getConnectionStatusEv+0x5c>
    553a:	83 e0       	ldi	r24, 0x03	; 3
    553c:	2a 96       	adiw	r28, 0x0a	; 10
    553e:	0f b6       	in	r0, 0x3f	; 63
    5540:	f8 94       	cli
    5542:	de bf       	out	0x3e, r29	; 62
    5544:	0f be       	out	0x3f, r0	; 63
    5546:	cd bf       	out	0x3d, r28	; 61
    5548:	df 91       	pop	r29
    554a:	cf 91       	pop	r28
    554c:	1f 91       	pop	r17
    554e:	0f 91       	pop	r16
    5550:	08 95       	ret

00005552 <_ZN6EspDrv12getFwVersionEv>:
    5552:	0f 93       	push	r16
    5554:	1f 93       	push	r17
    5556:	10 92 6a 06 	sts	0x066A, r1	; 0x80066a <_ZN6EspDrv9fwVersionE>
    555a:	06 e0       	ldi	r16, 0x06	; 6
    555c:	10 e0       	ldi	r17, 0x00	; 0
    555e:	2a e6       	ldi	r18, 0x6A	; 106
    5560:	36 e0       	ldi	r19, 0x06	; 6
    5562:	42 e1       	ldi	r20, 0x12	; 18
    5564:	56 e0       	ldi	r21, 0x06	; 6
    5566:	65 e0       	ldi	r22, 0x05	; 5
    5568:	76 e0       	ldi	r23, 0x06	; 6
    556a:	8e ef       	ldi	r24, 0xFE	; 254
    556c:	95 e0       	ldi	r25, 0x05	; 5
    556e:	0e 94 14 2a 	call	0x5428	; 0x5428 <_ZN6EspDrv10sendCmdGetEPK19__FlashStringHelperS2_S2_Pci>
    5572:	8a e6       	ldi	r24, 0x6A	; 106
    5574:	96 e0       	ldi	r25, 0x06	; 6
    5576:	1f 91       	pop	r17
    5578:	0f 91       	pop	r16
    557a:	08 95       	ret

0000557c <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperi>:
    557c:	0f 93       	push	r16
    557e:	1f 93       	push	r17
    5580:	cf 93       	push	r28
    5582:	df 93       	push	r29
    5584:	8c 01       	movw	r16, r24
    5586:	eb 01       	movw	r28, r22
    5588:	81 e0       	ldi	r24, 0x01	; 1
    558a:	0e 94 55 29 	call	0x52aa	; 0x52aa <_ZN6EspDrv11espEmptyBufEb>
    558e:	b8 01       	movw	r22, r16
    5590:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    5594:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    5598:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    559c:	41 e0       	ldi	r20, 0x01	; 1
    559e:	60 e0       	ldi	r22, 0x00	; 0
    55a0:	70 e0       	ldi	r23, 0x00	; 0
    55a2:	ce 01       	movw	r24, r28
    55a4:	df 91       	pop	r29
    55a6:	cf 91       	pop	r28
    55a8:	1f 91       	pop	r17
    55aa:	0f 91       	pop	r16
    55ac:	0c 94 62 27 	jmp	0x4ec4	; 0x4ec4 <_ZN6EspDrv9readUntilEiPKcb>

000055b0 <_ZN6EspDrv5resetEv>:
    55b0:	68 ee       	ldi	r22, 0xE8	; 232
    55b2:	73 e0       	ldi	r23, 0x03	; 3
    55b4:	8b ec       	ldi	r24, 0xCB	; 203
    55b6:	96 e0       	ldi	r25, 0x06	; 6
    55b8:	0e 94 be 2a 	call	0x557c	; 0x557c <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperi>
    55bc:	68 eb       	ldi	r22, 0xB8	; 184
    55be:	7b e0       	ldi	r23, 0x0B	; 11
    55c0:	80 e0       	ldi	r24, 0x00	; 0
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    55c8:	80 e0       	ldi	r24, 0x00	; 0
    55ca:	0e 94 55 29 	call	0x52aa	; 0x52aa <_ZN6EspDrv11espEmptyBufEb>
    55ce:	68 ee       	ldi	r22, 0xE8	; 232
    55d0:	73 e0       	ldi	r23, 0x03	; 3
    55d2:	86 ec       	ldi	r24, 0xC6	; 198
    55d4:	96 e0       	ldi	r25, 0x06	; 6
    55d6:	0e 94 be 2a 	call	0x557c	; 0x557c <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperi>
    55da:	68 ee       	ldi	r22, 0xE8	; 232
    55dc:	73 e0       	ldi	r23, 0x03	; 3
    55de:	8a eb       	ldi	r24, 0xBA	; 186
    55e0:	96 e0       	ldi	r25, 0x06	; 6
    55e2:	0e 94 be 2a 	call	0x557c	; 0x557c <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperi>
    55e6:	68 ec       	ldi	r22, 0xC8	; 200
    55e8:	70 e0       	ldi	r23, 0x00	; 0
    55ea:	80 e0       	ldi	r24, 0x00	; 0
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    55f2:	68 ee       	ldi	r22, 0xE8	; 232
    55f4:	73 e0       	ldi	r23, 0x03	; 3
    55f6:	8e ea       	ldi	r24, 0xAE	; 174
    55f8:	96 e0       	ldi	r25, 0x06	; 6
    55fa:	0e 94 be 2a 	call	0x557c	; 0x557c <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperi>
    55fe:	68 ee       	ldi	r22, 0xE8	; 232
    5600:	73 e0       	ldi	r23, 0x03	; 3
    5602:	80 ea       	ldi	r24, 0xA0	; 160
    5604:	96 e0       	ldi	r25, 0x06	; 6
    5606:	0e 94 be 2a 	call	0x557c	; 0x557c <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperi>
    560a:	68 ee       	ldi	r22, 0xE8	; 232
    560c:	73 e0       	ldi	r23, 0x03	; 3
    560e:	80 e9       	ldi	r24, 0x90	; 144
    5610:	96 e0       	ldi	r25, 0x06	; 6
    5612:	0e 94 be 2a 	call	0x557c	; 0x557c <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperi>
    5616:	68 ee       	ldi	r22, 0xE8	; 232
    5618:	73 e0       	ldi	r23, 0x03	; 3
    561a:	82 e8       	ldi	r24, 0x82	; 130
    561c:	96 e0       	ldi	r25, 0x06	; 6
    561e:	0e 94 be 2a 	call	0x557c	; 0x557c <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperi>
    5622:	68 ec       	ldi	r22, 0xC8	; 200
    5624:	70 e0       	ldi	r23, 0x00	; 0
    5626:	80 e0       	ldi	r24, 0x00	; 0
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <delay>

0000562e <_ZN6EspDrv14wifiDriverInitEP6Stream>:
    562e:	cf 93       	push	r28
    5630:	df 93       	push	r29
    5632:	90 93 79 06 	sts	0x0679, r25	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    5636:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <_ZN6EspDrv9espSerialE>
    563a:	c5 e0       	ldi	r28, 0x05	; 5
    563c:	d0 e0       	ldi	r29, 0x00	; 0
    563e:	68 ee       	ldi	r22, 0xE8	; 232
    5640:	73 e0       	ldi	r23, 0x03	; 3
    5642:	88 e2       	ldi	r24, 0x28	; 40
    5644:	97 e0       	ldi	r25, 0x07	; 7
    5646:	0e 94 be 2a 	call	0x557c	; 0x557c <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperi>
    564a:	89 2b       	or	r24, r25
    564c:	e1 f0       	breq	.+56     	; 0x5686 <_ZN6EspDrv14wifiDriverInitEP6Stream+0x58>
    564e:	68 ee       	ldi	r22, 0xE8	; 232
    5650:	73 e0       	ldi	r23, 0x03	; 3
    5652:	80 e0       	ldi	r24, 0x00	; 0
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
    565a:	21 97       	sbiw	r28, 0x01	; 1
    565c:	81 f7       	brne	.-32     	; 0x563e <_ZN6EspDrv14wifiDriverInitEP6Stream+0x10>
    565e:	63 e1       	ldi	r22, 0x13	; 19
    5660:	73 e0       	ldi	r23, 0x03	; 3
    5662:	87 e0       	ldi	r24, 0x07	; 7
    5664:	95 e0       	ldi	r25, 0x05	; 5
    5666:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    566a:	6b e0       	ldi	r22, 0x0B	; 11
    566c:	77 e0       	ldi	r23, 0x07	; 7
    566e:	87 e0       	ldi	r24, 0x07	; 7
    5670:	95 e0       	ldi	r25, 0x05	; 5
    5672:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5676:	68 e8       	ldi	r22, 0x88	; 136
    5678:	73 e1       	ldi	r23, 0x13	; 19
    567a:	80 e0       	ldi	r24, 0x00	; 0
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	df 91       	pop	r29
    5680:	cf 91       	pop	r28
    5682:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <delay>
    5686:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <_ZN6EspDrv5resetEv>
    568a:	0e 94 a9 2a 	call	0x5552	; 0x5552 <_ZN6EspDrv12getFwVersionEv>
    568e:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <_ZN6EspDrv9fwVersionE>
    5692:	81 53       	subi	r24, 0x31	; 49
    5694:	82 30       	cpi	r24, 0x02	; 2
    5696:	20 f4       	brcc	.+8      	; 0x56a0 <_ZN6EspDrv14wifiDriverInitEP6Stream+0x72>
    5698:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <_ZN6EspDrv9fwVersionE+0x1>
    569c:	8e 32       	cpi	r24, 0x2E	; 46
    569e:	e9 f0       	breq	.+58     	; 0x56da <_ZN6EspDrv14wifiDriverInitEP6Stream+0xac>
    56a0:	63 e1       	ldi	r22, 0x13	; 19
    56a2:	73 e0       	ldi	r23, 0x03	; 3
    56a4:	87 e0       	ldi	r24, 0x07	; 7
    56a6:	95 e0       	ldi	r25, 0x05	; 5
    56a8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    56ac:	6d ee       	ldi	r22, 0xED	; 237
    56ae:	76 e0       	ldi	r23, 0x06	; 6
    56b0:	87 e0       	ldi	r24, 0x07	; 7
    56b2:	95 e0       	ldi	r25, 0x05	; 5
    56b4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
    56b8:	65 e2       	ldi	r22, 0x25	; 37
    56ba:	72 e0       	ldi	r23, 0x02	; 2
    56bc:	87 e0       	ldi	r24, 0x07	; 7
    56be:	95 e0       	ldi	r25, 0x05	; 5
    56c0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    56c4:	6a e6       	ldi	r22, 0x6A	; 106
    56c6:	76 e0       	ldi	r23, 0x06	; 6
    56c8:	87 e0       	ldi	r24, 0x07	; 7
    56ca:	95 e0       	ldi	r25, 0x05	; 5
    56cc:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>
    56d0:	60 ea       	ldi	r22, 0xA0	; 160
    56d2:	7f e0       	ldi	r23, 0x0F	; 15
    56d4:	80 e0       	ldi	r24, 0x00	; 0
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	d2 cf       	rjmp	.-92     	; 0x567e <_ZN6EspDrv14wifiDriverInitEP6Stream+0x50>
    56da:	63 e1       	ldi	r22, 0x13	; 19
    56dc:	73 e0       	ldi	r23, 0x03	; 3
    56de:	87 e0       	ldi	r24, 0x07	; 7
    56e0:	95 e0       	ldi	r25, 0x05	; 5
    56e2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    56e6:	62 ed       	ldi	r22, 0xD2	; 210
    56e8:	76 e0       	ldi	r23, 0x06	; 6
    56ea:	87 e0       	ldi	r24, 0x07	; 7
    56ec:	95 e0       	ldi	r25, 0x05	; 5
    56ee:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
    56f2:	65 e2       	ldi	r22, 0x25	; 37
    56f4:	72 e0       	ldi	r23, 0x02	; 2
    56f6:	87 e0       	ldi	r24, 0x07	; 7
    56f8:	95 e0       	ldi	r25, 0x05	; 5
    56fa:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    56fe:	6a e6       	ldi	r22, 0x6A	; 106
    5700:	76 e0       	ldi	r23, 0x06	; 6
    5702:	87 e0       	ldi	r24, 0x07	; 7
    5704:	95 e0       	ldi	r25, 0x05	; 5
    5706:	df 91       	pop	r29
    5708:	cf 91       	pop	r28
    570a:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>

0000570e <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperiz>:
    570e:	cf 93       	push	r28
    5710:	df 93       	push	r29
    5712:	cd b7       	in	r28, 0x3d	; 61
    5714:	de b7       	in	r29, 0x3e	; 62
    5716:	c8 5c       	subi	r28, 0xC8	; 200
    5718:	d1 09       	sbc	r29, r1
    571a:	0f b6       	in	r0, 0x3f	; 63
    571c:	f8 94       	cli
    571e:	de bf       	out	0x3e, r29	; 62
    5720:	0f be       	out	0x3f, r0	; 63
    5722:	cd bf       	out	0x3d, r28	; 61
    5724:	9e 01       	movw	r18, r28
    5726:	2f 52       	subi	r18, 0x2F	; 47
    5728:	3f 4f       	sbci	r19, 0xFF	; 255
    572a:	c3 53       	subi	r28, 0x33	; 51
    572c:	df 4f       	sbci	r29, 0xFF	; 255
    572e:	48 81       	ld	r20, Y
    5730:	59 81       	ldd	r21, Y+1	; 0x01
    5732:	cd 5c       	subi	r28, 0xCD	; 205
    5734:	d0 40       	sbci	r29, 0x00	; 0
    5736:	68 ec       	ldi	r22, 0xC8	; 200
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	ce 01       	movw	r24, r28
    573c:	01 96       	adiw	r24, 0x01	; 1
    573e:	0e 94 4f 36 	call	0x6c9e	; 0x6c9e <vsnprintf_P>
    5742:	81 e0       	ldi	r24, 0x01	; 1
    5744:	0e 94 55 29 	call	0x52aa	; 0x52aa <_ZN6EspDrv11espEmptyBufEb>
    5748:	be 01       	movw	r22, r28
    574a:	6f 5f       	subi	r22, 0xFF	; 255
    574c:	7f 4f       	sbci	r23, 0xFF	; 255
    574e:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    5752:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    5756:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>
    575a:	41 e0       	ldi	r20, 0x01	; 1
    575c:	60 e0       	ldi	r22, 0x00	; 0
    575e:	70 e0       	ldi	r23, 0x00	; 0
    5760:	c1 53       	subi	r28, 0x31	; 49
    5762:	df 4f       	sbci	r29, 0xFF	; 255
    5764:	88 81       	ld	r24, Y
    5766:	99 81       	ldd	r25, Y+1	; 0x01
    5768:	cf 5c       	subi	r28, 0xCF	; 207
    576a:	d0 40       	sbci	r29, 0x00	; 0
    576c:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <_ZN6EspDrv9readUntilEiPKcb>
    5770:	c8 53       	subi	r28, 0x38	; 56
    5772:	df 4f       	sbci	r29, 0xFF	; 255
    5774:	0f b6       	in	r0, 0x3f	; 63
    5776:	f8 94       	cli
    5778:	de bf       	out	0x3e, r29	; 62
    577a:	0f be       	out	0x3f, r0	; 63
    577c:	cd bf       	out	0x3d, r28	; 61
    577e:	df 91       	pop	r29
    5780:	cf 91       	pop	r28
    5782:	08 95       	ret

00005784 <_ZN6EspDrv11startClientEPKcjhh>:


bool EspDrv::startClient(const char* host, uint16_t port, uint8_t sock, uint8_t protMode)
{
    5784:	ff 92       	push	r15
    5786:	0f 93       	push	r16
    5788:	1f 93       	push	r17
    578a:	cf 93       	push	r28
    578c:	df 93       	push	r29
    578e:	d8 2f       	mov	r29, r24
    5790:	19 2f       	mov	r17, r25
    5792:	06 2f       	mov	r16, r22
    5794:	f7 2e       	mov	r15, r23
    5796:	c4 2f       	mov	r28, r20

	// for UDP we set a dummy remote port and UDP mode to 2
	// this allows to specify the target host/port in CIPSEND

	int ret;
	if (protMode==TCP_MODE)
    5798:	21 11       	cpse	r18, r1
    579a:	1a c0       	rjmp	.+52     	; 0x57d0 <_ZN6EspDrv11startClientEPKcjhh+0x4c>
		ret = sendCmd(F("AT+CIPSTART=%d,\"TCP\",\"%s\",%u"), 5000, sock, host, port);
    579c:	7f 93       	push	r23
    579e:	6f 93       	push	r22
    57a0:	9f 93       	push	r25
    57a2:	8f 93       	push	r24
    57a4:	1f 92       	push	r1
    57a6:	4f 93       	push	r20
    57a8:	83 e1       	ldi	r24, 0x13	; 19
    57aa:	8f 93       	push	r24
    57ac:	88 e8       	ldi	r24, 0x88	; 136
    57ae:	8f 93       	push	r24
    57b0:	81 ee       	ldi	r24, 0xE1	; 225
    57b2:	95 e0       	ldi	r25, 0x05	; 5
    57b4:	9f 93       	push	r25
    57b6:	8f 93       	push	r24
    57b8:	0e 94 87 2b 	call	0x570e	; 0x570e <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperiz>
    57bc:	fc 01       	movw	r30, r24
    57be:	8d b7       	in	r24, 0x3d	; 61
    57c0:	9e b7       	in	r25, 0x3e	; 62
    57c2:	0a 96       	adiw	r24, 0x0a	; 10
    57c4:	0f b6       	in	r0, 0x3f	; 63
    57c6:	f8 94       	cli
    57c8:	9e bf       	out	0x3e, r25	; 62
    57ca:	0f be       	out	0x3f, r0	; 63
    57cc:	8d bf       	out	0x3d, r24	; 61
    57ce:	3d c0       	rjmp	.+122    	; 0x584a <_ZN6EspDrv11startClientEPKcjhh+0xc6>
	else if (protMode==SSL_MODE)
    57d0:	22 30       	cpi	r18, 0x02	; 2
    57d2:	01 f5       	brne	.+64     	; 0x5814 <_ZN6EspDrv11startClientEPKcjhh+0x90>
	{
		// better to put the CIPSSLSIZE here because it is not supported before firmware 1.4
		sendCmd(F("AT+CIPSSLSIZE=4096"));
    57d4:	68 ee       	ldi	r22, 0xE8	; 232
    57d6:	73 e0       	ldi	r23, 0x03	; 3
    57d8:	8e ec       	ldi	r24, 0xCE	; 206
    57da:	95 e0       	ldi	r25, 0x05	; 5
    57dc:	0e 94 be 2a 	call	0x557c	; 0x557c <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperi>
		ret = sendCmd(F("AT+CIPSTART=%d,\"SSL\",\"%s\",%u"), 5000, sock, host, port);
    57e0:	ff 92       	push	r15
    57e2:	0f 93       	push	r16
    57e4:	1f 93       	push	r17
    57e6:	df 93       	push	r29
    57e8:	1f 92       	push	r1
    57ea:	cf 93       	push	r28
    57ec:	83 e1       	ldi	r24, 0x13	; 19
    57ee:	8f 93       	push	r24
    57f0:	88 e8       	ldi	r24, 0x88	; 136
    57f2:	8f 93       	push	r24
    57f4:	81 eb       	ldi	r24, 0xB1	; 177
    57f6:	95 e0       	ldi	r25, 0x05	; 5
    57f8:	9f 93       	push	r25
    57fa:	8f 93       	push	r24
    57fc:	0e 94 87 2b 	call	0x570e	; 0x570e <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperiz>
    5800:	fc 01       	movw	r30, r24
    5802:	8d b7       	in	r24, 0x3d	; 61
    5804:	9e b7       	in	r25, 0x3e	; 62
    5806:	0a 96       	adiw	r24, 0x0a	; 10
    5808:	0f b6       	in	r0, 0x3f	; 63
    580a:	f8 94       	cli
    580c:	9e bf       	out	0x3e, r25	; 62
    580e:	0f be       	out	0x3f, r0	; 63
    5810:	8d bf       	out	0x3d, r24	; 61
    5812:	1b c0       	rjmp	.+54     	; 0x584a <_ZN6EspDrv11startClientEPKcjhh+0xc6>
	}
	else if (protMode==UDP_MODE)
    5814:	21 30       	cpi	r18, 0x01	; 1
    5816:	c9 f4       	brne	.+50     	; 0x584a <_ZN6EspDrv11startClientEPKcjhh+0xc6>
		ret = sendCmd(F("AT+CIPSTART=%d,\"UDP\",\"%s\",0,%u,2"), 5000, sock, host, port);
    5818:	7f 93       	push	r23
    581a:	6f 93       	push	r22
    581c:	9f 93       	push	r25
    581e:	8f 93       	push	r24
    5820:	1f 92       	push	r1
    5822:	4f 93       	push	r20
    5824:	83 e1       	ldi	r24, 0x13	; 19
    5826:	8f 93       	push	r24
    5828:	88 e8       	ldi	r24, 0x88	; 136
    582a:	8f 93       	push	r24
    582c:	80 e9       	ldi	r24, 0x90	; 144
    582e:	95 e0       	ldi	r25, 0x05	; 5
    5830:	9f 93       	push	r25
    5832:	8f 93       	push	r24
    5834:	0e 94 87 2b 	call	0x570e	; 0x570e <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperiz>
    5838:	fc 01       	movw	r30, r24
    583a:	8d b7       	in	r24, 0x3d	; 61
    583c:	9e b7       	in	r25, 0x3e	; 62
    583e:	0a 96       	adiw	r24, 0x0a	; 10
    5840:	0f b6       	in	r0, 0x3f	; 63
    5842:	f8 94       	cli
    5844:	9e bf       	out	0x3e, r25	; 62
    5846:	0f be       	out	0x3f, r0	; 63
    5848:	8d bf       	out	0x3d, r24	; 61

	return ret==TAG_OK;
    584a:	81 e0       	ldi	r24, 0x01	; 1
    584c:	ef 2b       	or	r30, r31
    584e:	09 f0       	breq	.+2      	; 0x5852 <_ZN6EspDrv11startClientEPKcjhh+0xce>
    5850:	80 e0       	ldi	r24, 0x00	; 0
}
    5852:	df 91       	pop	r29
    5854:	cf 91       	pop	r28
    5856:	1f 91       	pop	r17
    5858:	0f 91       	pop	r16
    585a:	ff 90       	pop	r15
    585c:	08 95       	ret

0000585e <_ZN6EspDrv10stopClientEh>:
// Start server TCP on port specified
void EspDrv::stopClient(uint8_t sock)
{
	LOGDEBUG1(F("> stopClient"), sock);

	int ret = sendCmd(F("AT+CIPCLOSE=%d"), 4000, sock);
    585e:	1f 92       	push	r1
    5860:	8f 93       	push	r24
    5862:	8f e0       	ldi	r24, 0x0F	; 15
    5864:	8f 93       	push	r24
    5866:	80 ea       	ldi	r24, 0xA0	; 160
    5868:	8f 93       	push	r24
    586a:	81 e8       	ldi	r24, 0x81	; 129
    586c:	95 e0       	ldi	r25, 0x05	; 5
    586e:	9f 93       	push	r25
    5870:	8f 93       	push	r24
    5872:	0e 94 87 2b 	call	0x570e	; 0x570e <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperiz>
}
    5876:	0f 90       	pop	r0
    5878:	0f 90       	pop	r0
    587a:	0f 90       	pop	r0
    587c:	0f 90       	pop	r0
    587e:	0f 90       	pop	r0
    5880:	0f 90       	pop	r0
    5882:	08 95       	ret

00005884 <_ZN6EspDrv11wifiConnectEPKcS1_>:
}



bool EspDrv::wifiConnect(const char* ssid, const char* passphrase)
{
    5884:	cf 93       	push	r28
    5886:	df 93       	push	r29
    5888:	d8 2f       	mov	r29, r24
    588a:	c9 2f       	mov	r28, r25
	// TODO
	// Escape character syntax is needed if "SSID" or "password" contains
	// any special characters (',', '"' and '/')

    // connect to access point, use CUR mode to avoid connection at boot
	int ret = sendCmd(F("AT+CWJAP_CUR=\"%s\",\"%s\""), 20000, ssid, passphrase);
    588c:	7f 93       	push	r23
    588e:	6f 93       	push	r22
    5890:	9f 93       	push	r25
    5892:	8f 93       	push	r24
    5894:	8e e4       	ldi	r24, 0x4E	; 78
    5896:	8f 93       	push	r24
    5898:	80 e2       	ldi	r24, 0x20	; 32
    589a:	8f 93       	push	r24
    589c:	8b e6       	ldi	r24, 0x6B	; 107
    589e:	96 e0       	ldi	r25, 0x06	; 6
    58a0:	9f 93       	push	r25
    58a2:	8f 93       	push	r24
    58a4:	0e 94 87 2b 	call	0x570e	; 0x570e <_ZN6EspDrv7sendCmdEPK19__FlashStringHelperiz>

	if (ret==TAG_OK)
    58a8:	2d b7       	in	r18, 0x3d	; 61
    58aa:	3e b7       	in	r19, 0x3e	; 62
    58ac:	28 5f       	subi	r18, 0xF8	; 248
    58ae:	3f 4f       	sbci	r19, 0xFF	; 255
    58b0:	0f b6       	in	r0, 0x3f	; 63
    58b2:	f8 94       	cli
    58b4:	3e bf       	out	0x3e, r19	; 62
    58b6:	0f be       	out	0x3f, r0	; 63
    58b8:	2d bf       	out	0x3d, r18	; 61
	{
		LOGINFO1(F("Connected to"), ssid);
    58ba:	63 e1       	ldi	r22, 0x13	; 19
    58bc:	73 e0       	ldi	r23, 0x03	; 3
	// any special characters (',', '"' and '/')

    // connect to access point, use CUR mode to avoid connection at boot
	int ret = sendCmd(F("AT+CWJAP_CUR=\"%s\",\"%s\""), 20000, ssid, passphrase);

	if (ret==TAG_OK)
    58be:	89 2b       	or	r24, r25
    58c0:	c1 f4       	brne	.+48     	; 0x58f2 <_ZN6EspDrv11wifiConnectEPKcS1_+0x6e>
	{
		LOGINFO1(F("Connected to"), ssid);
    58c2:	87 e0       	ldi	r24, 0x07	; 7
    58c4:	95 e0       	ldi	r25, 0x05	; 5
    58c6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    58ca:	6e e5       	ldi	r22, 0x5E	; 94
    58cc:	76 e0       	ldi	r23, 0x06	; 6
    58ce:	87 e0       	ldi	r24, 0x07	; 7
    58d0:	95 e0       	ldi	r25, 0x05	; 5
    58d2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
    58d6:	65 e2       	ldi	r22, 0x25	; 37
    58d8:	72 e0       	ldi	r23, 0x02	; 2
    58da:	87 e0       	ldi	r24, 0x07	; 7
    58dc:	95 e0       	ldi	r25, 0x05	; 5
    58de:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    58e2:	6d 2f       	mov	r22, r29
    58e4:	7c 2f       	mov	r23, r28
    58e6:	87 e0       	ldi	r24, 0x07	; 7
    58e8:	95 e0       	ldi	r25, 0x05	; 5
    58ea:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>
		return true;
    58ee:	81 e0       	ldi	r24, 0x01	; 1
    58f0:	20 c0       	rjmp	.+64     	; 0x5932 <_ZN6EspDrv11wifiConnectEPKcS1_+0xae>
	}

	LOGWARN1(F("Failed connecting to"), ssid);
    58f2:	87 e0       	ldi	r24, 0x07	; 7
    58f4:	95 e0       	ldi	r25, 0x05	; 5
    58f6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    58fa:	69 e4       	ldi	r22, 0x49	; 73
    58fc:	76 e0       	ldi	r23, 0x06	; 6
    58fe:	87 e0       	ldi	r24, 0x07	; 7
    5900:	95 e0       	ldi	r25, 0x05	; 5
    5902:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print5printEPK19__FlashStringHelper>
    5906:	65 e2       	ldi	r22, 0x25	; 37
    5908:	72 e0       	ldi	r23, 0x02	; 2
    590a:	87 e0       	ldi	r24, 0x07	; 7
    590c:	95 e0       	ldi	r25, 0x05	; 5
    590e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5printEPKc>
    5912:	6d 2f       	mov	r22, r29
    5914:	7c 2f       	mov	r23, r28
    5916:	87 e0       	ldi	r24, 0x07	; 7
    5918:	95 e0       	ldi	r25, 0x05	; 5
    591a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEPKc>

	// clean additional messages logged after the FAIL tag
	delay(1000);
    591e:	68 ee       	ldi	r22, 0xE8	; 232
    5920:	73 e0       	ldi	r23, 0x03	; 3
    5922:	80 e0       	ldi	r24, 0x00	; 0
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
	espEmptyBuf(false);
    592a:	80 e0       	ldi	r24, 0x00	; 0
    592c:	0e 94 55 29 	call	0x52aa	; 0x52aa <_ZN6EspDrv11espEmptyBufEb>

	return false;
    5930:	80 e0       	ldi	r24, 0x00	; 0
}
    5932:	df 91       	pop	r29
    5934:	cf 91       	pop	r28
    5936:	08 95       	ret

00005938 <_ZN6EspDrv9timedReadEv>:
}


// copied from Serial::timedRead
int EspDrv::timedRead()
{
    5938:	cf 92       	push	r12
    593a:	df 92       	push	r13
    593c:	ef 92       	push	r14
    593e:	ff 92       	push	r15
  int _timeout = 1000;
  int c;
  long _startMillis = millis();
    5940:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    5944:	6b 01       	movw	r12, r22
    5946:	7c 01       	movw	r14, r24
  do
  {
    c = espSerial->read();
    5948:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <_ZN6EspDrv9espSerialE>
    594c:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <_ZN6EspDrv9espSerialE+0x1>
    5950:	dc 01       	movw	r26, r24
    5952:	ed 91       	ld	r30, X+
    5954:	fc 91       	ld	r31, X
    5956:	02 84       	ldd	r0, Z+10	; 0x0a
    5958:	f3 85       	ldd	r31, Z+11	; 0x0b
    595a:	e0 2d       	mov	r30, r0
    595c:	09 95       	icall
    if (c >= 0) return c;
    595e:	97 ff       	sbrs	r25, 7
    5960:	0f c0       	rjmp	.+30     	; 0x5980 <_ZN6EspDrv9timedReadEv+0x48>
  } while(millis() - _startMillis < _timeout);
    5962:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
int EspDrv::timedRead()
{
  int _timeout = 1000;
  int c;
  long _startMillis = millis();
  do
    5966:	dc 01       	movw	r26, r24
    5968:	cb 01       	movw	r24, r22
    596a:	8c 19       	sub	r24, r12
    596c:	9d 09       	sbc	r25, r13
    596e:	ae 09       	sbc	r26, r14
    5970:	bf 09       	sbc	r27, r15
    5972:	88 3e       	cpi	r24, 0xE8	; 232
    5974:	93 40       	sbci	r25, 0x03	; 3
    5976:	a1 05       	cpc	r26, r1
    5978:	b1 05       	cpc	r27, r1
    597a:	30 f3       	brcs	.-52     	; 0x5948 <_ZN6EspDrv9timedReadEv+0x10>
  {
    c = espSerial->read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);

  return -1; // -1 indicates timeout
    597c:	8f ef       	ldi	r24, 0xFF	; 255
    597e:	9f ef       	ldi	r25, 0xFF	; 255
}
    5980:	ff 90       	pop	r15
    5982:	ef 90       	pop	r14
    5984:	df 90       	pop	r13
    5986:	cf 90       	pop	r12
    5988:	08 95       	ret

0000598a <_ZN6EspDrv10getDataBufEhPhj>:
 * Receive the data into a buffer.
 * It reads up to bufSize bytes.
 * @return	received data size for success else -1.
 */
int EspDrv::getDataBuf(uint8_t connId, uint8_t *buf, uint16_t bufSize)
{
    598a:	cf 92       	push	r12
    598c:	df 92       	push	r13
    598e:	ef 92       	push	r14
    5990:	ff 92       	push	r15
    5992:	0f 93       	push	r16
    5994:	1f 93       	push	r17
    5996:	cf 93       	push	r28
    5998:	df 93       	push	r29
    599a:	8a 01       	movw	r16, r20
	if (connId!=_connId)
    599c:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <_ZN6EspDrv7_connIdE>
    59a0:	98 13       	cpse	r25, r24
    59a2:	35 c0       	rjmp	.+106    	; 0x5a0e <_ZN6EspDrv10getDataBufEhPhj+0x84>
		return false;

	if(_bufPos<bufSize)
    59a4:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <_ZN6EspDrv7_bufPosE>
    59a8:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    59ac:	a0 91 68 06 	lds	r26, 0x0668	; 0x800668 <_ZN6EspDrv7_bufPosE+0x2>
    59b0:	b0 91 69 06 	lds	r27, 0x0669	; 0x800669 <_ZN6EspDrv7_bufPosE+0x3>
    59b4:	6a 01       	movw	r12, r20
    59b6:	e1 2c       	mov	r14, r1
    59b8:	f1 2c       	mov	r15, r1
    59ba:	8c 15       	cp	r24, r12
    59bc:	9d 05       	cpc	r25, r13
    59be:	ae 05       	cpc	r26, r14
    59c0:	bf 05       	cpc	r27, r15
    59c2:	0c f4       	brge	.+2      	; 0x59c6 <_ZN6EspDrv10getDataBufEhPhj+0x3c>
		bufSize = _bufPos;
    59c4:	8c 01       	movw	r16, r24
    59c6:	eb 01       	movw	r28, r22
    59c8:	7b 01       	movw	r14, r22
    59ca:	e0 0e       	add	r14, r16
    59cc:	f1 1e       	adc	r15, r17
	
	for(int i=0; i<bufSize; i++)
    59ce:	ce 15       	cp	r28, r14
    59d0:	df 05       	cpc	r29, r15
    59d2:	d9 f0       	breq	.+54     	; 0x5a0a <_ZN6EspDrv10getDataBufEhPhj+0x80>
	{
		int c = timedRead();
    59d4:	0e 94 9c 2c 	call	0x5938	; 0x5938 <_ZN6EspDrv9timedReadEv>
		//LOGDEBUG(c);
		if(c==-1)
    59d8:	8f 3f       	cpi	r24, 0xFF	; 255
    59da:	2f ef       	ldi	r18, 0xFF	; 255
    59dc:	92 07       	cpc	r25, r18
    59de:	d1 f0       	breq	.+52     	; 0x5a14 <_ZN6EspDrv10getDataBufEhPhj+0x8a>
			return -1;
		
		buf[i] = (char)c;
    59e0:	89 93       	st	Y+, r24
		_bufPos--;
    59e2:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <_ZN6EspDrv7_bufPosE>
    59e6:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    59ea:	a0 91 68 06 	lds	r26, 0x0668	; 0x800668 <_ZN6EspDrv7_bufPosE+0x2>
    59ee:	b0 91 69 06 	lds	r27, 0x0669	; 0x800669 <_ZN6EspDrv7_bufPosE+0x3>
    59f2:	01 97       	sbiw	r24, 0x01	; 1
    59f4:	a1 09       	sbc	r26, r1
    59f6:	b1 09       	sbc	r27, r1
    59f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <_ZN6EspDrv7_bufPosE>
    59fc:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <_ZN6EspDrv7_bufPosE+0x1>
    5a00:	a0 93 68 06 	sts	0x0668, r26	; 0x800668 <_ZN6EspDrv7_bufPosE+0x2>
    5a04:	b0 93 69 06 	sts	0x0669, r27	; 0x800669 <_ZN6EspDrv7_bufPosE+0x3>
		return false;

	if(_bufPos<bufSize)
		bufSize = _bufPos;
	
	for(int i=0; i<bufSize; i++)
    5a08:	e2 cf       	rjmp	.-60     	; 0x59ce <_ZN6EspDrv10getDataBufEhPhj+0x44>
		
		buf[i] = (char)c;
		_bufPos--;
	}

	return bufSize;
    5a0a:	c8 01       	movw	r24, r16
    5a0c:	05 c0       	rjmp	.+10     	; 0x5a18 <_ZN6EspDrv10getDataBufEhPhj+0x8e>
 * @return	received data size for success else -1.
 */
int EspDrv::getDataBuf(uint8_t connId, uint8_t *buf, uint16_t bufSize)
{
	if (connId!=_connId)
		return false;
    5a0e:	80 e0       	ldi	r24, 0x00	; 0
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	02 c0       	rjmp	.+4      	; 0x5a18 <_ZN6EspDrv10getDataBufEhPhj+0x8e>
	for(int i=0; i<bufSize; i++)
	{
		int c = timedRead();
		//LOGDEBUG(c);
		if(c==-1)
			return -1;
    5a14:	8f ef       	ldi	r24, 0xFF	; 255
    5a16:	9f ef       	ldi	r25, 0xFF	; 255
		buf[i] = (char)c;
		_bufPos--;
	}

	return bufSize;
}
    5a18:	df 91       	pop	r29
    5a1a:	cf 91       	pop	r28
    5a1c:	1f 91       	pop	r17
    5a1e:	0f 91       	pop	r16
    5a20:	ff 90       	pop	r15
    5a22:	ef 90       	pop	r14
    5a24:	df 90       	pop	r13
    5a26:	cf 90       	pop	r12
    5a28:	08 95       	ret

00005a2a <_GLOBAL__sub_I_ESPTAGS>:
  return -1; // -1 indicates timeout
}



EspDrv espDrv;
    5a2a:	0f 93       	push	r16
    5a2c:	00 e0       	ldi	r16, 0x00	; 0
    5a2e:	20 e0       	ldi	r18, 0x00	; 0
    5a30:	40 e0       	ldi	r20, 0x00	; 0
    5a32:	60 e0       	ldi	r22, 0x00	; 0
    5a34:	8a e7       	ldi	r24, 0x7A	; 122
    5a36:	96 e0       	ldi	r25, 0x06	; 6
    5a38:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN9IPAddressC1Ehhhh>
} TagsEnum;


Stream *EspDrv::espSerial;

RingBuffer EspDrv::ringBuf(32);
    5a3c:	60 e2       	ldi	r22, 0x20	; 32
    5a3e:	70 e0       	ldi	r23, 0x00	; 0
    5a40:	80 e7       	ldi	r24, 0x70	; 112
    5a42:	96 e0       	ldi	r25, 0x06	; 6
  return -1; // -1 indicates timeout
}



EspDrv espDrv;
    5a44:	0f 91       	pop	r16
} TagsEnum;


Stream *EspDrv::espSerial;

RingBuffer EspDrv::ringBuf(32);
    5a46:	0c 94 3d 2d 	jmp	0x5a7a	; 0x5a7a <_ZN10RingBufferC1Ej>

00005a4a <_GLOBAL__sub_D_ESPTAGS>:
    5a4a:	80 e7       	ldi	r24, 0x70	; 112
    5a4c:	96 e0       	ldi	r25, 0x06	; 6
    5a4e:	0c 94 29 2d 	jmp	0x5a52	; 0x5a52 <_ZN10RingBufferD1Ev>

00005a52 <_ZN10RingBufferD1Ev>:
void RingBuffer::getStr(char * destination, unsigned int skipChars)
{
	int len = ringBufP-ringBuf-skipChars;

	// copy buffer to destination string
	strncpy(destination, ringBuf, len);
    5a52:	08 95       	ret

00005a54 <_ZN10RingBuffer5resetEv>:
    5a54:	fc 01       	movw	r30, r24
    5a56:	22 81       	ldd	r18, Z+2	; 0x02
    5a58:	33 81       	ldd	r19, Z+3	; 0x03
    5a5a:	37 83       	std	Z+7, r19	; 0x07
    5a5c:	26 83       	std	Z+6, r18	; 0x06
    5a5e:	08 95       	ret

00005a60 <_ZN10RingBuffer4initEv>:
    5a60:	fc 01       	movw	r30, r24
    5a62:	82 81       	ldd	r24, Z+2	; 0x02
    5a64:	93 81       	ldd	r25, Z+3	; 0x03
    5a66:	97 83       	std	Z+7, r25	; 0x07
    5a68:	86 83       	std	Z+6, r24	; 0x06
    5a6a:	40 81       	ld	r20, Z
    5a6c:	51 81       	ldd	r21, Z+1	; 0x01
    5a6e:	4f 5f       	subi	r20, 0xFF	; 255
    5a70:	5f 4f       	sbci	r21, 0xFF	; 255
    5a72:	60 e0       	ldi	r22, 0x00	; 0
    5a74:	70 e0       	ldi	r23, 0x00	; 0
    5a76:	0c 94 b6 35 	jmp	0x6b6c	; 0x6b6c <memset>

00005a7a <_ZN10RingBufferC1Ej>:
    5a7a:	0f 93       	push	r16
    5a7c:	1f 93       	push	r17
    5a7e:	cf 93       	push	r28
    5a80:	df 93       	push	r29
    5a82:	8c 01       	movw	r16, r24
    5a84:	eb 01       	movw	r28, r22
    5a86:	fc 01       	movw	r30, r24
    5a88:	71 83       	std	Z+1, r23	; 0x01
    5a8a:	60 83       	st	Z, r22
    5a8c:	cb 01       	movw	r24, r22
    5a8e:	01 96       	adiw	r24, 0x01	; 1
    5a90:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <_Znaj>
    5a94:	f8 01       	movw	r30, r16
    5a96:	93 83       	std	Z+3, r25	; 0x03
    5a98:	82 83       	std	Z+2, r24	; 0x02
    5a9a:	c8 0f       	add	r28, r24
    5a9c:	d9 1f       	adc	r29, r25
    5a9e:	d5 83       	std	Z+5, r29	; 0x05
    5aa0:	c4 83       	std	Z+4, r28	; 0x04
    5aa2:	c8 01       	movw	r24, r16
    5aa4:	df 91       	pop	r29
    5aa6:	cf 91       	pop	r28
    5aa8:	1f 91       	pop	r17
    5aaa:	0f 91       	pop	r16
    5aac:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <_ZN10RingBuffer4initEv>

00005ab0 <_ZN10RingBuffer4pushEc>:
    5ab0:	fc 01       	movw	r30, r24
    5ab2:	a6 81       	ldd	r26, Z+6	; 0x06
    5ab4:	b7 81       	ldd	r27, Z+7	; 0x07
    5ab6:	6c 93       	st	X, r22
    5ab8:	86 81       	ldd	r24, Z+6	; 0x06
    5aba:	97 81       	ldd	r25, Z+7	; 0x07
    5abc:	01 96       	adiw	r24, 0x01	; 1
    5abe:	97 83       	std	Z+7, r25	; 0x07
    5ac0:	86 83       	std	Z+6, r24	; 0x06
    5ac2:	24 81       	ldd	r18, Z+4	; 0x04
    5ac4:	35 81       	ldd	r19, Z+5	; 0x05
    5ac6:	82 17       	cp	r24, r18
    5ac8:	93 07       	cpc	r25, r19
    5aca:	20 f0       	brcs	.+8      	; 0x5ad4 <_ZN10RingBuffer4pushEc+0x24>
    5acc:	82 81       	ldd	r24, Z+2	; 0x02
    5ace:	93 81       	ldd	r25, Z+3	; 0x03
    5ad0:	97 83       	std	Z+7, r25	; 0x07
    5ad2:	86 83       	std	Z+6, r24	; 0x06
    5ad4:	08 95       	ret

00005ad6 <_ZN10RingBuffer8endsWithEPKc>:
    5ad6:	cf 93       	push	r28
    5ad8:	df 93       	push	r29
    5ada:	dc 01       	movw	r26, r24
    5adc:	fb 01       	movw	r30, r22
    5ade:	01 90       	ld	r0, Z+
    5ae0:	00 20       	and	r0, r0
    5ae2:	e9 f7       	brne	.-6      	; 0x5ade <_ZN10RingBuffer8endsWithEPKc+0x8>
    5ae4:	31 97       	sbiw	r30, 0x01	; 1
    5ae6:	9f 01       	movw	r18, r30
    5ae8:	26 1b       	sub	r18, r22
    5aea:	37 0b       	sbc	r19, r23
    5aec:	16 96       	adiw	r26, 0x06	; 6
    5aee:	ed 91       	ld	r30, X+
    5af0:	fc 91       	ld	r31, X
    5af2:	17 97       	sbiw	r26, 0x07	; 7
    5af4:	e2 1b       	sub	r30, r18
    5af6:	f3 0b       	sbc	r31, r19
    5af8:	12 96       	adiw	r26, 0x02	; 2
    5afa:	8d 91       	ld	r24, X+
    5afc:	9c 91       	ld	r25, X
    5afe:	13 97       	sbiw	r26, 0x03	; 3
    5b00:	e8 17       	cp	r30, r24
    5b02:	f9 07       	cpc	r31, r25
    5b04:	28 f4       	brcc	.+10     	; 0x5b10 <_ZN10RingBuffer8endsWithEPKc+0x3a>
    5b06:	4d 91       	ld	r20, X+
    5b08:	5c 91       	ld	r21, X
    5b0a:	11 97       	sbiw	r26, 0x01	; 1
    5b0c:	e4 0f       	add	r30, r20
    5b0e:	f5 1f       	adc	r31, r21
    5b10:	26 0f       	add	r18, r22
    5b12:	37 1f       	adc	r19, r23
    5b14:	eb 01       	movw	r28, r22
    5b16:	62 17       	cp	r22, r18
    5b18:	73 07       	cpc	r23, r19
    5b1a:	80 f4       	brcc	.+32     	; 0x5b3c <_ZN10RingBuffer8endsWithEPKc+0x66>
    5b1c:	6f 5f       	subi	r22, 0xFF	; 255
    5b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    5b20:	58 81       	ld	r21, Y
    5b22:	40 81       	ld	r20, Z
    5b24:	54 13       	cpse	r21, r20
    5b26:	0c c0       	rjmp	.+24     	; 0x5b40 <_ZN10RingBuffer8endsWithEPKc+0x6a>
    5b28:	31 96       	adiw	r30, 0x01	; 1
    5b2a:	14 96       	adiw	r26, 0x04	; 4
    5b2c:	4d 91       	ld	r20, X+
    5b2e:	5c 91       	ld	r21, X
    5b30:	15 97       	sbiw	r26, 0x05	; 5
    5b32:	e4 17       	cp	r30, r20
    5b34:	f5 07       	cpc	r31, r21
    5b36:	71 f7       	brne	.-36     	; 0x5b14 <_ZN10RingBuffer8endsWithEPKc+0x3e>
    5b38:	fc 01       	movw	r30, r24
    5b3a:	ec cf       	rjmp	.-40     	; 0x5b14 <_ZN10RingBuffer8endsWithEPKc+0x3e>
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	01 c0       	rjmp	.+2      	; 0x5b42 <_ZN10RingBuffer8endsWithEPKc+0x6c>
    5b40:	80 e0       	ldi	r24, 0x00	; 0
    5b42:	df 91       	pop	r29
    5b44:	cf 91       	pop	r28
    5b46:	08 95       	ret

00005b48 <_ZN10RingBuffer7getStrNEPcjj>:
	// terminate output string
	//destination[len]=0;
}

void RingBuffer::getStrN(char * destination, unsigned int skipChars, unsigned int num)
{
    5b48:	fc 01       	movw	r30, r24
    5b4a:	cb 01       	movw	r24, r22
	int len = ringBufP-ringBuf-skipChars;
    5b4c:	62 81       	ldd	r22, Z+2	; 0x02
    5b4e:	73 81       	ldd	r23, Z+3	; 0x03
    5b50:	06 80       	ldd	r0, Z+6	; 0x06
    5b52:	f7 81       	ldd	r31, Z+7	; 0x07
    5b54:	e0 2d       	mov	r30, r0
    5b56:	e6 1b       	sub	r30, r22
    5b58:	f7 0b       	sbc	r31, r23
    5b5a:	e4 1b       	sub	r30, r20
    5b5c:	f5 0b       	sbc	r31, r21

	if (len>num)
    5b5e:	2e 17       	cp	r18, r30
    5b60:	3f 07       	cpc	r19, r31
    5b62:	10 f0       	brcs	.+4      	; 0x5b68 <_ZN10RingBuffer7getStrNEPcjj+0x20>
	//destination[len]=0;
}

void RingBuffer::getStrN(char * destination, unsigned int skipChars, unsigned int num)
{
	int len = ringBufP-ringBuf-skipChars;
    5b64:	af 01       	movw	r20, r30
    5b66:	01 c0       	rjmp	.+2      	; 0x5b6a <_ZN10RingBuffer7getStrNEPcjj+0x22>

	if (len>num)
		len=num;
    5b68:	a9 01       	movw	r20, r18

	// copy buffer to destination string
	strncpy(destination, ringBuf, len);
    5b6a:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <strncpy>

00005b6e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5b6e:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <twi_state>
    5b72:	81 e0       	ldi	r24, 0x01	; 1
    5b74:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <twi_sendStop>
    5b78:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <twi_inRepStart>
    5b7c:	61 e0       	ldi	r22, 0x01	; 1
    5b7e:	82 e1       	ldi	r24, 0x12	; 18
    5b80:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    5b84:	61 e0       	ldi	r22, 0x01	; 1
    5b86:	83 e1       	ldi	r24, 0x13	; 19
    5b88:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <digitalWrite>
    5b8c:	e9 eb       	ldi	r30, 0xB9	; 185
    5b8e:	f0 e0       	ldi	r31, 0x00	; 0
    5b90:	80 81       	ld	r24, Z
    5b92:	8e 7f       	andi	r24, 0xFE	; 254
    5b94:	80 83       	st	Z, r24
    5b96:	80 81       	ld	r24, Z
    5b98:	8d 7f       	andi	r24, 0xFD	; 253
    5b9a:	80 83       	st	Z, r24
    5b9c:	88 e4       	ldi	r24, 0x48	; 72
    5b9e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5ba2:	85 e4       	ldi	r24, 0x45	; 69
    5ba4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ba8:	08 95       	ret

00005baa <twi_readFrom>:
    5baa:	41 32       	cpi	r20, 0x21	; 33
    5bac:	08 f0       	brcs	.+2      	; 0x5bb0 <twi_readFrom+0x6>
    5bae:	43 c0       	rjmp	.+134    	; 0x5c36 <twi_readFrom+0x8c>
    5bb0:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <twi_state>
    5bb4:	91 11       	cpse	r25, r1
    5bb6:	fc cf       	rjmp	.-8      	; 0x5bb0 <twi_readFrom+0x6>
    5bb8:	91 e0       	ldi	r25, 0x01	; 1
    5bba:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <twi_state>
    5bbe:	20 93 eb 06 	sts	0x06EB, r18	; 0x8006eb <twi_sendStop>
    5bc2:	2f ef       	ldi	r18, 0xFF	; 255
    5bc4:	20 93 80 06 	sts	0x0680, r18	; 0x800680 <twi_error>
    5bc8:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <twi_masterBufferIndex>
    5bcc:	24 0f       	add	r18, r20
    5bce:	20 93 c4 06 	sts	0x06C4, r18	; 0x8006c4 <twi_masterBufferLength>
    5bd2:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <twi_slarw>
    5bd6:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <twi_slarw>
    5bda:	88 0f       	add	r24, r24
    5bdc:	89 2b       	or	r24, r25
    5bde:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <twi_slarw>
    5be2:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <twi_inRepStart>
    5be6:	81 30       	cpi	r24, 0x01	; 1
    5be8:	61 f4       	brne	.+24     	; 0x5c02 <twi_readFrom+0x58>
    5bea:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <twi_inRepStart>
    5bee:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <twi_slarw>
    5bf2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5bf6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5bfa:	83 fd       	sbrc	r24, 3
    5bfc:	f8 cf       	rjmp	.-16     	; 0x5bee <twi_readFrom+0x44>
    5bfe:	85 ec       	ldi	r24, 0xC5	; 197
    5c00:	01 c0       	rjmp	.+2      	; 0x5c04 <twi_readFrom+0x5a>
    5c02:	85 ee       	ldi	r24, 0xE5	; 229
    5c04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c08:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <twi_state>
    5c0c:	81 30       	cpi	r24, 0x01	; 1
    5c0e:	e1 f3       	breq	.-8      	; 0x5c08 <twi_readFrom+0x5e>
    5c10:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <twi_masterBufferIndex>
    5c14:	84 17       	cp	r24, r20
    5c16:	10 f4       	brcc	.+4      	; 0x5c1c <twi_readFrom+0x72>
    5c18:	40 91 c5 06 	lds	r20, 0x06C5	; 0x8006c5 <twi_masterBufferIndex>
    5c1c:	a6 ec       	ldi	r26, 0xC6	; 198
    5c1e:	b6 e0       	ldi	r27, 0x06	; 6
    5c20:	96 2f       	mov	r25, r22
    5c22:	fb 01       	movw	r30, r22
    5c24:	8e 2f       	mov	r24, r30
    5c26:	89 1b       	sub	r24, r25
    5c28:	84 17       	cp	r24, r20
    5c2a:	18 f4       	brcc	.+6      	; 0x5c32 <twi_readFrom+0x88>
    5c2c:	8d 91       	ld	r24, X+
    5c2e:	81 93       	st	Z+, r24
    5c30:	f9 cf       	rjmp	.-14     	; 0x5c24 <twi_readFrom+0x7a>
    5c32:	84 2f       	mov	r24, r20
    5c34:	08 95       	ret
    5c36:	80 e0       	ldi	r24, 0x00	; 0
    5c38:	08 95       	ret

00005c3a <twi_writeTo>:
    5c3a:	0f 93       	push	r16
    5c3c:	41 32       	cpi	r20, 0x21	; 33
    5c3e:	08 f0       	brcs	.+2      	; 0x5c42 <twi_writeTo+0x8>
    5c40:	4a c0       	rjmp	.+148    	; 0x5cd6 <twi_writeTo+0x9c>
    5c42:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <twi_state>
    5c46:	91 11       	cpse	r25, r1
    5c48:	fc cf       	rjmp	.-8      	; 0x5c42 <twi_writeTo+0x8>
    5c4a:	32 e0       	ldi	r19, 0x02	; 2
    5c4c:	30 93 ed 06 	sts	0x06ED, r19	; 0x8006ed <twi_state>
    5c50:	00 93 eb 06 	sts	0x06EB, r16	; 0x8006eb <twi_sendStop>
    5c54:	3f ef       	ldi	r19, 0xFF	; 255
    5c56:	30 93 80 06 	sts	0x0680, r19	; 0x800680 <twi_error>
    5c5a:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <twi_masterBufferIndex>
    5c5e:	40 93 c4 06 	sts	0x06C4, r20	; 0x8006c4 <twi_masterBufferLength>
    5c62:	56 2f       	mov	r21, r22
    5c64:	a6 ec       	ldi	r26, 0xC6	; 198
    5c66:	b6 e0       	ldi	r27, 0x06	; 6
    5c68:	fb 01       	movw	r30, r22
    5c6a:	3e 2f       	mov	r19, r30
    5c6c:	35 1b       	sub	r19, r21
    5c6e:	34 17       	cp	r19, r20
    5c70:	18 f4       	brcc	.+6      	; 0x5c78 <twi_writeTo+0x3e>
    5c72:	31 91       	ld	r19, Z+
    5c74:	3d 93       	st	X+, r19
    5c76:	f9 cf       	rjmp	.-14     	; 0x5c6a <twi_writeTo+0x30>
    5c78:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <twi_slarw>
    5c7c:	30 91 ec 06 	lds	r19, 0x06EC	; 0x8006ec <twi_slarw>
    5c80:	88 0f       	add	r24, r24
    5c82:	83 2b       	or	r24, r19
    5c84:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <twi_slarw>
    5c88:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <twi_inRepStart>
    5c8c:	81 30       	cpi	r24, 0x01	; 1
    5c8e:	61 f4       	brne	.+24     	; 0x5ca8 <twi_writeTo+0x6e>
    5c90:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <twi_inRepStart>
    5c94:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <twi_slarw>
    5c98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ca0:	83 fd       	sbrc	r24, 3
    5ca2:	f8 cf       	rjmp	.-16     	; 0x5c94 <twi_writeTo+0x5a>
    5ca4:	85 ec       	ldi	r24, 0xC5	; 197
    5ca6:	01 c0       	rjmp	.+2      	; 0x5caa <twi_writeTo+0x70>
    5ca8:	85 ee       	ldi	r24, 0xE5	; 229
    5caa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5cae:	22 23       	and	r18, r18
    5cb0:	21 f0       	breq	.+8      	; 0x5cba <twi_writeTo+0x80>
    5cb2:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <twi_state>
    5cb6:	82 30       	cpi	r24, 0x02	; 2
    5cb8:	d1 f3       	breq	.-12     	; 0x5cae <twi_writeTo+0x74>
    5cba:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <twi_error>
    5cbe:	8f 3f       	cpi	r24, 0xFF	; 255
    5cc0:	79 f0       	breq	.+30     	; 0x5ce0 <twi_writeTo+0xa6>
    5cc2:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <twi_error>
    5cc6:	80 32       	cpi	r24, 0x20	; 32
    5cc8:	41 f0       	breq	.+16     	; 0x5cda <twi_writeTo+0xa0>
    5cca:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <twi_error>
    5cce:	80 33       	cpi	r24, 0x30	; 48
    5cd0:	31 f0       	breq	.+12     	; 0x5cde <twi_writeTo+0xa4>
    5cd2:	94 e0       	ldi	r25, 0x04	; 4
    5cd4:	05 c0       	rjmp	.+10     	; 0x5ce0 <twi_writeTo+0xa6>
    5cd6:	91 e0       	ldi	r25, 0x01	; 1
    5cd8:	03 c0       	rjmp	.+6      	; 0x5ce0 <twi_writeTo+0xa6>
    5cda:	92 e0       	ldi	r25, 0x02	; 2
    5cdc:	01 c0       	rjmp	.+2      	; 0x5ce0 <twi_writeTo+0xa6>
    5cde:	93 e0       	ldi	r25, 0x03	; 3
    5ce0:	89 2f       	mov	r24, r25
    5ce2:	0f 91       	pop	r16
    5ce4:	08 95       	ret

00005ce6 <twi_transmit>:
    5ce6:	40 91 a2 06 	lds	r20, 0x06A2	; 0x8006a2 <twi_txBufferLength>
    5cea:	26 2f       	mov	r18, r22
    5cec:	30 e0       	ldi	r19, 0x00	; 0
    5cee:	24 0f       	add	r18, r20
    5cf0:	31 1d       	adc	r19, r1
    5cf2:	21 32       	cpi	r18, 0x21	; 33
    5cf4:	31 05       	cpc	r19, r1
    5cf6:	dc f4       	brge	.+54     	; 0x5d2e <twi_transmit+0x48>
    5cf8:	20 91 ed 06 	lds	r18, 0x06ED	; 0x8006ed <twi_state>
    5cfc:	24 30       	cpi	r18, 0x04	; 4
    5cfe:	c9 f4       	brne	.+50     	; 0x5d32 <twi_transmit+0x4c>
    5d00:	fc 01       	movw	r30, r24
    5d02:	80 e0       	ldi	r24, 0x00	; 0
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	86 17       	cp	r24, r22
    5d08:	58 f4       	brcc	.+22     	; 0x5d20 <twi_transmit+0x3a>
    5d0a:	30 91 a2 06 	lds	r19, 0x06A2	; 0x8006a2 <twi_txBufferLength>
    5d0e:	21 91       	ld	r18, Z+
    5d10:	dc 01       	movw	r26, r24
    5d12:	ac 55       	subi	r26, 0x5C	; 92
    5d14:	b9 4f       	sbci	r27, 0xF9	; 249
    5d16:	a3 0f       	add	r26, r19
    5d18:	b1 1d       	adc	r27, r1
    5d1a:	2c 93       	st	X, r18
    5d1c:	01 96       	adiw	r24, 0x01	; 1
    5d1e:	f3 cf       	rjmp	.-26     	; 0x5d06 <twi_transmit+0x20>
    5d20:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <twi_txBufferLength>
    5d24:	68 0f       	add	r22, r24
    5d26:	60 93 a2 06 	sts	0x06A2, r22	; 0x8006a2 <twi_txBufferLength>
    5d2a:	80 e0       	ldi	r24, 0x00	; 0
    5d2c:	08 95       	ret
    5d2e:	81 e0       	ldi	r24, 0x01	; 1
    5d30:	08 95       	ret
    5d32:	82 e0       	ldi	r24, 0x02	; 2
    5d34:	08 95       	ret

00005d36 <twi_attachSlaveRxEvent>:
    5d36:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <twi_onSlaveReceive+0x1>
    5d3a:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <twi_onSlaveReceive>
    5d3e:	08 95       	ret

00005d40 <twi_attachSlaveTxEvent>:
    5d40:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <twi_onSlaveTransmit+0x1>
    5d44:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <twi_onSlaveTransmit>
    5d48:	08 95       	ret

00005d4a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5d4a:	85 ed       	ldi	r24, 0xD5	; 213
    5d4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5d50:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5d54:	84 fd       	sbrc	r24, 4
    5d56:	fc cf       	rjmp	.-8      	; 0x5d50 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5d58:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <twi_state>
    5d5c:	08 95       	ret

00005d5e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    5d5e:	85 ec       	ldi	r24, 0xC5	; 197
    5d60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    5d64:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <twi_state>
    5d68:	08 95       	ret

00005d6a <__vector_24>:
}

ISR(TWI_vect)
{
    5d6a:	1f 92       	push	r1
    5d6c:	0f 92       	push	r0
    5d6e:	0f b6       	in	r0, 0x3f	; 63
    5d70:	0f 92       	push	r0
    5d72:	11 24       	eor	r1, r1
    5d74:	2f 93       	push	r18
    5d76:	3f 93       	push	r19
    5d78:	4f 93       	push	r20
    5d7a:	5f 93       	push	r21
    5d7c:	6f 93       	push	r22
    5d7e:	7f 93       	push	r23
    5d80:	8f 93       	push	r24
    5d82:	9f 93       	push	r25
    5d84:	af 93       	push	r26
    5d86:	bf 93       	push	r27
    5d88:	ef 93       	push	r30
    5d8a:	ff 93       	push	r31
  switch(TW_STATUS){
    5d8c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5d90:	88 7f       	andi	r24, 0xF8	; 248
    5d92:	80 36       	cpi	r24, 0x60	; 96
    5d94:	09 f4       	brne	.+2      	; 0x5d98 <__vector_24+0x2e>
    5d96:	9e c0       	rjmp	.+316    	; 0x5ed4 <__vector_24+0x16a>
    5d98:	78 f5       	brcc	.+94     	; 0x5df8 <__vector_24+0x8e>
    5d9a:	88 32       	cpi	r24, 0x28	; 40
    5d9c:	09 f4       	brne	.+2      	; 0x5da0 <__vector_24+0x36>
    5d9e:	5d c0       	rjmp	.+186    	; 0x5e5a <__vector_24+0xf0>
    5da0:	90 f4       	brcc	.+36     	; 0x5dc6 <__vector_24+0x5c>
    5da2:	80 31       	cpi	r24, 0x10	; 16
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <__vector_24+0x3e>
    5da6:	56 c0       	rjmp	.+172    	; 0x5e54 <__vector_24+0xea>
    5da8:	38 f4       	brcc	.+14     	; 0x5db8 <__vector_24+0x4e>
    5daa:	88 23       	and	r24, r24
    5dac:	09 f4       	brne	.+2      	; 0x5db0 <__vector_24+0x46>
    5dae:	f5 c0       	rjmp	.+490    	; 0x5f9a <__vector_24+0x230>
    5db0:	88 30       	cpi	r24, 0x08	; 8
    5db2:	09 f4       	brne	.+2      	; 0x5db6 <__vector_24+0x4c>
    5db4:	4f c0       	rjmp	.+158    	; 0x5e54 <__vector_24+0xea>
    5db6:	f5 c0       	rjmp	.+490    	; 0x5fa2 <__vector_24+0x238>
    5db8:	88 31       	cpi	r24, 0x18	; 24
    5dba:	09 f4       	brne	.+2      	; 0x5dbe <__vector_24+0x54>
    5dbc:	4e c0       	rjmp	.+156    	; 0x5e5a <__vector_24+0xf0>
    5dbe:	80 32       	cpi	r24, 0x20	; 32
    5dc0:	09 f4       	brne	.+2      	; 0x5dc4 <__vector_24+0x5a>
    5dc2:	5f c0       	rjmp	.+190    	; 0x5e82 <__vector_24+0x118>
    5dc4:	ee c0       	rjmp	.+476    	; 0x5fa2 <__vector_24+0x238>
    5dc6:	80 34       	cpi	r24, 0x40	; 64
    5dc8:	09 f4       	brne	.+2      	; 0x5dcc <__vector_24+0x62>
    5dca:	6a c0       	rjmp	.+212    	; 0x5ea0 <__vector_24+0x136>
    5dcc:	58 f4       	brcc	.+22     	; 0x5de4 <__vector_24+0x7a>
    5dce:	80 33       	cpi	r24, 0x30	; 48
    5dd0:	09 f4       	brne	.+2      	; 0x5dd4 <__vector_24+0x6a>
    5dd2:	57 c0       	rjmp	.+174    	; 0x5e82 <__vector_24+0x118>
    5dd4:	88 33       	cpi	r24, 0x38	; 56
    5dd6:	09 f0       	breq	.+2      	; 0x5dda <__vector_24+0x70>
    5dd8:	e4 c0       	rjmp	.+456    	; 0x5fa2 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5dda:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <twi_error>
      twi_releaseBus();
    5dde:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <twi_releaseBus>
      break;
    5de2:	df c0       	rjmp	.+446    	; 0x5fa2 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5de4:	80 35       	cpi	r24, 0x50	; 80
    5de6:	09 f4       	brne	.+2      	; 0x5dea <__vector_24+0x80>
    5de8:	4f c0       	rjmp	.+158    	; 0x5e88 <__vector_24+0x11e>
    5dea:	88 35       	cpi	r24, 0x58	; 88
    5dec:	09 f4       	brne	.+2      	; 0x5df0 <__vector_24+0x86>
    5dee:	5d c0       	rjmp	.+186    	; 0x5eaa <__vector_24+0x140>
    5df0:	88 34       	cpi	r24, 0x48	; 72
    5df2:	09 f0       	breq	.+2      	; 0x5df6 <__vector_24+0x8c>
    5df4:	d6 c0       	rjmp	.+428    	; 0x5fa2 <__vector_24+0x238>
    5df6:	d3 c0       	rjmp	.+422    	; 0x5f9e <__vector_24+0x234>
    5df8:	88 39       	cpi	r24, 0x98	; 152
    5dfa:	09 f4       	brne	.+2      	; 0x5dfe <__vector_24+0x94>
    5dfc:	c4 c0       	rjmp	.+392    	; 0x5f86 <__vector_24+0x21c>
    5dfe:	a8 f4       	brcc	.+42     	; 0x5e2a <__vector_24+0xc0>
    5e00:	88 37       	cpi	r24, 0x78	; 120
    5e02:	09 f4       	brne	.+2      	; 0x5e06 <__vector_24+0x9c>
    5e04:	67 c0       	rjmp	.+206    	; 0x5ed4 <__vector_24+0x16a>
    5e06:	38 f4       	brcc	.+14     	; 0x5e16 <__vector_24+0xac>
    5e08:	88 36       	cpi	r24, 0x68	; 104
    5e0a:	09 f4       	brne	.+2      	; 0x5e0e <__vector_24+0xa4>
    5e0c:	63 c0       	rjmp	.+198    	; 0x5ed4 <__vector_24+0x16a>
    5e0e:	80 37       	cpi	r24, 0x70	; 112
    5e10:	09 f4       	brne	.+2      	; 0x5e14 <__vector_24+0xaa>
    5e12:	60 c0       	rjmp	.+192    	; 0x5ed4 <__vector_24+0x16a>
    5e14:	c6 c0       	rjmp	.+396    	; 0x5fa2 <__vector_24+0x238>
    5e16:	88 38       	cpi	r24, 0x88	; 136
    5e18:	09 f4       	brne	.+2      	; 0x5e1c <__vector_24+0xb2>
    5e1a:	b5 c0       	rjmp	.+362    	; 0x5f86 <__vector_24+0x21c>
    5e1c:	80 39       	cpi	r24, 0x90	; 144
    5e1e:	09 f4       	brne	.+2      	; 0x5e22 <__vector_24+0xb8>
    5e20:	5f c0       	rjmp	.+190    	; 0x5ee0 <__vector_24+0x176>
    5e22:	80 38       	cpi	r24, 0x80	; 128
    5e24:	09 f0       	breq	.+2      	; 0x5e28 <__vector_24+0xbe>
    5e26:	bd c0       	rjmp	.+378    	; 0x5fa2 <__vector_24+0x238>
    5e28:	5b c0       	rjmp	.+182    	; 0x5ee0 <__vector_24+0x176>
    5e2a:	80 3b       	cpi	r24, 0xB0	; 176
    5e2c:	09 f4       	brne	.+2      	; 0x5e30 <__vector_24+0xc6>
    5e2e:	83 c0       	rjmp	.+262    	; 0x5f36 <__vector_24+0x1cc>
    5e30:	38 f4       	brcc	.+14     	; 0x5e40 <__vector_24+0xd6>
    5e32:	80 3a       	cpi	r24, 0xA0	; 160
    5e34:	09 f4       	brne	.+2      	; 0x5e38 <__vector_24+0xce>
    5e36:	66 c0       	rjmp	.+204    	; 0x5f04 <__vector_24+0x19a>
    5e38:	88 3a       	cpi	r24, 0xA8	; 168
    5e3a:	09 f4       	brne	.+2      	; 0x5e3e <__vector_24+0xd4>
    5e3c:	7c c0       	rjmp	.+248    	; 0x5f36 <__vector_24+0x1cc>
    5e3e:	b1 c0       	rjmp	.+354    	; 0x5fa2 <__vector_24+0x238>
    5e40:	80 3c       	cpi	r24, 0xC0	; 192
    5e42:	09 f4       	brne	.+2      	; 0x5e46 <__vector_24+0xdc>
    5e44:	a4 c0       	rjmp	.+328    	; 0x5f8e <__vector_24+0x224>
    5e46:	88 3c       	cpi	r24, 0xC8	; 200
    5e48:	09 f4       	brne	.+2      	; 0x5e4c <__vector_24+0xe2>
    5e4a:	a1 c0       	rjmp	.+322    	; 0x5f8e <__vector_24+0x224>
    5e4c:	88 3b       	cpi	r24, 0xB8	; 184
    5e4e:	09 f4       	brne	.+2      	; 0x5e52 <__vector_24+0xe8>
    5e50:	87 c0       	rjmp	.+270    	; 0x5f60 <__vector_24+0x1f6>
    5e52:	a7 c0       	rjmp	.+334    	; 0x5fa2 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5e54:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <twi_slarw>
    5e58:	10 c0       	rjmp	.+32     	; 0x5e7a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5e5a:	90 91 c5 06 	lds	r25, 0x06C5	; 0x8006c5 <twi_masterBufferIndex>
    5e5e:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <twi_masterBufferLength>
    5e62:	98 17       	cp	r25, r24
    5e64:	70 f5       	brcc	.+92     	; 0x5ec2 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5e66:	e0 91 c5 06 	lds	r30, 0x06C5	; 0x8006c5 <twi_masterBufferIndex>
    5e6a:	81 e0       	ldi	r24, 0x01	; 1
    5e6c:	8e 0f       	add	r24, r30
    5e6e:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <twi_masterBufferIndex>
    5e72:	f0 e0       	ldi	r31, 0x00	; 0
    5e74:	ea 53       	subi	r30, 0x3A	; 58
    5e76:	f9 4f       	sbci	r31, 0xF9	; 249
    5e78:	80 81       	ld	r24, Z
    5e7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5e7e:	85 ec       	ldi	r24, 0xC5	; 197
    5e80:	83 c0       	rjmp	.+262    	; 0x5f88 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5e82:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <twi_error>
    5e86:	8b c0       	rjmp	.+278    	; 0x5f9e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5e88:	e0 91 c5 06 	lds	r30, 0x06C5	; 0x8006c5 <twi_masterBufferIndex>
    5e8c:	81 e0       	ldi	r24, 0x01	; 1
    5e8e:	8e 0f       	add	r24, r30
    5e90:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <twi_masterBufferIndex>
    5e94:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5e98:	f0 e0       	ldi	r31, 0x00	; 0
    5e9a:	ea 53       	subi	r30, 0x3A	; 58
    5e9c:	f9 4f       	sbci	r31, 0xF9	; 249
    5e9e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5ea0:	90 91 c5 06 	lds	r25, 0x06C5	; 0x8006c5 <twi_masterBufferIndex>
    5ea4:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <twi_masterBufferLength>
    5ea8:	6b c0       	rjmp	.+214    	; 0x5f80 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5eaa:	e0 91 c5 06 	lds	r30, 0x06C5	; 0x8006c5 <twi_masterBufferIndex>
    5eae:	81 e0       	ldi	r24, 0x01	; 1
    5eb0:	8e 0f       	add	r24, r30
    5eb2:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <twi_masterBufferIndex>
    5eb6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5eba:	f0 e0       	ldi	r31, 0x00	; 0
    5ebc:	ea 53       	subi	r30, 0x3A	; 58
    5ebe:	f9 4f       	sbci	r31, 0xF9	; 249
    5ec0:	80 83       	st	Z, r24
	if (twi_sendStop)
    5ec2:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <twi_sendStop>
    5ec6:	81 11       	cpse	r24, r1
    5ec8:	6a c0       	rjmp	.+212    	; 0x5f9e <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    5eca:	81 e0       	ldi	r24, 0x01	; 1
    5ecc:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5ed0:	84 ea       	ldi	r24, 0xA4	; 164
    5ed2:	5e c0       	rjmp	.+188    	; 0x5f90 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5ed4:	83 e0       	ldi	r24, 0x03	; 3
    5ed6:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5eda:	10 92 81 06 	sts	0x0681, r1	; 0x800681 <twi_rxBufferIndex>
    5ede:	cf cf       	rjmp	.-98     	; 0x5e7e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5ee0:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <twi_rxBufferIndex>
    5ee4:	80 32       	cpi	r24, 0x20	; 32
    5ee6:	08 f0       	brcs	.+2      	; 0x5eea <__vector_24+0x180>
    5ee8:	4e c0       	rjmp	.+156    	; 0x5f86 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5eea:	e0 91 81 06 	lds	r30, 0x0681	; 0x800681 <twi_rxBufferIndex>
    5eee:	81 e0       	ldi	r24, 0x01	; 1
    5ef0:	8e 0f       	add	r24, r30
    5ef2:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <twi_rxBufferIndex>
    5ef6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5efa:	f0 e0       	ldi	r31, 0x00	; 0
    5efc:	ee 57       	subi	r30, 0x7E	; 126
    5efe:	f9 4f       	sbci	r31, 0xF9	; 249
    5f00:	80 83       	st	Z, r24
    5f02:	bd cf       	rjmp	.-134    	; 0x5e7e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5f04:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5f08:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <twi_rxBufferIndex>
    5f0c:	80 32       	cpi	r24, 0x20	; 32
    5f0e:	30 f4       	brcc	.+12     	; 0x5f1c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5f10:	e0 91 81 06 	lds	r30, 0x0681	; 0x800681 <twi_rxBufferIndex>
    5f14:	f0 e0       	ldi	r31, 0x00	; 0
    5f16:	ee 57       	subi	r30, 0x7E	; 126
    5f18:	f9 4f       	sbci	r31, 0xF9	; 249
    5f1a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5f1c:	60 91 81 06 	lds	r22, 0x0681	; 0x800681 <twi_rxBufferIndex>
    5f20:	70 e0       	ldi	r23, 0x00	; 0
    5f22:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <twi_onSlaveReceive>
    5f26:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <twi_onSlaveReceive+0x1>
    5f2a:	82 e8       	ldi	r24, 0x82	; 130
    5f2c:	96 e0       	ldi	r25, 0x06	; 6
    5f2e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5f30:	10 92 81 06 	sts	0x0681, r1	; 0x800681 <twi_rxBufferIndex>
      break;
    5f34:	36 c0       	rjmp	.+108    	; 0x5fa2 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5f36:	84 e0       	ldi	r24, 0x04	; 4
    5f38:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5f3c:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5f40:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5f44:	e0 91 e8 06 	lds	r30, 0x06E8	; 0x8006e8 <twi_onSlaveTransmit>
    5f48:	f0 91 e9 06 	lds	r31, 0x06E9	; 0x8006e9 <twi_onSlaveTransmit+0x1>
    5f4c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5f4e:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <twi_txBufferLength>
    5f52:	81 11       	cpse	r24, r1
    5f54:	05 c0       	rjmp	.+10     	; 0x5f60 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    5f56:	81 e0       	ldi	r24, 0x01	; 1
    5f58:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5f5c:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5f60:	e0 91 a3 06 	lds	r30, 0x06A3	; 0x8006a3 <twi_txBufferIndex>
    5f64:	81 e0       	ldi	r24, 0x01	; 1
    5f66:	8e 0f       	add	r24, r30
    5f68:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <twi_txBufferIndex>
    5f6c:	f0 e0       	ldi	r31, 0x00	; 0
    5f6e:	ec 55       	subi	r30, 0x5C	; 92
    5f70:	f9 4f       	sbci	r31, 0xF9	; 249
    5f72:	80 81       	ld	r24, Z
    5f74:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5f78:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <twi_txBufferIndex>
    5f7c:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <twi_txBufferLength>
    5f80:	98 17       	cp	r25, r24
    5f82:	08 f4       	brcc	.+2      	; 0x5f86 <__vector_24+0x21c>
    5f84:	7c cf       	rjmp	.-264    	; 0x5e7e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5f86:	85 e8       	ldi	r24, 0x85	; 133
    5f88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5f8c:	0a c0       	rjmp	.+20     	; 0x5fa2 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5f8e:	85 ec       	ldi	r24, 0xC5	; 197
    5f90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5f94:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <twi_state>
      break;
    5f98:	04 c0       	rjmp	.+8      	; 0x5fa2 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5f9a:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <twi_error>
      twi_stop();
    5f9e:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <twi_stop>
      break;
  }
}
    5fa2:	ff 91       	pop	r31
    5fa4:	ef 91       	pop	r30
    5fa6:	bf 91       	pop	r27
    5fa8:	af 91       	pop	r26
    5faa:	9f 91       	pop	r25
    5fac:	8f 91       	pop	r24
    5fae:	7f 91       	pop	r23
    5fb0:	6f 91       	pop	r22
    5fb2:	5f 91       	pop	r21
    5fb4:	4f 91       	pop	r20
    5fb6:	3f 91       	pop	r19
    5fb8:	2f 91       	pop	r18
    5fba:	0f 90       	pop	r0
    5fbc:	0f be       	out	0x3f, r0	; 63
    5fbe:	0f 90       	pop	r0
    5fc0:	1f 90       	pop	r1
    5fc2:	18 95       	reti

00005fc4 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    5fc4:	0c 94 81 33 	jmp	0x6702	; 0x6702 <malloc>

00005fc8 <_ZN6Stream9timedReadEv>:
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
{
    5fc8:	0f 93       	push	r16
    5fca:	1f 93       	push	r17
    5fcc:	cf 93       	push	r28
    5fce:	df 93       	push	r29
    5fd0:	ec 01       	movw	r28, r24
    5fd2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    5fd6:	68 87       	std	Y+8, r22	; 0x08
    5fd8:	79 87       	std	Y+9, r23	; 0x09
    5fda:	8a 87       	std	Y+10, r24	; 0x0a
    5fdc:	9b 87       	std	Y+11, r25	; 0x0b
    5fde:	e8 81       	ld	r30, Y
    5fe0:	f9 81       	ldd	r31, Y+1	; 0x01
    5fe2:	02 84       	ldd	r0, Z+10	; 0x0a
    5fe4:	f3 85       	ldd	r31, Z+11	; 0x0b
    5fe6:	e0 2d       	mov	r30, r0
    5fe8:	ce 01       	movw	r24, r28
    5fea:	09 95       	icall
    5fec:	97 ff       	sbrs	r25, 7
    5fee:	17 c0       	rjmp	.+46     	; 0x601e <_ZN6Stream9timedReadEv+0x56>
    5ff0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    5ff4:	08 85       	ldd	r16, Y+8	; 0x08
    5ff6:	19 85       	ldd	r17, Y+9	; 0x09
    5ff8:	2a 85       	ldd	r18, Y+10	; 0x0a
    5ffa:	3b 85       	ldd	r19, Y+11	; 0x0b
    5ffc:	dc 01       	movw	r26, r24
    5ffe:	cb 01       	movw	r24, r22
    6000:	80 1b       	sub	r24, r16
    6002:	91 0b       	sbc	r25, r17
    6004:	a2 0b       	sbc	r26, r18
    6006:	b3 0b       	sbc	r27, r19
    6008:	0c 81       	ldd	r16, Y+4	; 0x04
    600a:	1d 81       	ldd	r17, Y+5	; 0x05
    600c:	2e 81       	ldd	r18, Y+6	; 0x06
    600e:	3f 81       	ldd	r19, Y+7	; 0x07
    6010:	80 17       	cp	r24, r16
    6012:	91 07       	cpc	r25, r17
    6014:	a2 07       	cpc	r26, r18
    6016:	b3 07       	cpc	r27, r19
    6018:	10 f3       	brcs	.-60     	; 0x5fde <_ZN6Stream9timedReadEv+0x16>
    601a:	8f ef       	ldi	r24, 0xFF	; 255
    601c:	9f ef       	ldi	r25, 0xFF	; 255
    601e:	df 91       	pop	r29
    6020:	cf 91       	pop	r28
    6022:	1f 91       	pop	r17
    6024:	0f 91       	pop	r16
    6026:	08 95       	ret

00006028 <_ZN6Stream9timedPeekEv>:
    6028:	0f 93       	push	r16
    602a:	1f 93       	push	r17
    602c:	cf 93       	push	r28
    602e:	df 93       	push	r29
    6030:	ec 01       	movw	r28, r24
    6032:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    6036:	68 87       	std	Y+8, r22	; 0x08
    6038:	79 87       	std	Y+9, r23	; 0x09
    603a:	8a 87       	std	Y+10, r24	; 0x0a
    603c:	9b 87       	std	Y+11, r25	; 0x0b
    603e:	e8 81       	ld	r30, Y
    6040:	f9 81       	ldd	r31, Y+1	; 0x01
    6042:	04 84       	ldd	r0, Z+12	; 0x0c
    6044:	f5 85       	ldd	r31, Z+13	; 0x0d
    6046:	e0 2d       	mov	r30, r0
    6048:	ce 01       	movw	r24, r28
    604a:	09 95       	icall
    604c:	97 ff       	sbrs	r25, 7
    604e:	17 c0       	rjmp	.+46     	; 0x607e <_ZN6Stream9timedPeekEv+0x56>
    6050:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <millis>
    6054:	08 85       	ldd	r16, Y+8	; 0x08
    6056:	19 85       	ldd	r17, Y+9	; 0x09
    6058:	2a 85       	ldd	r18, Y+10	; 0x0a
    605a:	3b 85       	ldd	r19, Y+11	; 0x0b
    605c:	dc 01       	movw	r26, r24
    605e:	cb 01       	movw	r24, r22
    6060:	80 1b       	sub	r24, r16
    6062:	91 0b       	sbc	r25, r17
    6064:	a2 0b       	sbc	r26, r18
    6066:	b3 0b       	sbc	r27, r19
    6068:	0c 81       	ldd	r16, Y+4	; 0x04
    606a:	1d 81       	ldd	r17, Y+5	; 0x05
    606c:	2e 81       	ldd	r18, Y+6	; 0x06
    606e:	3f 81       	ldd	r19, Y+7	; 0x07
    6070:	80 17       	cp	r24, r16
    6072:	91 07       	cpc	r25, r17
    6074:	a2 07       	cpc	r26, r18
    6076:	b3 07       	cpc	r27, r19
    6078:	10 f3       	brcs	.-60     	; 0x603e <_ZN6Stream9timedPeekEv+0x16>
    607a:	8f ef       	ldi	r24, 0xFF	; 255
    607c:	9f ef       	ldi	r25, 0xFF	; 255
    607e:	df 91       	pop	r29
    6080:	cf 91       	pop	r28
    6082:	1f 91       	pop	r17
    6084:	0f 91       	pop	r16
    6086:	08 95       	ret

00006088 <_ZN6Stream13peekNextDigitE13LookaheadModeb>:
    6088:	0f 93       	push	r16
    608a:	1f 93       	push	r17
    608c:	cf 93       	push	r28
    608e:	df 93       	push	r29
    6090:	ec 01       	movw	r28, r24
    6092:	16 2f       	mov	r17, r22
    6094:	04 2f       	mov	r16, r20
    6096:	ce 01       	movw	r24, r28
    6098:	0e 94 14 30 	call	0x6028	; 0x6028 <_ZN6Stream9timedPeekEv>
    609c:	97 fd       	sbrc	r25, 7
    609e:	2b c0       	rjmp	.+86     	; 0x60f6 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6e>
    60a0:	8d 32       	cpi	r24, 0x2D	; 45
    60a2:	91 05       	cpc	r25, r1
    60a4:	09 f1       	breq	.+66     	; 0x60e8 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x60>
    60a6:	9c 01       	movw	r18, r24
    60a8:	20 53       	subi	r18, 0x30	; 48
    60aa:	31 09       	sbc	r19, r1
    60ac:	2a 30       	cpi	r18, 0x0A	; 10
    60ae:	31 05       	cpc	r19, r1
    60b0:	10 f1       	brcs	.+68     	; 0x60f6 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6e>
    60b2:	00 23       	and	r16, r16
    60b4:	19 f0       	breq	.+6      	; 0x60bc <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x34>
    60b6:	8e 32       	cpi	r24, 0x2E	; 46
    60b8:	91 05       	cpc	r25, r1
    60ba:	c1 f0       	breq	.+48     	; 0x60ec <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x64>
    60bc:	11 30       	cpi	r17, 0x01	; 1
    60be:	c9 f0       	breq	.+50     	; 0x60f2 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6a>
    60c0:	12 30       	cpi	r17, 0x02	; 2
    60c2:	51 f4       	brne	.+20     	; 0x60d8 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x50>
    60c4:	8d 30       	cpi	r24, 0x0D	; 13
    60c6:	91 05       	cpc	r25, r1
    60c8:	39 f0       	breq	.+14     	; 0x60d8 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x50>
    60ca:	24 f4       	brge	.+8      	; 0x60d4 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x4c>
    60cc:	09 97       	sbiw	r24, 0x09	; 9
    60ce:	02 97       	sbiw	r24, 0x02	; 2
    60d0:	18 f0       	brcs	.+6      	; 0x60d8 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x50>
    60d2:	0f c0       	rjmp	.+30     	; 0x60f2 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6a>
    60d4:	80 97       	sbiw	r24, 0x20	; 32
    60d6:	69 f4       	brne	.+26     	; 0x60f2 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6a>
    60d8:	e8 81       	ld	r30, Y
    60da:	f9 81       	ldd	r31, Y+1	; 0x01
    60dc:	02 84       	ldd	r0, Z+10	; 0x0a
    60de:	f3 85       	ldd	r31, Z+11	; 0x0b
    60e0:	e0 2d       	mov	r30, r0
    60e2:	ce 01       	movw	r24, r28
    60e4:	09 95       	icall
    60e6:	d7 cf       	rjmp	.-82     	; 0x6096 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0xe>
    60e8:	8d e2       	ldi	r24, 0x2D	; 45
    60ea:	01 c0       	rjmp	.+2      	; 0x60ee <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x66>
    60ec:	8e e2       	ldi	r24, 0x2E	; 46
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	02 c0       	rjmp	.+4      	; 0x60f6 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6e>
    60f2:	8f ef       	ldi	r24, 0xFF	; 255
    60f4:	9f ef       	ldi	r25, 0xFF	; 255
    60f6:	df 91       	pop	r29
    60f8:	cf 91       	pop	r28
    60fa:	1f 91       	pop	r17
    60fc:	0f 91       	pop	r16
    60fe:	08 95       	ret

00006100 <_ZN6Stream8parseIntE13LookaheadModec>:
    6100:	bf 92       	push	r11
    6102:	cf 92       	push	r12
    6104:	df 92       	push	r13
    6106:	ef 92       	push	r14
    6108:	ff 92       	push	r15
    610a:	0f 93       	push	r16
    610c:	1f 93       	push	r17
    610e:	cf 93       	push	r28
    6110:	df 93       	push	r29
    6112:	8c 01       	movw	r16, r24
    6114:	c4 2f       	mov	r28, r20
    6116:	40 e0       	ldi	r20, 0x00	; 0
    6118:	0e 94 44 30 	call	0x6088	; 0x6088 <_ZN6Stream13peekNextDigitE13LookaheadModeb>
    611c:	fc 01       	movw	r30, r24
    611e:	97 fd       	sbrc	r25, 7
    6120:	45 c0       	rjmp	.+138    	; 0x61ac <_ZN6Stream8parseIntE13LookaheadModec+0xac>
    6122:	c1 2c       	mov	r12, r1
    6124:	d1 2c       	mov	r13, r1
    6126:	76 01       	movw	r14, r12
    6128:	b1 2c       	mov	r11, r1
    612a:	d0 e0       	ldi	r29, 0x00	; 0
    612c:	ec 17       	cp	r30, r28
    612e:	fd 07       	cpc	r31, r29
    6130:	09 f1       	breq	.+66     	; 0x6174 <_ZN6Stream8parseIntE13LookaheadModec+0x74>
    6132:	ed 32       	cpi	r30, 0x2D	; 45
    6134:	f1 05       	cpc	r31, r1
    6136:	e1 f0       	breq	.+56     	; 0x6170 <_ZN6Stream8parseIntE13LookaheadModec+0x70>
    6138:	cf 01       	movw	r24, r30
    613a:	c0 97       	sbiw	r24, 0x30	; 48
    613c:	0a 97       	sbiw	r24, 0x0a	; 10
    613e:	d0 f4       	brcc	.+52     	; 0x6174 <_ZN6Stream8parseIntE13LookaheadModec+0x74>
    6140:	aa e0       	ldi	r26, 0x0A	; 10
    6142:	b0 e0       	ldi	r27, 0x00	; 0
    6144:	a7 01       	movw	r20, r14
    6146:	96 01       	movw	r18, r12
    6148:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__muluhisi3>
    614c:	6f 01       	movw	r12, r30
    614e:	ff 0f       	add	r31, r31
    6150:	ee 08       	sbc	r14, r14
    6152:	ff 08       	sbc	r15, r15
    6154:	dc 01       	movw	r26, r24
    6156:	cb 01       	movw	r24, r22
    6158:	8c 0d       	add	r24, r12
    615a:	9d 1d       	adc	r25, r13
    615c:	ae 1d       	adc	r26, r14
    615e:	bf 1d       	adc	r27, r15
    6160:	6c 01       	movw	r12, r24
    6162:	7d 01       	movw	r14, r26
    6164:	20 e3       	ldi	r18, 0x30	; 48
    6166:	c2 1a       	sub	r12, r18
    6168:	d1 08       	sbc	r13, r1
    616a:	e1 08       	sbc	r14, r1
    616c:	f1 08       	sbc	r15, r1
    616e:	02 c0       	rjmp	.+4      	; 0x6174 <_ZN6Stream8parseIntE13LookaheadModec+0x74>
    6170:	bb 24       	eor	r11, r11
    6172:	b3 94       	inc	r11
    6174:	d8 01       	movw	r26, r16
    6176:	ed 91       	ld	r30, X+
    6178:	fc 91       	ld	r31, X
    617a:	02 84       	ldd	r0, Z+10	; 0x0a
    617c:	f3 85       	ldd	r31, Z+11	; 0x0b
    617e:	e0 2d       	mov	r30, r0
    6180:	c8 01       	movw	r24, r16
    6182:	09 95       	icall
    6184:	c8 01       	movw	r24, r16
    6186:	0e 94 14 30 	call	0x6028	; 0x6028 <_ZN6Stream9timedPeekEv>
    618a:	fc 01       	movw	r30, r24
    618c:	c0 97       	sbiw	r24, 0x30	; 48
    618e:	0a 97       	sbiw	r24, 0x0a	; 10
    6190:	68 f2       	brcs	.-102    	; 0x612c <_ZN6Stream8parseIntE13LookaheadModec+0x2c>
    6192:	ce 17       	cp	r28, r30
    6194:	df 07       	cpc	r29, r31
    6196:	51 f2       	breq	.-108    	; 0x612c <_ZN6Stream8parseIntE13LookaheadModec+0x2c>
    6198:	bb 20       	and	r11, r11
    619a:	61 f0       	breq	.+24     	; 0x61b4 <_ZN6Stream8parseIntE13LookaheadModec+0xb4>
    619c:	66 27       	eor	r22, r22
    619e:	77 27       	eor	r23, r23
    61a0:	cb 01       	movw	r24, r22
    61a2:	6c 19       	sub	r22, r12
    61a4:	7d 09       	sbc	r23, r13
    61a6:	8e 09       	sbc	r24, r14
    61a8:	9f 09       	sbc	r25, r15
    61aa:	06 c0       	rjmp	.+12     	; 0x61b8 <_ZN6Stream8parseIntE13LookaheadModec+0xb8>
    61ac:	60 e0       	ldi	r22, 0x00	; 0
    61ae:	70 e0       	ldi	r23, 0x00	; 0
    61b0:	cb 01       	movw	r24, r22
    61b2:	02 c0       	rjmp	.+4      	; 0x61b8 <_ZN6Stream8parseIntE13LookaheadModec+0xb8>
    61b4:	c7 01       	movw	r24, r14
    61b6:	b6 01       	movw	r22, r12
    61b8:	df 91       	pop	r29
    61ba:	cf 91       	pop	r28
    61bc:	1f 91       	pop	r17
    61be:	0f 91       	pop	r16
    61c0:	ff 90       	pop	r15
    61c2:	ef 90       	pop	r14
    61c4:	df 90       	pop	r13
    61c6:	cf 90       	pop	r12
    61c8:	bf 90       	pop	r11
    61ca:	08 95       	ret

000061cc <_ZN6Stream9findMultiEPNS_11MultiTargetEi>:
    61cc:	4f 92       	push	r4
    61ce:	5f 92       	push	r5
    61d0:	6f 92       	push	r6
    61d2:	7f 92       	push	r7
    61d4:	8f 92       	push	r8
    61d6:	9f 92       	push	r9
    61d8:	af 92       	push	r10
    61da:	bf 92       	push	r11
    61dc:	cf 92       	push	r12
    61de:	df 92       	push	r13
    61e0:	ef 92       	push	r14
    61e2:	ff 92       	push	r15
    61e4:	0f 93       	push	r16
    61e6:	1f 93       	push	r17
    61e8:	cf 93       	push	r28
    61ea:	df 93       	push	r29
    61ec:	8c 01       	movw	r16, r24
    61ee:	eb 01       	movw	r28, r22
    61f0:	86 e0       	ldi	r24, 0x06	; 6
    61f2:	84 9f       	mul	r24, r20
    61f4:	40 01       	movw	r8, r0
    61f6:	85 9f       	mul	r24, r21
    61f8:	90 0c       	add	r9, r0
    61fa:	11 24       	eor	r1, r1
    61fc:	86 0e       	add	r8, r22
    61fe:	97 1e       	adc	r9, r23
    6200:	fb 01       	movw	r30, r22
    6202:	e8 15       	cp	r30, r8
    6204:	f9 05       	cpc	r31, r9
    6206:	f8 f4       	brcc	.+62     	; 0x6246 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x7a>
    6208:	82 81       	ldd	r24, Z+2	; 0x02
    620a:	93 81       	ldd	r25, Z+3	; 0x03
    620c:	89 2b       	or	r24, r25
    620e:	11 f1       	breq	.+68     	; 0x6254 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x88>
    6210:	36 96       	adiw	r30, 0x06	; 6
    6212:	f7 cf       	rjmp	.-18     	; 0x6202 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x36>
    6214:	60 81       	ld	r22, Z
    6216:	71 81       	ldd	r23, Z+1	; 0x01
    6218:	44 81       	ldd	r20, Z+4	; 0x04
    621a:	55 81       	ldd	r21, Z+5	; 0x05
    621c:	db 01       	movw	r26, r22
    621e:	a4 0f       	add	r26, r20
    6220:	b5 1f       	adc	r27, r21
    6222:	2c 91       	ld	r18, X
    6224:	30 e0       	ldi	r19, 0x00	; 0
    6226:	82 17       	cp	r24, r18
    6228:	93 07       	cpc	r25, r19
    622a:	11 f5       	brne	.+68     	; 0x6270 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xa4>
    622c:	4f 5f       	subi	r20, 0xFF	; 255
    622e:	5f 4f       	sbci	r21, 0xFF	; 255
    6230:	55 83       	std	Z+5, r21	; 0x05
    6232:	44 83       	std	Z+4, r20	; 0x04
    6234:	22 81       	ldd	r18, Z+2	; 0x02
    6236:	33 81       	ldd	r19, Z+3	; 0x03
    6238:	42 17       	cp	r20, r18
    623a:	53 07       	cpc	r21, r19
    623c:	59 f0       	breq	.+22     	; 0x6254 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x88>
    623e:	36 96       	adiw	r30, 0x06	; 6
    6240:	e8 15       	cp	r30, r8
    6242:	f9 05       	cpc	r31, r9
    6244:	38 f3       	brcs	.-50     	; 0x6214 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x48>
    6246:	c8 01       	movw	r24, r16
    6248:	0e 94 e4 2f 	call	0x5fc8	; 0x5fc8 <_ZN6Stream9timedReadEv>
    624c:	97 fd       	sbrc	r25, 7
    624e:	44 c0       	rjmp	.+136    	; 0x62d8 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x10c>
    6250:	fe 01       	movw	r30, r28
    6252:	f6 cf       	rjmp	.-20     	; 0x6240 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x74>
    6254:	ec 1b       	sub	r30, r28
    6256:	fd 0b       	sbc	r31, r29
    6258:	f5 95       	asr	r31
    625a:	e7 95       	ror	r30
    625c:	2b ea       	ldi	r18, 0xAB	; 171
    625e:	3a ea       	ldi	r19, 0xAA	; 170
    6260:	e2 9f       	mul	r30, r18
    6262:	c0 01       	movw	r24, r0
    6264:	e3 9f       	mul	r30, r19
    6266:	90 0d       	add	r25, r0
    6268:	f2 9f       	mul	r31, r18
    626a:	90 0d       	add	r25, r0
    626c:	11 24       	eor	r1, r1
    626e:	36 c0       	rjmp	.+108    	; 0x62dc <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x110>
    6270:	41 15       	cp	r20, r1
    6272:	51 05       	cpc	r21, r1
    6274:	21 f3       	breq	.-56     	; 0x623e <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x72>
    6276:	c4 80       	ldd	r12, Z+4	; 0x04
    6278:	d5 80       	ldd	r13, Z+5	; 0x05
    627a:	96 01       	movw	r18, r12
    627c:	21 50       	subi	r18, 0x01	; 1
    627e:	31 09       	sbc	r19, r1
    6280:	35 83       	std	Z+5, r19	; 0x05
    6282:	24 83       	std	Z+4, r18	; 0x04
    6284:	db 01       	movw	r26, r22
    6286:	a2 0f       	add	r26, r18
    6288:	b3 1f       	adc	r27, r19
    628a:	ac 91       	ld	r26, X
    628c:	b0 e0       	ldi	r27, 0x00	; 0
    628e:	8a 17       	cp	r24, r26
    6290:	9b 07       	cpc	r25, r27
    6292:	f9 f4       	brne	.+62     	; 0x62d2 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x106>
    6294:	21 15       	cp	r18, r1
    6296:	31 05       	cpc	r19, r1
    6298:	c9 f0       	breq	.+50     	; 0x62cc <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x100>
    629a:	5b 01       	movw	r10, r22
    629c:	7a 01       	movw	r14, r20
    629e:	e2 1a       	sub	r14, r18
    62a0:	f3 0a       	sbc	r15, r19
    62a2:	e6 0e       	add	r14, r22
    62a4:	f7 1e       	adc	r15, r23
    62a6:	41 2c       	mov	r4, r1
    62a8:	51 2c       	mov	r5, r1
    62aa:	d5 01       	movw	r26, r10
    62ac:	6d 90       	ld	r6, X+
    62ae:	5d 01       	movw	r10, r26
    62b0:	d7 01       	movw	r26, r14
    62b2:	7d 90       	ld	r7, X+
    62b4:	7d 01       	movw	r14, r26
    62b6:	67 10       	cpse	r6, r7
    62b8:	06 c0       	rjmp	.+12     	; 0x62c6 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xfa>
    62ba:	bf ef       	ldi	r27, 0xFF	; 255
    62bc:	4b 1a       	sub	r4, r27
    62be:	5b 0a       	sbc	r5, r27
    62c0:	42 16       	cp	r4, r18
    62c2:	53 06       	cpc	r5, r19
    62c4:	90 f3       	brcs	.-28     	; 0x62aa <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xde>
    62c6:	24 15       	cp	r18, r4
    62c8:	35 05       	cpc	r19, r5
    62ca:	a9 f6       	brne	.-86     	; 0x6276 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xaa>
    62cc:	d5 82       	std	Z+5, r13	; 0x05
    62ce:	c4 82       	std	Z+4, r12	; 0x04
    62d0:	b6 cf       	rjmp	.-148    	; 0x623e <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x72>
    62d2:	23 2b       	or	r18, r19
    62d4:	81 f6       	brne	.-96     	; 0x6276 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xaa>
    62d6:	b3 cf       	rjmp	.-154    	; 0x623e <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x72>
    62d8:	8f ef       	ldi	r24, 0xFF	; 255
    62da:	9f ef       	ldi	r25, 0xFF	; 255
    62dc:	df 91       	pop	r29
    62de:	cf 91       	pop	r28
    62e0:	1f 91       	pop	r17
    62e2:	0f 91       	pop	r16
    62e4:	ff 90       	pop	r15
    62e6:	ef 90       	pop	r14
    62e8:	df 90       	pop	r13
    62ea:	cf 90       	pop	r12
    62ec:	bf 90       	pop	r11
    62ee:	af 90       	pop	r10
    62f0:	9f 90       	pop	r9
    62f2:	8f 90       	pop	r8
    62f4:	7f 90       	pop	r7
    62f6:	6f 90       	pop	r6
    62f8:	5f 90       	pop	r5
    62fa:	4f 90       	pop	r4
    62fc:	08 95       	ret

000062fe <_ZN6Stream9findUntilEPcjS0_j.part.0.constprop.1>:
    62fe:	cf 93       	push	r28
    6300:	df 93       	push	r29
    6302:	00 d0       	rcall	.+0      	; 0x6304 <_ZN6Stream9findUntilEPcjS0_j.part.0.constprop.1+0x6>
    6304:	00 d0       	rcall	.+0      	; 0x6306 <_ZN6Stream9findUntilEPcjS0_j.part.0.constprop.1+0x8>
    6306:	00 d0       	rcall	.+0      	; 0x6308 <_ZN6Stream9findUntilEPcjS0_j.part.0.constprop.1+0xa>
    6308:	cd b7       	in	r28, 0x3d	; 61
    630a:	de b7       	in	r29, 0x3e	; 62
    630c:	fe 01       	movw	r30, r28
    630e:	31 96       	adiw	r30, 0x01	; 1
    6310:	26 e0       	ldi	r18, 0x06	; 6
    6312:	df 01       	movw	r26, r30
    6314:	1d 92       	st	X+, r1
    6316:	2a 95       	dec	r18
    6318:	e9 f7       	brne	.-6      	; 0x6314 <_ZN6Stream9findUntilEPcjS0_j.part.0.constprop.1+0x16>
    631a:	7a 83       	std	Y+2, r23	; 0x02
    631c:	69 83       	std	Y+1, r22	; 0x01
    631e:	5c 83       	std	Y+4, r21	; 0x04
    6320:	4b 83       	std	Y+3, r20	; 0x03
    6322:	41 e0       	ldi	r20, 0x01	; 1
    6324:	50 e0       	ldi	r21, 0x00	; 0
    6326:	bf 01       	movw	r22, r30
    6328:	0e 94 e6 30 	call	0x61cc	; 0x61cc <_ZN6Stream9findMultiEPNS_11MultiTargetEi>
    632c:	21 e0       	ldi	r18, 0x01	; 1
    632e:	89 2b       	or	r24, r25
    6330:	09 f0       	breq	.+2      	; 0x6334 <_ZN6Stream9findUntilEPcjS0_j.part.0.constprop.1+0x36>
    6332:	20 e0       	ldi	r18, 0x00	; 0
    6334:	82 2f       	mov	r24, r18
    6336:	26 96       	adiw	r28, 0x06	; 6
    6338:	0f b6       	in	r0, 0x3f	; 63
    633a:	f8 94       	cli
    633c:	de bf       	out	0x3e, r29	; 62
    633e:	0f be       	out	0x3f, r0	; 63
    6340:	cd bf       	out	0x3d, r28	; 61
    6342:	df 91       	pop	r29
    6344:	cf 91       	pop	r28
    6346:	08 95       	ret

00006348 <_ZN6Stream4findEPc>:
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  return findUntil(target, strlen(target), NULL, 0);
    6348:	fb 01       	movw	r30, r22
    634a:	01 90       	ld	r0, Z+
    634c:	00 20       	and	r0, r0
    634e:	e9 f7       	brne	.-6      	; 0x634a <_ZN6Stream4findEPc+0x2>
    6350:	31 97       	sbiw	r30, 0x01	; 1
    6352:	af 01       	movw	r20, r30
    6354:	46 1b       	sub	r20, r22
    6356:	57 0b       	sbc	r21, r23
    6358:	0c 94 7f 31 	jmp	0x62fe	; 0x62fe <_ZN6Stream9findUntilEPcjS0_j.part.0.constprop.1>

0000635c <__cmpsf2>:
    635c:	0e 94 54 32 	call	0x64a8	; 0x64a8 <__fp_cmp>
    6360:	08 f4       	brcc	.+2      	; 0x6364 <__cmpsf2+0x8>
    6362:	81 e0       	ldi	r24, 0x01	; 1
    6364:	08 95       	ret

00006366 <__divsf3>:
    6366:	0e 94 c7 31 	call	0x638e	; 0x638e <__divsf3x>
    636a:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_round>
    636e:	0e 94 40 08 	call	0x1080	; 0x1080 <__fp_pscB>
    6372:	58 f0       	brcs	.+22     	; 0x638a <__divsf3+0x24>
    6374:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_pscA>
    6378:	40 f0       	brcs	.+16     	; 0x638a <__divsf3+0x24>
    637a:	29 f4       	brne	.+10     	; 0x6386 <__divsf3+0x20>
    637c:	5f 3f       	cpi	r21, 0xFF	; 255
    637e:	29 f0       	breq	.+10     	; 0x638a <__divsf3+0x24>
    6380:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_inf>
    6384:	51 11       	cpse	r21, r1
    6386:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_szero>
    638a:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_nan>

0000638e <__divsf3x>:
    638e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_split3>
    6392:	68 f3       	brcs	.-38     	; 0x636e <__divsf3+0x8>

00006394 <__divsf3_pse>:
    6394:	99 23       	and	r25, r25
    6396:	b1 f3       	breq	.-20     	; 0x6384 <__divsf3+0x1e>
    6398:	55 23       	and	r21, r21
    639a:	91 f3       	breq	.-28     	; 0x6380 <__divsf3+0x1a>
    639c:	95 1b       	sub	r25, r21
    639e:	55 0b       	sbc	r21, r21
    63a0:	bb 27       	eor	r27, r27
    63a2:	aa 27       	eor	r26, r26
    63a4:	62 17       	cp	r22, r18
    63a6:	73 07       	cpc	r23, r19
    63a8:	84 07       	cpc	r24, r20
    63aa:	38 f0       	brcs	.+14     	; 0x63ba <__divsf3_pse+0x26>
    63ac:	9f 5f       	subi	r25, 0xFF	; 255
    63ae:	5f 4f       	sbci	r21, 0xFF	; 255
    63b0:	22 0f       	add	r18, r18
    63b2:	33 1f       	adc	r19, r19
    63b4:	44 1f       	adc	r20, r20
    63b6:	aa 1f       	adc	r26, r26
    63b8:	a9 f3       	breq	.-22     	; 0x63a4 <__divsf3_pse+0x10>
    63ba:	35 d0       	rcall	.+106    	; 0x6426 <__divsf3_pse+0x92>
    63bc:	0e 2e       	mov	r0, r30
    63be:	3a f0       	brmi	.+14     	; 0x63ce <__divsf3_pse+0x3a>
    63c0:	e0 e8       	ldi	r30, 0x80	; 128
    63c2:	32 d0       	rcall	.+100    	; 0x6428 <__divsf3_pse+0x94>
    63c4:	91 50       	subi	r25, 0x01	; 1
    63c6:	50 40       	sbci	r21, 0x00	; 0
    63c8:	e6 95       	lsr	r30
    63ca:	00 1c       	adc	r0, r0
    63cc:	ca f7       	brpl	.-14     	; 0x63c0 <__divsf3_pse+0x2c>
    63ce:	2b d0       	rcall	.+86     	; 0x6426 <__divsf3_pse+0x92>
    63d0:	fe 2f       	mov	r31, r30
    63d2:	29 d0       	rcall	.+82     	; 0x6426 <__divsf3_pse+0x92>
    63d4:	66 0f       	add	r22, r22
    63d6:	77 1f       	adc	r23, r23
    63d8:	88 1f       	adc	r24, r24
    63da:	bb 1f       	adc	r27, r27
    63dc:	26 17       	cp	r18, r22
    63de:	37 07       	cpc	r19, r23
    63e0:	48 07       	cpc	r20, r24
    63e2:	ab 07       	cpc	r26, r27
    63e4:	b0 e8       	ldi	r27, 0x80	; 128
    63e6:	09 f0       	breq	.+2      	; 0x63ea <__divsf3_pse+0x56>
    63e8:	bb 0b       	sbc	r27, r27
    63ea:	80 2d       	mov	r24, r0
    63ec:	bf 01       	movw	r22, r30
    63ee:	ff 27       	eor	r31, r31
    63f0:	93 58       	subi	r25, 0x83	; 131
    63f2:	5f 4f       	sbci	r21, 0xFF	; 255
    63f4:	3a f0       	brmi	.+14     	; 0x6404 <__divsf3_pse+0x70>
    63f6:	9e 3f       	cpi	r25, 0xFE	; 254
    63f8:	51 05       	cpc	r21, r1
    63fa:	78 f0       	brcs	.+30     	; 0x641a <__divsf3_pse+0x86>
    63fc:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_inf>
    6400:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_szero>
    6404:	5f 3f       	cpi	r21, 0xFF	; 255
    6406:	e4 f3       	brlt	.-8      	; 0x6400 <__divsf3_pse+0x6c>
    6408:	98 3e       	cpi	r25, 0xE8	; 232
    640a:	d4 f3       	brlt	.-12     	; 0x6400 <__divsf3_pse+0x6c>
    640c:	86 95       	lsr	r24
    640e:	77 95       	ror	r23
    6410:	67 95       	ror	r22
    6412:	b7 95       	ror	r27
    6414:	f7 95       	ror	r31
    6416:	9f 5f       	subi	r25, 0xFF	; 255
    6418:	c9 f7       	brne	.-14     	; 0x640c <__divsf3_pse+0x78>
    641a:	88 0f       	add	r24, r24
    641c:	91 1d       	adc	r25, r1
    641e:	96 95       	lsr	r25
    6420:	87 95       	ror	r24
    6422:	97 f9       	bld	r25, 7
    6424:	08 95       	ret
    6426:	e1 e0       	ldi	r30, 0x01	; 1
    6428:	66 0f       	add	r22, r22
    642a:	77 1f       	adc	r23, r23
    642c:	88 1f       	adc	r24, r24
    642e:	bb 1f       	adc	r27, r27
    6430:	62 17       	cp	r22, r18
    6432:	73 07       	cpc	r23, r19
    6434:	84 07       	cpc	r24, r20
    6436:	ba 07       	cpc	r27, r26
    6438:	20 f0       	brcs	.+8      	; 0x6442 <__divsf3_pse+0xae>
    643a:	62 1b       	sub	r22, r18
    643c:	73 0b       	sbc	r23, r19
    643e:	84 0b       	sbc	r24, r20
    6440:	ba 0b       	sbc	r27, r26
    6442:	ee 1f       	adc	r30, r30
    6444:	88 f7       	brcc	.-30     	; 0x6428 <__divsf3_pse+0x94>
    6446:	e0 95       	com	r30
    6448:	08 95       	ret

0000644a <__fixunssfsi>:
    644a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__fp_splitA>
    644e:	88 f0       	brcs	.+34     	; 0x6472 <__fixunssfsi+0x28>
    6450:	9f 57       	subi	r25, 0x7F	; 127
    6452:	98 f0       	brcs	.+38     	; 0x647a <__fixunssfsi+0x30>
    6454:	b9 2f       	mov	r27, r25
    6456:	99 27       	eor	r25, r25
    6458:	b7 51       	subi	r27, 0x17	; 23
    645a:	b0 f0       	brcs	.+44     	; 0x6488 <__fixunssfsi+0x3e>
    645c:	e1 f0       	breq	.+56     	; 0x6496 <__fixunssfsi+0x4c>
    645e:	66 0f       	add	r22, r22
    6460:	77 1f       	adc	r23, r23
    6462:	88 1f       	adc	r24, r24
    6464:	99 1f       	adc	r25, r25
    6466:	1a f0       	brmi	.+6      	; 0x646e <__fixunssfsi+0x24>
    6468:	ba 95       	dec	r27
    646a:	c9 f7       	brne	.-14     	; 0x645e <__fixunssfsi+0x14>
    646c:	14 c0       	rjmp	.+40     	; 0x6496 <__fixunssfsi+0x4c>
    646e:	b1 30       	cpi	r27, 0x01	; 1
    6470:	91 f0       	breq	.+36     	; 0x6496 <__fixunssfsi+0x4c>
    6472:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_zero>
    6476:	b1 e0       	ldi	r27, 0x01	; 1
    6478:	08 95       	ret
    647a:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_zero>
    647e:	67 2f       	mov	r22, r23
    6480:	78 2f       	mov	r23, r24
    6482:	88 27       	eor	r24, r24
    6484:	b8 5f       	subi	r27, 0xF8	; 248
    6486:	39 f0       	breq	.+14     	; 0x6496 <__fixunssfsi+0x4c>
    6488:	b9 3f       	cpi	r27, 0xF9	; 249
    648a:	cc f3       	brlt	.-14     	; 0x647e <__fixunssfsi+0x34>
    648c:	86 95       	lsr	r24
    648e:	77 95       	ror	r23
    6490:	67 95       	ror	r22
    6492:	b3 95       	inc	r27
    6494:	d9 f7       	brne	.-10     	; 0x648c <__fixunssfsi+0x42>
    6496:	3e f4       	brtc	.+14     	; 0x64a6 <__fixunssfsi+0x5c>
    6498:	90 95       	com	r25
    649a:	80 95       	com	r24
    649c:	70 95       	com	r23
    649e:	61 95       	neg	r22
    64a0:	7f 4f       	sbci	r23, 0xFF	; 255
    64a2:	8f 4f       	sbci	r24, 0xFF	; 255
    64a4:	9f 4f       	sbci	r25, 0xFF	; 255
    64a6:	08 95       	ret

000064a8 <__fp_cmp>:
    64a8:	99 0f       	add	r25, r25
    64aa:	00 08       	sbc	r0, r0
    64ac:	55 0f       	add	r21, r21
    64ae:	aa 0b       	sbc	r26, r26
    64b0:	e0 e8       	ldi	r30, 0x80	; 128
    64b2:	fe ef       	ldi	r31, 0xFE	; 254
    64b4:	16 16       	cp	r1, r22
    64b6:	17 06       	cpc	r1, r23
    64b8:	e8 07       	cpc	r30, r24
    64ba:	f9 07       	cpc	r31, r25
    64bc:	c0 f0       	brcs	.+48     	; 0x64ee <__fp_cmp+0x46>
    64be:	12 16       	cp	r1, r18
    64c0:	13 06       	cpc	r1, r19
    64c2:	e4 07       	cpc	r30, r20
    64c4:	f5 07       	cpc	r31, r21
    64c6:	98 f0       	brcs	.+38     	; 0x64ee <__fp_cmp+0x46>
    64c8:	62 1b       	sub	r22, r18
    64ca:	73 0b       	sbc	r23, r19
    64cc:	84 0b       	sbc	r24, r20
    64ce:	95 0b       	sbc	r25, r21
    64d0:	39 f4       	brne	.+14     	; 0x64e0 <__fp_cmp+0x38>
    64d2:	0a 26       	eor	r0, r26
    64d4:	61 f0       	breq	.+24     	; 0x64ee <__fp_cmp+0x46>
    64d6:	23 2b       	or	r18, r19
    64d8:	24 2b       	or	r18, r20
    64da:	25 2b       	or	r18, r21
    64dc:	21 f4       	brne	.+8      	; 0x64e6 <__fp_cmp+0x3e>
    64de:	08 95       	ret
    64e0:	0a 26       	eor	r0, r26
    64e2:	09 f4       	brne	.+2      	; 0x64e6 <__fp_cmp+0x3e>
    64e4:	a1 40       	sbci	r26, 0x01	; 1
    64e6:	a6 95       	lsr	r26
    64e8:	8f ef       	ldi	r24, 0xFF	; 255
    64ea:	81 1d       	adc	r24, r1
    64ec:	81 1d       	adc	r24, r1
    64ee:	08 95       	ret

000064f0 <__gesf2>:
    64f0:	0e 94 54 32 	call	0x64a8	; 0x64a8 <__fp_cmp>
    64f4:	08 f4       	brcc	.+2      	; 0x64f8 <__gesf2+0x8>
    64f6:	8f ef       	ldi	r24, 0xFF	; 255
    64f8:	08 95       	ret

000064fa <__unordsf2>:
    64fa:	0e 94 54 32 	call	0x64a8	; 0x64a8 <__fp_cmp>
    64fe:	88 0b       	sbc	r24, r24
    6500:	99 0b       	sbc	r25, r25
    6502:	08 95       	ret

00006504 <__mulsi3>:
    6504:	db 01       	movw	r26, r22
    6506:	8f 93       	push	r24
    6508:	9f 93       	push	r25
    650a:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__muluhisi3>
    650e:	bf 91       	pop	r27
    6510:	af 91       	pop	r26
    6512:	a2 9f       	mul	r26, r18
    6514:	80 0d       	add	r24, r0
    6516:	91 1d       	adc	r25, r1
    6518:	a3 9f       	mul	r26, r19
    651a:	90 0d       	add	r25, r0
    651c:	b2 9f       	mul	r27, r18
    651e:	90 0d       	add	r25, r0
    6520:	11 24       	eor	r1, r1
    6522:	08 95       	ret

00006524 <__divmodhi4>:
    6524:	97 fb       	bst	r25, 7
    6526:	07 2e       	mov	r0, r23
    6528:	16 f4       	brtc	.+4      	; 0x652e <__divmodhi4+0xa>
    652a:	00 94       	com	r0
    652c:	07 d0       	rcall	.+14     	; 0x653c <__divmodhi4_neg1>
    652e:	77 fd       	sbrc	r23, 7
    6530:	09 d0       	rcall	.+18     	; 0x6544 <__divmodhi4_neg2>
    6532:	0e 94 38 33 	call	0x6670	; 0x6670 <__udivmodhi4>
    6536:	07 fc       	sbrc	r0, 7
    6538:	05 d0       	rcall	.+10     	; 0x6544 <__divmodhi4_neg2>
    653a:	3e f4       	brtc	.+14     	; 0x654a <__divmodhi4_exit>

0000653c <__divmodhi4_neg1>:
    653c:	90 95       	com	r25
    653e:	81 95       	neg	r24
    6540:	9f 4f       	sbci	r25, 0xFF	; 255
    6542:	08 95       	ret

00006544 <__divmodhi4_neg2>:
    6544:	70 95       	com	r23
    6546:	61 95       	neg	r22
    6548:	7f 4f       	sbci	r23, 0xFF	; 255

0000654a <__divmodhi4_exit>:
    654a:	08 95       	ret

0000654c <__udivmodsi4>:
    654c:	a1 e2       	ldi	r26, 0x21	; 33
    654e:	1a 2e       	mov	r1, r26
    6550:	aa 1b       	sub	r26, r26
    6552:	bb 1b       	sub	r27, r27
    6554:	fd 01       	movw	r30, r26
    6556:	0d c0       	rjmp	.+26     	; 0x6572 <__udivmodsi4_ep>

00006558 <__udivmodsi4_loop>:
    6558:	aa 1f       	adc	r26, r26
    655a:	bb 1f       	adc	r27, r27
    655c:	ee 1f       	adc	r30, r30
    655e:	ff 1f       	adc	r31, r31
    6560:	a2 17       	cp	r26, r18
    6562:	b3 07       	cpc	r27, r19
    6564:	e4 07       	cpc	r30, r20
    6566:	f5 07       	cpc	r31, r21
    6568:	20 f0       	brcs	.+8      	; 0x6572 <__udivmodsi4_ep>
    656a:	a2 1b       	sub	r26, r18
    656c:	b3 0b       	sbc	r27, r19
    656e:	e4 0b       	sbc	r30, r20
    6570:	f5 0b       	sbc	r31, r21

00006572 <__udivmodsi4_ep>:
    6572:	66 1f       	adc	r22, r22
    6574:	77 1f       	adc	r23, r23
    6576:	88 1f       	adc	r24, r24
    6578:	99 1f       	adc	r25, r25
    657a:	1a 94       	dec	r1
    657c:	69 f7       	brne	.-38     	; 0x6558 <__udivmodsi4_loop>
    657e:	60 95       	com	r22
    6580:	70 95       	com	r23
    6582:	80 95       	com	r24
    6584:	90 95       	com	r25
    6586:	9b 01       	movw	r18, r22
    6588:	ac 01       	movw	r20, r24
    658a:	bd 01       	movw	r22, r26
    658c:	cf 01       	movw	r24, r30
    658e:	08 95       	ret

00006590 <__divmodsi4>:
    6590:	05 2e       	mov	r0, r21
    6592:	97 fb       	bst	r25, 7
    6594:	1e f4       	brtc	.+6      	; 0x659c <__divmodsi4+0xc>
    6596:	00 94       	com	r0
    6598:	0e 94 df 32 	call	0x65be	; 0x65be <__negsi2>
    659c:	57 fd       	sbrc	r21, 7
    659e:	07 d0       	rcall	.+14     	; 0x65ae <__divmodsi4_neg2>
    65a0:	0e 94 a6 32 	call	0x654c	; 0x654c <__udivmodsi4>
    65a4:	07 fc       	sbrc	r0, 7
    65a6:	03 d0       	rcall	.+6      	; 0x65ae <__divmodsi4_neg2>
    65a8:	4e f4       	brtc	.+18     	; 0x65bc <__divmodsi4_exit>
    65aa:	0c 94 df 32 	jmp	0x65be	; 0x65be <__negsi2>

000065ae <__divmodsi4_neg2>:
    65ae:	50 95       	com	r21
    65b0:	40 95       	com	r20
    65b2:	30 95       	com	r19
    65b4:	21 95       	neg	r18
    65b6:	3f 4f       	sbci	r19, 0xFF	; 255
    65b8:	4f 4f       	sbci	r20, 0xFF	; 255
    65ba:	5f 4f       	sbci	r21, 0xFF	; 255

000065bc <__divmodsi4_exit>:
    65bc:	08 95       	ret

000065be <__negsi2>:
    65be:	90 95       	com	r25
    65c0:	80 95       	com	r24
    65c2:	70 95       	com	r23
    65c4:	61 95       	neg	r22
    65c6:	7f 4f       	sbci	r23, 0xFF	; 255
    65c8:	8f 4f       	sbci	r24, 0xFF	; 255
    65ca:	9f 4f       	sbci	r25, 0xFF	; 255
    65cc:	08 95       	ret

000065ce <__bswapsi2>:
    65ce:	69 27       	eor	r22, r25
    65d0:	96 27       	eor	r25, r22
    65d2:	69 27       	eor	r22, r25
    65d4:	78 27       	eor	r23, r24
    65d6:	87 27       	eor	r24, r23
    65d8:	78 27       	eor	r23, r24
    65da:	08 95       	ret

000065dc <__muluhisi3>:
    65dc:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__umulhisi3>
    65e0:	a5 9f       	mul	r26, r21
    65e2:	90 0d       	add	r25, r0
    65e4:	b4 9f       	mul	r27, r20
    65e6:	90 0d       	add	r25, r0
    65e8:	a4 9f       	mul	r26, r20
    65ea:	80 0d       	add	r24, r0
    65ec:	91 1d       	adc	r25, r1
    65ee:	11 24       	eor	r1, r1
    65f0:	08 95       	ret

000065f2 <__mulshisi3>:
    65f2:	b7 ff       	sbrs	r27, 7
    65f4:	0c 94 ee 32 	jmp	0x65dc	; 0x65dc <__muluhisi3>

000065f8 <__mulohisi3>:
    65f8:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__muluhisi3>
    65fc:	82 1b       	sub	r24, r18
    65fe:	93 0b       	sbc	r25, r19
    6600:	08 95       	ret

00006602 <__prologue_saves__>:
    6602:	2f 92       	push	r2
    6604:	3f 92       	push	r3
    6606:	4f 92       	push	r4
    6608:	5f 92       	push	r5
    660a:	6f 92       	push	r6
    660c:	7f 92       	push	r7
    660e:	8f 92       	push	r8
    6610:	9f 92       	push	r9
    6612:	af 92       	push	r10
    6614:	bf 92       	push	r11
    6616:	cf 92       	push	r12
    6618:	df 92       	push	r13
    661a:	ef 92       	push	r14
    661c:	ff 92       	push	r15
    661e:	0f 93       	push	r16
    6620:	1f 93       	push	r17
    6622:	cf 93       	push	r28
    6624:	df 93       	push	r29
    6626:	cd b7       	in	r28, 0x3d	; 61
    6628:	de b7       	in	r29, 0x3e	; 62
    662a:	ca 1b       	sub	r28, r26
    662c:	db 0b       	sbc	r29, r27
    662e:	0f b6       	in	r0, 0x3f	; 63
    6630:	f8 94       	cli
    6632:	de bf       	out	0x3e, r29	; 62
    6634:	0f be       	out	0x3f, r0	; 63
    6636:	cd bf       	out	0x3d, r28	; 61
    6638:	09 94       	ijmp

0000663a <__epilogue_restores__>:
    663a:	2a 88       	ldd	r2, Y+18	; 0x12
    663c:	39 88       	ldd	r3, Y+17	; 0x11
    663e:	48 88       	ldd	r4, Y+16	; 0x10
    6640:	5f 84       	ldd	r5, Y+15	; 0x0f
    6642:	6e 84       	ldd	r6, Y+14	; 0x0e
    6644:	7d 84       	ldd	r7, Y+13	; 0x0d
    6646:	8c 84       	ldd	r8, Y+12	; 0x0c
    6648:	9b 84       	ldd	r9, Y+11	; 0x0b
    664a:	aa 84       	ldd	r10, Y+10	; 0x0a
    664c:	b9 84       	ldd	r11, Y+9	; 0x09
    664e:	c8 84       	ldd	r12, Y+8	; 0x08
    6650:	df 80       	ldd	r13, Y+7	; 0x07
    6652:	ee 80       	ldd	r14, Y+6	; 0x06
    6654:	fd 80       	ldd	r15, Y+5	; 0x05
    6656:	0c 81       	ldd	r16, Y+4	; 0x04
    6658:	1b 81       	ldd	r17, Y+3	; 0x03
    665a:	aa 81       	ldd	r26, Y+2	; 0x02
    665c:	b9 81       	ldd	r27, Y+1	; 0x01
    665e:	ce 0f       	add	r28, r30
    6660:	d1 1d       	adc	r29, r1
    6662:	0f b6       	in	r0, 0x3f	; 63
    6664:	f8 94       	cli
    6666:	de bf       	out	0x3e, r29	; 62
    6668:	0f be       	out	0x3f, r0	; 63
    666a:	cd bf       	out	0x3d, r28	; 61
    666c:	ed 01       	movw	r28, r26
    666e:	08 95       	ret

00006670 <__udivmodhi4>:
    6670:	aa 1b       	sub	r26, r26
    6672:	bb 1b       	sub	r27, r27
    6674:	51 e1       	ldi	r21, 0x11	; 17
    6676:	07 c0       	rjmp	.+14     	; 0x6686 <__udivmodhi4_ep>

00006678 <__udivmodhi4_loop>:
    6678:	aa 1f       	adc	r26, r26
    667a:	bb 1f       	adc	r27, r27
    667c:	a6 17       	cp	r26, r22
    667e:	b7 07       	cpc	r27, r23
    6680:	10 f0       	brcs	.+4      	; 0x6686 <__udivmodhi4_ep>
    6682:	a6 1b       	sub	r26, r22
    6684:	b7 0b       	sbc	r27, r23

00006686 <__udivmodhi4_ep>:
    6686:	88 1f       	adc	r24, r24
    6688:	99 1f       	adc	r25, r25
    668a:	5a 95       	dec	r21
    668c:	a9 f7       	brne	.-22     	; 0x6678 <__udivmodhi4_loop>
    668e:	80 95       	com	r24
    6690:	90 95       	com	r25
    6692:	bc 01       	movw	r22, r24
    6694:	cd 01       	movw	r24, r26
    6696:	08 95       	ret

00006698 <__tablejump2__>:
    6698:	ee 0f       	add	r30, r30
    669a:	ff 1f       	adc	r31, r31
    669c:	05 90       	lpm	r0, Z+
    669e:	f4 91       	lpm	r31, Z
    66a0:	e0 2d       	mov	r30, r0
    66a2:	09 94       	ijmp

000066a4 <__umulhisi3>:
    66a4:	a2 9f       	mul	r26, r18
    66a6:	b0 01       	movw	r22, r0
    66a8:	b3 9f       	mul	r27, r19
    66aa:	c0 01       	movw	r24, r0
    66ac:	a3 9f       	mul	r26, r19
    66ae:	70 0d       	add	r23, r0
    66b0:	81 1d       	adc	r24, r1
    66b2:	11 24       	eor	r1, r1
    66b4:	91 1d       	adc	r25, r1
    66b6:	b2 9f       	mul	r27, r18
    66b8:	70 0d       	add	r23, r0
    66ba:	81 1d       	adc	r24, r1
    66bc:	11 24       	eor	r1, r1
    66be:	91 1d       	adc	r25, r1
    66c0:	08 95       	ret

000066c2 <dtostrf>:
    66c2:	ef 92       	push	r14
    66c4:	0f 93       	push	r16
    66c6:	1f 93       	push	r17
    66c8:	cf 93       	push	r28
    66ca:	df 93       	push	r29
    66cc:	e8 01       	movw	r28, r16
    66ce:	47 fd       	sbrc	r20, 7
    66d0:	02 c0       	rjmp	.+4      	; 0x66d6 <dtostrf+0x14>
    66d2:	34 e0       	ldi	r19, 0x04	; 4
    66d4:	01 c0       	rjmp	.+2      	; 0x66d8 <dtostrf+0x16>
    66d6:	34 e1       	ldi	r19, 0x14	; 20
    66d8:	04 2e       	mov	r0, r20
    66da:	00 0c       	add	r0, r0
    66dc:	55 0b       	sbc	r21, r21
    66de:	57 ff       	sbrs	r21, 7
    66e0:	03 c0       	rjmp	.+6      	; 0x66e8 <dtostrf+0x26>
    66e2:	51 95       	neg	r21
    66e4:	41 95       	neg	r20
    66e6:	51 09       	sbc	r21, r1
    66e8:	e3 2e       	mov	r14, r19
    66ea:	02 2f       	mov	r16, r18
    66ec:	24 2f       	mov	r18, r20
    66ee:	ae 01       	movw	r20, r28
    66f0:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <dtoa_prf>
    66f4:	ce 01       	movw	r24, r28
    66f6:	df 91       	pop	r29
    66f8:	cf 91       	pop	r28
    66fa:	1f 91       	pop	r17
    66fc:	0f 91       	pop	r16
    66fe:	ef 90       	pop	r14
    6700:	08 95       	ret

00006702 <malloc>:
    6702:	0f 93       	push	r16
    6704:	1f 93       	push	r17
    6706:	cf 93       	push	r28
    6708:	df 93       	push	r29
    670a:	82 30       	cpi	r24, 0x02	; 2
    670c:	91 05       	cpc	r25, r1
    670e:	10 f4       	brcc	.+4      	; 0x6714 <malloc+0x12>
    6710:	82 e0       	ldi	r24, 0x02	; 2
    6712:	90 e0       	ldi	r25, 0x00	; 0
    6714:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <__flp>
    6718:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <__flp+0x1>
    671c:	20 e0       	ldi	r18, 0x00	; 0
    671e:	30 e0       	ldi	r19, 0x00	; 0
    6720:	a0 e0       	ldi	r26, 0x00	; 0
    6722:	b0 e0       	ldi	r27, 0x00	; 0
    6724:	30 97       	sbiw	r30, 0x00	; 0
    6726:	19 f1       	breq	.+70     	; 0x676e <malloc+0x6c>
    6728:	40 81       	ld	r20, Z
    672a:	51 81       	ldd	r21, Z+1	; 0x01
    672c:	02 81       	ldd	r16, Z+2	; 0x02
    672e:	13 81       	ldd	r17, Z+3	; 0x03
    6730:	48 17       	cp	r20, r24
    6732:	59 07       	cpc	r21, r25
    6734:	c8 f0       	brcs	.+50     	; 0x6768 <malloc+0x66>
    6736:	84 17       	cp	r24, r20
    6738:	95 07       	cpc	r25, r21
    673a:	69 f4       	brne	.+26     	; 0x6756 <malloc+0x54>
    673c:	10 97       	sbiw	r26, 0x00	; 0
    673e:	31 f0       	breq	.+12     	; 0x674c <malloc+0x4a>
    6740:	12 96       	adiw	r26, 0x02	; 2
    6742:	0c 93       	st	X, r16
    6744:	12 97       	sbiw	r26, 0x02	; 2
    6746:	13 96       	adiw	r26, 0x03	; 3
    6748:	1c 93       	st	X, r17
    674a:	27 c0       	rjmp	.+78     	; 0x679a <malloc+0x98>
    674c:	00 93 f0 06 	sts	0x06F0, r16	; 0x8006f0 <__flp>
    6750:	10 93 f1 06 	sts	0x06F1, r17	; 0x8006f1 <__flp+0x1>
    6754:	22 c0       	rjmp	.+68     	; 0x679a <malloc+0x98>
    6756:	21 15       	cp	r18, r1
    6758:	31 05       	cpc	r19, r1
    675a:	19 f0       	breq	.+6      	; 0x6762 <malloc+0x60>
    675c:	42 17       	cp	r20, r18
    675e:	53 07       	cpc	r21, r19
    6760:	18 f4       	brcc	.+6      	; 0x6768 <malloc+0x66>
    6762:	9a 01       	movw	r18, r20
    6764:	bd 01       	movw	r22, r26
    6766:	ef 01       	movw	r28, r30
    6768:	df 01       	movw	r26, r30
    676a:	f8 01       	movw	r30, r16
    676c:	db cf       	rjmp	.-74     	; 0x6724 <malloc+0x22>
    676e:	21 15       	cp	r18, r1
    6770:	31 05       	cpc	r19, r1
    6772:	f9 f0       	breq	.+62     	; 0x67b2 <malloc+0xb0>
    6774:	28 1b       	sub	r18, r24
    6776:	39 0b       	sbc	r19, r25
    6778:	24 30       	cpi	r18, 0x04	; 4
    677a:	31 05       	cpc	r19, r1
    677c:	80 f4       	brcc	.+32     	; 0x679e <malloc+0x9c>
    677e:	8a 81       	ldd	r24, Y+2	; 0x02
    6780:	9b 81       	ldd	r25, Y+3	; 0x03
    6782:	61 15       	cp	r22, r1
    6784:	71 05       	cpc	r23, r1
    6786:	21 f0       	breq	.+8      	; 0x6790 <malloc+0x8e>
    6788:	fb 01       	movw	r30, r22
    678a:	93 83       	std	Z+3, r25	; 0x03
    678c:	82 83       	std	Z+2, r24	; 0x02
    678e:	04 c0       	rjmp	.+8      	; 0x6798 <malloc+0x96>
    6790:	90 93 f1 06 	sts	0x06F1, r25	; 0x8006f1 <__flp+0x1>
    6794:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <__flp>
    6798:	fe 01       	movw	r30, r28
    679a:	32 96       	adiw	r30, 0x02	; 2
    679c:	44 c0       	rjmp	.+136    	; 0x6826 <malloc+0x124>
    679e:	fe 01       	movw	r30, r28
    67a0:	e2 0f       	add	r30, r18
    67a2:	f3 1f       	adc	r31, r19
    67a4:	81 93       	st	Z+, r24
    67a6:	91 93       	st	Z+, r25
    67a8:	22 50       	subi	r18, 0x02	; 2
    67aa:	31 09       	sbc	r19, r1
    67ac:	39 83       	std	Y+1, r19	; 0x01
    67ae:	28 83       	st	Y, r18
    67b0:	3a c0       	rjmp	.+116    	; 0x6826 <malloc+0x124>
    67b2:	20 91 ee 06 	lds	r18, 0x06EE	; 0x8006ee <__brkval>
    67b6:	30 91 ef 06 	lds	r19, 0x06EF	; 0x8006ef <__brkval+0x1>
    67ba:	23 2b       	or	r18, r19
    67bc:	41 f4       	brne	.+16     	; 0x67ce <malloc+0xcc>
    67be:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    67c2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    67c6:	30 93 ef 06 	sts	0x06EF, r19	; 0x8006ef <__brkval+0x1>
    67ca:	20 93 ee 06 	sts	0x06EE, r18	; 0x8006ee <__brkval>
    67ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    67d2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    67d6:	21 15       	cp	r18, r1
    67d8:	31 05       	cpc	r19, r1
    67da:	41 f4       	brne	.+16     	; 0x67ec <malloc+0xea>
    67dc:	2d b7       	in	r18, 0x3d	; 61
    67de:	3e b7       	in	r19, 0x3e	; 62
    67e0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    67e4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    67e8:	24 1b       	sub	r18, r20
    67ea:	35 0b       	sbc	r19, r21
    67ec:	e0 91 ee 06 	lds	r30, 0x06EE	; 0x8006ee <__brkval>
    67f0:	f0 91 ef 06 	lds	r31, 0x06EF	; 0x8006ef <__brkval+0x1>
    67f4:	e2 17       	cp	r30, r18
    67f6:	f3 07       	cpc	r31, r19
    67f8:	a0 f4       	brcc	.+40     	; 0x6822 <malloc+0x120>
    67fa:	2e 1b       	sub	r18, r30
    67fc:	3f 0b       	sbc	r19, r31
    67fe:	28 17       	cp	r18, r24
    6800:	39 07       	cpc	r19, r25
    6802:	78 f0       	brcs	.+30     	; 0x6822 <malloc+0x120>
    6804:	ac 01       	movw	r20, r24
    6806:	4e 5f       	subi	r20, 0xFE	; 254
    6808:	5f 4f       	sbci	r21, 0xFF	; 255
    680a:	24 17       	cp	r18, r20
    680c:	35 07       	cpc	r19, r21
    680e:	48 f0       	brcs	.+18     	; 0x6822 <malloc+0x120>
    6810:	4e 0f       	add	r20, r30
    6812:	5f 1f       	adc	r21, r31
    6814:	50 93 ef 06 	sts	0x06EF, r21	; 0x8006ef <__brkval+0x1>
    6818:	40 93 ee 06 	sts	0x06EE, r20	; 0x8006ee <__brkval>
    681c:	81 93       	st	Z+, r24
    681e:	91 93       	st	Z+, r25
    6820:	02 c0       	rjmp	.+4      	; 0x6826 <malloc+0x124>
    6822:	e0 e0       	ldi	r30, 0x00	; 0
    6824:	f0 e0       	ldi	r31, 0x00	; 0
    6826:	cf 01       	movw	r24, r30
    6828:	df 91       	pop	r29
    682a:	cf 91       	pop	r28
    682c:	1f 91       	pop	r17
    682e:	0f 91       	pop	r16
    6830:	08 95       	ret

00006832 <free>:
    6832:	cf 93       	push	r28
    6834:	df 93       	push	r29
    6836:	00 97       	sbiw	r24, 0x00	; 0
    6838:	09 f4       	brne	.+2      	; 0x683c <free+0xa>
    683a:	81 c0       	rjmp	.+258    	; 0x693e <free+0x10c>
    683c:	fc 01       	movw	r30, r24
    683e:	32 97       	sbiw	r30, 0x02	; 2
    6840:	13 82       	std	Z+3, r1	; 0x03
    6842:	12 82       	std	Z+2, r1	; 0x02
    6844:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <__flp>
    6848:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <__flp+0x1>
    684c:	10 97       	sbiw	r26, 0x00	; 0
    684e:	81 f4       	brne	.+32     	; 0x6870 <free+0x3e>
    6850:	20 81       	ld	r18, Z
    6852:	31 81       	ldd	r19, Z+1	; 0x01
    6854:	82 0f       	add	r24, r18
    6856:	93 1f       	adc	r25, r19
    6858:	20 91 ee 06 	lds	r18, 0x06EE	; 0x8006ee <__brkval>
    685c:	30 91 ef 06 	lds	r19, 0x06EF	; 0x8006ef <__brkval+0x1>
    6860:	28 17       	cp	r18, r24
    6862:	39 07       	cpc	r19, r25
    6864:	51 f5       	brne	.+84     	; 0x68ba <free+0x88>
    6866:	f0 93 ef 06 	sts	0x06EF, r31	; 0x8006ef <__brkval+0x1>
    686a:	e0 93 ee 06 	sts	0x06EE, r30	; 0x8006ee <__brkval>
    686e:	67 c0       	rjmp	.+206    	; 0x693e <free+0x10c>
    6870:	ed 01       	movw	r28, r26
    6872:	20 e0       	ldi	r18, 0x00	; 0
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	ce 17       	cp	r28, r30
    6878:	df 07       	cpc	r29, r31
    687a:	40 f4       	brcc	.+16     	; 0x688c <free+0x5a>
    687c:	4a 81       	ldd	r20, Y+2	; 0x02
    687e:	5b 81       	ldd	r21, Y+3	; 0x03
    6880:	9e 01       	movw	r18, r28
    6882:	41 15       	cp	r20, r1
    6884:	51 05       	cpc	r21, r1
    6886:	f1 f0       	breq	.+60     	; 0x68c4 <free+0x92>
    6888:	ea 01       	movw	r28, r20
    688a:	f5 cf       	rjmp	.-22     	; 0x6876 <free+0x44>
    688c:	d3 83       	std	Z+3, r29	; 0x03
    688e:	c2 83       	std	Z+2, r28	; 0x02
    6890:	40 81       	ld	r20, Z
    6892:	51 81       	ldd	r21, Z+1	; 0x01
    6894:	84 0f       	add	r24, r20
    6896:	95 1f       	adc	r25, r21
    6898:	c8 17       	cp	r28, r24
    689a:	d9 07       	cpc	r29, r25
    689c:	59 f4       	brne	.+22     	; 0x68b4 <free+0x82>
    689e:	88 81       	ld	r24, Y
    68a0:	99 81       	ldd	r25, Y+1	; 0x01
    68a2:	84 0f       	add	r24, r20
    68a4:	95 1f       	adc	r25, r21
    68a6:	02 96       	adiw	r24, 0x02	; 2
    68a8:	91 83       	std	Z+1, r25	; 0x01
    68aa:	80 83       	st	Z, r24
    68ac:	8a 81       	ldd	r24, Y+2	; 0x02
    68ae:	9b 81       	ldd	r25, Y+3	; 0x03
    68b0:	93 83       	std	Z+3, r25	; 0x03
    68b2:	82 83       	std	Z+2, r24	; 0x02
    68b4:	21 15       	cp	r18, r1
    68b6:	31 05       	cpc	r19, r1
    68b8:	29 f4       	brne	.+10     	; 0x68c4 <free+0x92>
    68ba:	f0 93 f1 06 	sts	0x06F1, r31	; 0x8006f1 <__flp+0x1>
    68be:	e0 93 f0 06 	sts	0x06F0, r30	; 0x8006f0 <__flp>
    68c2:	3d c0       	rjmp	.+122    	; 0x693e <free+0x10c>
    68c4:	e9 01       	movw	r28, r18
    68c6:	fb 83       	std	Y+3, r31	; 0x03
    68c8:	ea 83       	std	Y+2, r30	; 0x02
    68ca:	49 91       	ld	r20, Y+
    68cc:	59 91       	ld	r21, Y+
    68ce:	c4 0f       	add	r28, r20
    68d0:	d5 1f       	adc	r29, r21
    68d2:	ec 17       	cp	r30, r28
    68d4:	fd 07       	cpc	r31, r29
    68d6:	61 f4       	brne	.+24     	; 0x68f0 <free+0xbe>
    68d8:	80 81       	ld	r24, Z
    68da:	91 81       	ldd	r25, Z+1	; 0x01
    68dc:	84 0f       	add	r24, r20
    68de:	95 1f       	adc	r25, r21
    68e0:	02 96       	adiw	r24, 0x02	; 2
    68e2:	e9 01       	movw	r28, r18
    68e4:	99 83       	std	Y+1, r25	; 0x01
    68e6:	88 83       	st	Y, r24
    68e8:	82 81       	ldd	r24, Z+2	; 0x02
    68ea:	93 81       	ldd	r25, Z+3	; 0x03
    68ec:	9b 83       	std	Y+3, r25	; 0x03
    68ee:	8a 83       	std	Y+2, r24	; 0x02
    68f0:	e0 e0       	ldi	r30, 0x00	; 0
    68f2:	f0 e0       	ldi	r31, 0x00	; 0
    68f4:	12 96       	adiw	r26, 0x02	; 2
    68f6:	8d 91       	ld	r24, X+
    68f8:	9c 91       	ld	r25, X
    68fa:	13 97       	sbiw	r26, 0x03	; 3
    68fc:	00 97       	sbiw	r24, 0x00	; 0
    68fe:	19 f0       	breq	.+6      	; 0x6906 <free+0xd4>
    6900:	fd 01       	movw	r30, r26
    6902:	dc 01       	movw	r26, r24
    6904:	f7 cf       	rjmp	.-18     	; 0x68f4 <free+0xc2>
    6906:	8d 91       	ld	r24, X+
    6908:	9c 91       	ld	r25, X
    690a:	11 97       	sbiw	r26, 0x01	; 1
    690c:	9d 01       	movw	r18, r26
    690e:	2e 5f       	subi	r18, 0xFE	; 254
    6910:	3f 4f       	sbci	r19, 0xFF	; 255
    6912:	82 0f       	add	r24, r18
    6914:	93 1f       	adc	r25, r19
    6916:	20 91 ee 06 	lds	r18, 0x06EE	; 0x8006ee <__brkval>
    691a:	30 91 ef 06 	lds	r19, 0x06EF	; 0x8006ef <__brkval+0x1>
    691e:	28 17       	cp	r18, r24
    6920:	39 07       	cpc	r19, r25
    6922:	69 f4       	brne	.+26     	; 0x693e <free+0x10c>
    6924:	30 97       	sbiw	r30, 0x00	; 0
    6926:	29 f4       	brne	.+10     	; 0x6932 <free+0x100>
    6928:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <__flp+0x1>
    692c:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <__flp>
    6930:	02 c0       	rjmp	.+4      	; 0x6936 <free+0x104>
    6932:	13 82       	std	Z+3, r1	; 0x03
    6934:	12 82       	std	Z+2, r1	; 0x02
    6936:	b0 93 ef 06 	sts	0x06EF, r27	; 0x8006ef <__brkval+0x1>
    693a:	a0 93 ee 06 	sts	0x06EE, r26	; 0x8006ee <__brkval>
    693e:	df 91       	pop	r29
    6940:	cf 91       	pop	r28
    6942:	08 95       	ret

00006944 <realloc>:
    6944:	a0 e0       	ldi	r26, 0x00	; 0
    6946:	b0 e0       	ldi	r27, 0x00	; 0
    6948:	e8 ea       	ldi	r30, 0xA8	; 168
    694a:	f4 e3       	ldi	r31, 0x34	; 52
    694c:	0c 94 05 33 	jmp	0x660a	; 0x660a <__prologue_saves__+0x8>
    6950:	ec 01       	movw	r28, r24
    6952:	00 97       	sbiw	r24, 0x00	; 0
    6954:	21 f4       	brne	.+8      	; 0x695e <realloc+0x1a>
    6956:	cb 01       	movw	r24, r22
    6958:	0e 94 81 33 	call	0x6702	; 0x6702 <malloc>
    695c:	b4 c0       	rjmp	.+360    	; 0x6ac6 <realloc+0x182>
    695e:	fc 01       	movw	r30, r24
    6960:	e6 0f       	add	r30, r22
    6962:	f7 1f       	adc	r31, r23
    6964:	9c 01       	movw	r18, r24
    6966:	22 50       	subi	r18, 0x02	; 2
    6968:	31 09       	sbc	r19, r1
    696a:	e2 17       	cp	r30, r18
    696c:	f3 07       	cpc	r31, r19
    696e:	08 f4       	brcc	.+2      	; 0x6972 <realloc+0x2e>
    6970:	a8 c0       	rjmp	.+336    	; 0x6ac2 <realloc+0x17e>
    6972:	d9 01       	movw	r26, r18
    6974:	0d 91       	ld	r16, X+
    6976:	1c 91       	ld	r17, X
    6978:	11 97       	sbiw	r26, 0x01	; 1
    697a:	06 17       	cp	r16, r22
    697c:	17 07       	cpc	r17, r23
    697e:	b0 f0       	brcs	.+44     	; 0x69ac <realloc+0x68>
    6980:	05 30       	cpi	r16, 0x05	; 5
    6982:	11 05       	cpc	r17, r1
    6984:	08 f4       	brcc	.+2      	; 0x6988 <realloc+0x44>
    6986:	9b c0       	rjmp	.+310    	; 0x6abe <realloc+0x17a>
    6988:	c8 01       	movw	r24, r16
    698a:	04 97       	sbiw	r24, 0x04	; 4
    698c:	86 17       	cp	r24, r22
    698e:	97 07       	cpc	r25, r23
    6990:	08 f4       	brcc	.+2      	; 0x6994 <realloc+0x50>
    6992:	95 c0       	rjmp	.+298    	; 0x6abe <realloc+0x17a>
    6994:	02 50       	subi	r16, 0x02	; 2
    6996:	11 09       	sbc	r17, r1
    6998:	06 1b       	sub	r16, r22
    699a:	17 0b       	sbc	r17, r23
    699c:	01 93       	st	Z+, r16
    699e:	11 93       	st	Z+, r17
    69a0:	6d 93       	st	X+, r22
    69a2:	7c 93       	st	X, r23
    69a4:	cf 01       	movw	r24, r30
    69a6:	0e 94 19 34 	call	0x6832	; 0x6832 <free>
    69aa:	89 c0       	rjmp	.+274    	; 0x6abe <realloc+0x17a>
    69ac:	5b 01       	movw	r10, r22
    69ae:	a0 1a       	sub	r10, r16
    69b0:	b1 0a       	sbc	r11, r17
    69b2:	4c 01       	movw	r8, r24
    69b4:	80 0e       	add	r8, r16
    69b6:	91 1e       	adc	r9, r17
    69b8:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <__flp>
    69bc:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <__flp+0x1>
    69c0:	61 2c       	mov	r6, r1
    69c2:	71 2c       	mov	r7, r1
    69c4:	e1 2c       	mov	r14, r1
    69c6:	f1 2c       	mov	r15, r1
    69c8:	10 97       	sbiw	r26, 0x00	; 0
    69ca:	09 f4       	brne	.+2      	; 0x69ce <realloc+0x8a>
    69cc:	46 c0       	rjmp	.+140    	; 0x6a5a <realloc+0x116>
    69ce:	8d 91       	ld	r24, X+
    69d0:	9c 91       	ld	r25, X
    69d2:	11 97       	sbiw	r26, 0x01	; 1
    69d4:	a8 15       	cp	r26, r8
    69d6:	b9 05       	cpc	r27, r9
    69d8:	b1 f5       	brne	.+108    	; 0x6a46 <realloc+0x102>
    69da:	6c 01       	movw	r12, r24
    69dc:	42 e0       	ldi	r20, 0x02	; 2
    69de:	c4 0e       	add	r12, r20
    69e0:	d1 1c       	adc	r13, r1
    69e2:	ca 14       	cp	r12, r10
    69e4:	db 04       	cpc	r13, r11
    69e6:	78 f1       	brcs	.+94     	; 0x6a46 <realloc+0x102>
    69e8:	4c 01       	movw	r8, r24
    69ea:	8a 18       	sub	r8, r10
    69ec:	9b 08       	sbc	r9, r11
    69ee:	64 01       	movw	r12, r8
    69f0:	42 e0       	ldi	r20, 0x02	; 2
    69f2:	c4 0e       	add	r12, r20
    69f4:	d1 1c       	adc	r13, r1
    69f6:	12 96       	adiw	r26, 0x02	; 2
    69f8:	bc 90       	ld	r11, X
    69fa:	12 97       	sbiw	r26, 0x02	; 2
    69fc:	13 96       	adiw	r26, 0x03	; 3
    69fe:	ac 91       	ld	r26, X
    6a00:	b5 e0       	ldi	r27, 0x05	; 5
    6a02:	cb 16       	cp	r12, r27
    6a04:	d1 04       	cpc	r13, r1
    6a06:	40 f0       	brcs	.+16     	; 0x6a18 <realloc+0xd4>
    6a08:	b2 82       	std	Z+2, r11	; 0x02
    6a0a:	a3 83       	std	Z+3, r26	; 0x03
    6a0c:	91 82       	std	Z+1, r9	; 0x01
    6a0e:	80 82       	st	Z, r8
    6a10:	d9 01       	movw	r26, r18
    6a12:	6d 93       	st	X+, r22
    6a14:	7c 93       	st	X, r23
    6a16:	09 c0       	rjmp	.+18     	; 0x6a2a <realloc+0xe6>
    6a18:	0e 5f       	subi	r16, 0xFE	; 254
    6a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    6a1c:	80 0f       	add	r24, r16
    6a1e:	91 1f       	adc	r25, r17
    6a20:	f9 01       	movw	r30, r18
    6a22:	91 83       	std	Z+1, r25	; 0x01
    6a24:	80 83       	st	Z, r24
    6a26:	eb 2d       	mov	r30, r11
    6a28:	fa 2f       	mov	r31, r26
    6a2a:	e1 14       	cp	r14, r1
    6a2c:	f1 04       	cpc	r15, r1
    6a2e:	31 f0       	breq	.+12     	; 0x6a3c <realloc+0xf8>
    6a30:	d7 01       	movw	r26, r14
    6a32:	13 96       	adiw	r26, 0x03	; 3
    6a34:	fc 93       	st	X, r31
    6a36:	ee 93       	st	-X, r30
    6a38:	12 97       	sbiw	r26, 0x02	; 2
    6a3a:	41 c0       	rjmp	.+130    	; 0x6abe <realloc+0x17a>
    6a3c:	f0 93 f1 06 	sts	0x06F1, r31	; 0x8006f1 <__flp+0x1>
    6a40:	e0 93 f0 06 	sts	0x06F0, r30	; 0x8006f0 <__flp>
    6a44:	3c c0       	rjmp	.+120    	; 0x6abe <realloc+0x17a>
    6a46:	68 16       	cp	r6, r24
    6a48:	79 06       	cpc	r7, r25
    6a4a:	08 f4       	brcc	.+2      	; 0x6a4e <realloc+0x10a>
    6a4c:	3c 01       	movw	r6, r24
    6a4e:	7d 01       	movw	r14, r26
    6a50:	12 96       	adiw	r26, 0x02	; 2
    6a52:	0d 90       	ld	r0, X+
    6a54:	bc 91       	ld	r27, X
    6a56:	a0 2d       	mov	r26, r0
    6a58:	b7 cf       	rjmp	.-146    	; 0x69c8 <realloc+0x84>
    6a5a:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <__brkval>
    6a5e:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <__brkval+0x1>
    6a62:	88 16       	cp	r8, r24
    6a64:	99 06       	cpc	r9, r25
    6a66:	e1 f4       	brne	.+56     	; 0x6aa0 <realloc+0x15c>
    6a68:	66 16       	cp	r6, r22
    6a6a:	77 06       	cpc	r7, r23
    6a6c:	c8 f4       	brcc	.+50     	; 0x6aa0 <realloc+0x15c>
    6a6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    6a72:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    6a76:	00 97       	sbiw	r24, 0x00	; 0
    6a78:	41 f4       	brne	.+16     	; 0x6a8a <realloc+0x146>
    6a7a:	8d b7       	in	r24, 0x3d	; 61
    6a7c:	9e b7       	in	r25, 0x3e	; 62
    6a7e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6a82:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6a86:	84 1b       	sub	r24, r20
    6a88:	95 0b       	sbc	r25, r21
    6a8a:	e8 17       	cp	r30, r24
    6a8c:	f9 07       	cpc	r31, r25
    6a8e:	c8 f4       	brcc	.+50     	; 0x6ac2 <realloc+0x17e>
    6a90:	f0 93 ef 06 	sts	0x06EF, r31	; 0x8006ef <__brkval+0x1>
    6a94:	e0 93 ee 06 	sts	0x06EE, r30	; 0x8006ee <__brkval>
    6a98:	f9 01       	movw	r30, r18
    6a9a:	71 83       	std	Z+1, r23	; 0x01
    6a9c:	60 83       	st	Z, r22
    6a9e:	0f c0       	rjmp	.+30     	; 0x6abe <realloc+0x17a>
    6aa0:	cb 01       	movw	r24, r22
    6aa2:	0e 94 81 33 	call	0x6702	; 0x6702 <malloc>
    6aa6:	7c 01       	movw	r14, r24
    6aa8:	00 97       	sbiw	r24, 0x00	; 0
    6aaa:	59 f0       	breq	.+22     	; 0x6ac2 <realloc+0x17e>
    6aac:	a8 01       	movw	r20, r16
    6aae:	be 01       	movw	r22, r28
    6ab0:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <memcpy>
    6ab4:	ce 01       	movw	r24, r28
    6ab6:	0e 94 19 34 	call	0x6832	; 0x6832 <free>
    6aba:	c7 01       	movw	r24, r14
    6abc:	04 c0       	rjmp	.+8      	; 0x6ac6 <realloc+0x182>
    6abe:	ce 01       	movw	r24, r28
    6ac0:	02 c0       	rjmp	.+4      	; 0x6ac6 <realloc+0x182>
    6ac2:	80 e0       	ldi	r24, 0x00	; 0
    6ac4:	90 e0       	ldi	r25, 0x00	; 0
    6ac6:	cd b7       	in	r28, 0x3d	; 61
    6ac8:	de b7       	in	r29, 0x3e	; 62
    6aca:	ee e0       	ldi	r30, 0x0E	; 14
    6acc:	0c 94 21 33 	jmp	0x6642	; 0x6642 <__epilogue_restores__+0x8>

00006ad0 <abort>:
    6ad0:	81 e0       	ldi	r24, 0x01	; 1
    6ad2:	90 e0       	ldi	r25, 0x00	; 0
    6ad4:	f8 94       	cli
    6ad6:	0c 94 4e 3b 	jmp	0x769c	; 0x769c <__do_global_dtors>

00006ada <atoi>:
    6ada:	fc 01       	movw	r30, r24
    6adc:	88 27       	eor	r24, r24
    6ade:	99 27       	eor	r25, r25
    6ae0:	e8 94       	clt
    6ae2:	21 91       	ld	r18, Z+
    6ae4:	20 32       	cpi	r18, 0x20	; 32
    6ae6:	e9 f3       	breq	.-6      	; 0x6ae2 <atoi+0x8>
    6ae8:	29 30       	cpi	r18, 0x09	; 9
    6aea:	10 f0       	brcs	.+4      	; 0x6af0 <atoi+0x16>
    6aec:	2e 30       	cpi	r18, 0x0E	; 14
    6aee:	c8 f3       	brcs	.-14     	; 0x6ae2 <atoi+0x8>
    6af0:	2b 32       	cpi	r18, 0x2B	; 43
    6af2:	41 f0       	breq	.+16     	; 0x6b04 <atoi+0x2a>
    6af4:	2d 32       	cpi	r18, 0x2D	; 45
    6af6:	39 f4       	brne	.+14     	; 0x6b06 <atoi+0x2c>
    6af8:	68 94       	set
    6afa:	04 c0       	rjmp	.+8      	; 0x6b04 <atoi+0x2a>
    6afc:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <__mulhi_const_10>
    6b00:	82 0f       	add	r24, r18
    6b02:	91 1d       	adc	r25, r1
    6b04:	21 91       	ld	r18, Z+
    6b06:	20 53       	subi	r18, 0x30	; 48
    6b08:	2a 30       	cpi	r18, 0x0A	; 10
    6b0a:	c0 f3       	brcs	.-16     	; 0x6afc <atoi+0x22>
    6b0c:	1e f4       	brtc	.+6      	; 0x6b14 <atoi+0x3a>
    6b0e:	90 95       	com	r25
    6b10:	81 95       	neg	r24
    6b12:	9f 4f       	sbci	r25, 0xFF	; 255
    6b14:	08 95       	ret

00006b16 <strcpy_P>:
    6b16:	fb 01       	movw	r30, r22
    6b18:	dc 01       	movw	r26, r24
    6b1a:	05 90       	lpm	r0, Z+
    6b1c:	0d 92       	st	X+, r0
    6b1e:	00 20       	and	r0, r0
    6b20:	e1 f7       	brne	.-8      	; 0x6b1a <strcpy_P+0x4>
    6b22:	08 95       	ret

00006b24 <__strlen_P>:
    6b24:	fc 01       	movw	r30, r24
    6b26:	05 90       	lpm	r0, Z+
    6b28:	00 20       	and	r0, r0
    6b2a:	e9 f7       	brne	.-6      	; 0x6b26 <__strlen_P+0x2>
    6b2c:	80 95       	com	r24
    6b2e:	90 95       	com	r25
    6b30:	8e 0f       	add	r24, r30
    6b32:	9f 1f       	adc	r25, r31
    6b34:	08 95       	ret

00006b36 <memcpy>:
    6b36:	fb 01       	movw	r30, r22
    6b38:	dc 01       	movw	r26, r24
    6b3a:	02 c0       	rjmp	.+4      	; 0x6b40 <memcpy+0xa>
    6b3c:	01 90       	ld	r0, Z+
    6b3e:	0d 92       	st	X+, r0
    6b40:	41 50       	subi	r20, 0x01	; 1
    6b42:	50 40       	sbci	r21, 0x00	; 0
    6b44:	d8 f7       	brcc	.-10     	; 0x6b3c <memcpy+0x6>
    6b46:	08 95       	ret

00006b48 <memmove>:
    6b48:	68 17       	cp	r22, r24
    6b4a:	79 07       	cpc	r23, r25
    6b4c:	68 f4       	brcc	.+26     	; 0x6b68 <memmove+0x20>
    6b4e:	fb 01       	movw	r30, r22
    6b50:	dc 01       	movw	r26, r24
    6b52:	e4 0f       	add	r30, r20
    6b54:	f5 1f       	adc	r31, r21
    6b56:	a4 0f       	add	r26, r20
    6b58:	b5 1f       	adc	r27, r21
    6b5a:	02 c0       	rjmp	.+4      	; 0x6b60 <memmove+0x18>
    6b5c:	02 90       	ld	r0, -Z
    6b5e:	0e 92       	st	-X, r0
    6b60:	41 50       	subi	r20, 0x01	; 1
    6b62:	50 40       	sbci	r21, 0x00	; 0
    6b64:	d8 f7       	brcc	.-10     	; 0x6b5c <memmove+0x14>
    6b66:	08 95       	ret
    6b68:	0c 94 9b 35 	jmp	0x6b36	; 0x6b36 <memcpy>

00006b6c <memset>:
    6b6c:	dc 01       	movw	r26, r24
    6b6e:	01 c0       	rjmp	.+2      	; 0x6b72 <memset+0x6>
    6b70:	6d 93       	st	X+, r22
    6b72:	41 50       	subi	r20, 0x01	; 1
    6b74:	50 40       	sbci	r21, 0x00	; 0
    6b76:	e0 f7       	brcc	.-8      	; 0x6b70 <memset+0x4>
    6b78:	08 95       	ret

00006b7a <strcpy>:
    6b7a:	fb 01       	movw	r30, r22
    6b7c:	dc 01       	movw	r26, r24
    6b7e:	01 90       	ld	r0, Z+
    6b80:	0d 92       	st	X+, r0
    6b82:	00 20       	and	r0, r0
    6b84:	e1 f7       	brne	.-8      	; 0x6b7e <strcpy+0x4>
    6b86:	08 95       	ret

00006b88 <strncpy>:
    6b88:	fb 01       	movw	r30, r22
    6b8a:	dc 01       	movw	r26, r24
    6b8c:	41 50       	subi	r20, 0x01	; 1
    6b8e:	50 40       	sbci	r21, 0x00	; 0
    6b90:	48 f0       	brcs	.+18     	; 0x6ba4 <strncpy+0x1c>
    6b92:	01 90       	ld	r0, Z+
    6b94:	0d 92       	st	X+, r0
    6b96:	00 20       	and	r0, r0
    6b98:	c9 f7       	brne	.-14     	; 0x6b8c <strncpy+0x4>
    6b9a:	01 c0       	rjmp	.+2      	; 0x6b9e <strncpy+0x16>
    6b9c:	1d 92       	st	X+, r1
    6b9e:	41 50       	subi	r20, 0x01	; 1
    6ba0:	50 40       	sbci	r21, 0x00	; 0
    6ba2:	e0 f7       	brcc	.-8      	; 0x6b9c <strncpy+0x14>
    6ba4:	08 95       	ret

00006ba6 <itoa>:
    6ba6:	45 32       	cpi	r20, 0x25	; 37
    6ba8:	51 05       	cpc	r21, r1
    6baa:	20 f4       	brcc	.+8      	; 0x6bb4 <itoa+0xe>
    6bac:	42 30       	cpi	r20, 0x02	; 2
    6bae:	10 f0       	brcs	.+4      	; 0x6bb4 <itoa+0xe>
    6bb0:	0c 94 de 35 	jmp	0x6bbc	; 0x6bbc <__itoa_ncheck>
    6bb4:	fb 01       	movw	r30, r22
    6bb6:	10 82       	st	Z, r1
    6bb8:	cb 01       	movw	r24, r22
    6bba:	08 95       	ret

00006bbc <__itoa_ncheck>:
    6bbc:	bb 27       	eor	r27, r27
    6bbe:	4a 30       	cpi	r20, 0x0A	; 10
    6bc0:	31 f4       	brne	.+12     	; 0x6bce <__itoa_ncheck+0x12>
    6bc2:	99 23       	and	r25, r25
    6bc4:	22 f4       	brpl	.+8      	; 0x6bce <__itoa_ncheck+0x12>
    6bc6:	bd e2       	ldi	r27, 0x2D	; 45
    6bc8:	90 95       	com	r25
    6bca:	81 95       	neg	r24
    6bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    6bce:	0c 94 14 36 	jmp	0x6c28	; 0x6c28 <__utoa_common>

00006bd2 <__mulhi_const_10>:
    6bd2:	7a e0       	ldi	r23, 0x0A	; 10
    6bd4:	97 9f       	mul	r25, r23
    6bd6:	90 2d       	mov	r25, r0
    6bd8:	87 9f       	mul	r24, r23
    6bda:	80 2d       	mov	r24, r0
    6bdc:	91 0d       	add	r25, r1
    6bde:	11 24       	eor	r1, r1
    6be0:	08 95       	ret

00006be2 <__ultoa_ncheck>:
    6be2:	bb 27       	eor	r27, r27

00006be4 <__ultoa_common>:
    6be4:	fa 01       	movw	r30, r20
    6be6:	a6 2f       	mov	r26, r22
    6be8:	62 17       	cp	r22, r18
    6bea:	71 05       	cpc	r23, r1
    6bec:	81 05       	cpc	r24, r1
    6bee:	91 05       	cpc	r25, r1
    6bf0:	33 0b       	sbc	r19, r19
    6bf2:	30 fb       	bst	r19, 0
    6bf4:	66 f0       	brts	.+24     	; 0x6c0e <__ultoa_common+0x2a>
    6bf6:	aa 27       	eor	r26, r26
    6bf8:	66 0f       	add	r22, r22
    6bfa:	77 1f       	adc	r23, r23
    6bfc:	88 1f       	adc	r24, r24
    6bfe:	99 1f       	adc	r25, r25
    6c00:	aa 1f       	adc	r26, r26
    6c02:	a2 17       	cp	r26, r18
    6c04:	10 f0       	brcs	.+4      	; 0x6c0a <__ultoa_common+0x26>
    6c06:	a2 1b       	sub	r26, r18
    6c08:	63 95       	inc	r22
    6c0a:	38 50       	subi	r19, 0x08	; 8
    6c0c:	a9 f7       	brne	.-22     	; 0x6bf8 <__ultoa_common+0x14>
    6c0e:	a0 5d       	subi	r26, 0xD0	; 208
    6c10:	aa 33       	cpi	r26, 0x3A	; 58
    6c12:	08 f0       	brcs	.+2      	; 0x6c16 <__ultoa_common+0x32>
    6c14:	a9 5d       	subi	r26, 0xD9	; 217
    6c16:	a1 93       	st	Z+, r26
    6c18:	36 f7       	brtc	.-52     	; 0x6be6 <__ultoa_common+0x2>
    6c1a:	b1 11       	cpse	r27, r1
    6c1c:	b1 93       	st	Z+, r27
    6c1e:	10 82       	st	Z, r1
    6c20:	ca 01       	movw	r24, r20
    6c22:	0c 94 a4 3a 	jmp	0x7548	; 0x7548 <strrev>

00006c26 <__utoa_ncheck>:
    6c26:	bb 27       	eor	r27, r27

00006c28 <__utoa_common>:
    6c28:	fb 01       	movw	r30, r22
    6c2a:	55 27       	eor	r21, r21
    6c2c:	aa 27       	eor	r26, r26
    6c2e:	88 0f       	add	r24, r24
    6c30:	99 1f       	adc	r25, r25
    6c32:	aa 1f       	adc	r26, r26
    6c34:	a4 17       	cp	r26, r20
    6c36:	10 f0       	brcs	.+4      	; 0x6c3c <__utoa_common+0x14>
    6c38:	a4 1b       	sub	r26, r20
    6c3a:	83 95       	inc	r24
    6c3c:	50 51       	subi	r21, 0x10	; 16
    6c3e:	b9 f7       	brne	.-18     	; 0x6c2e <__utoa_common+0x6>
    6c40:	a0 5d       	subi	r26, 0xD0	; 208
    6c42:	aa 33       	cpi	r26, 0x3A	; 58
    6c44:	08 f0       	brcs	.+2      	; 0x6c48 <__utoa_common+0x20>
    6c46:	a9 5d       	subi	r26, 0xD9	; 217
    6c48:	a1 93       	st	Z+, r26
    6c4a:	00 97       	sbiw	r24, 0x00	; 0
    6c4c:	79 f7       	brne	.-34     	; 0x6c2c <__utoa_common+0x4>
    6c4e:	b1 11       	cpse	r27, r1
    6c50:	b1 93       	st	Z+, r27
    6c52:	11 92       	st	Z+, r1
    6c54:	cb 01       	movw	r24, r22
    6c56:	0c 94 a4 3a 	jmp	0x7548	; 0x7548 <strrev>

00006c5a <sprintf_P>:
    6c5a:	ae e0       	ldi	r26, 0x0E	; 14
    6c5c:	b0 e0       	ldi	r27, 0x00	; 0
    6c5e:	e3 e3       	ldi	r30, 0x33	; 51
    6c60:	f6 e3       	ldi	r31, 0x36	; 54
    6c62:	0c 94 0f 33 	jmp	0x661e	; 0x661e <__prologue_saves__+0x1c>
    6c66:	0d 89       	ldd	r16, Y+21	; 0x15
    6c68:	1e 89       	ldd	r17, Y+22	; 0x16
    6c6a:	8e e0       	ldi	r24, 0x0E	; 14
    6c6c:	8c 83       	std	Y+4, r24	; 0x04
    6c6e:	1a 83       	std	Y+2, r17	; 0x02
    6c70:	09 83       	std	Y+1, r16	; 0x01
    6c72:	8f ef       	ldi	r24, 0xFF	; 255
    6c74:	9f e7       	ldi	r25, 0x7F	; 127
    6c76:	9e 83       	std	Y+6, r25	; 0x06
    6c78:	8d 83       	std	Y+5, r24	; 0x05
    6c7a:	ae 01       	movw	r20, r28
    6c7c:	47 5e       	subi	r20, 0xE7	; 231
    6c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    6c80:	6f 89       	ldd	r22, Y+23	; 0x17
    6c82:	78 8d       	ldd	r23, Y+24	; 0x18
    6c84:	ce 01       	movw	r24, r28
    6c86:	01 96       	adiw	r24, 0x01	; 1
    6c88:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <vfprintf>
    6c8c:	ef 81       	ldd	r30, Y+7	; 0x07
    6c8e:	f8 85       	ldd	r31, Y+8	; 0x08
    6c90:	e0 0f       	add	r30, r16
    6c92:	f1 1f       	adc	r31, r17
    6c94:	10 82       	st	Z, r1
    6c96:	2e 96       	adiw	r28, 0x0e	; 14
    6c98:	e4 e0       	ldi	r30, 0x04	; 4
    6c9a:	0c 94 2b 33 	jmp	0x6656	; 0x6656 <__epilogue_restores__+0x1c>

00006c9e <vsnprintf_P>:
    6c9e:	ae e0       	ldi	r26, 0x0E	; 14
    6ca0:	b0 e0       	ldi	r27, 0x00	; 0
    6ca2:	e5 e5       	ldi	r30, 0x55	; 85
    6ca4:	f6 e3       	ldi	r31, 0x36	; 54
    6ca6:	0c 94 0f 33 	jmp	0x661e	; 0x661e <__prologue_saves__+0x1c>
    6caa:	8c 01       	movw	r16, r24
    6cac:	fa 01       	movw	r30, r20
    6cae:	8e e0       	ldi	r24, 0x0E	; 14
    6cb0:	8c 83       	std	Y+4, r24	; 0x04
    6cb2:	1a 83       	std	Y+2, r17	; 0x02
    6cb4:	09 83       	std	Y+1, r16	; 0x01
    6cb6:	77 ff       	sbrs	r23, 7
    6cb8:	02 c0       	rjmp	.+4      	; 0x6cbe <vsnprintf_P+0x20>
    6cba:	60 e0       	ldi	r22, 0x00	; 0
    6cbc:	70 e8       	ldi	r23, 0x80	; 128
    6cbe:	cb 01       	movw	r24, r22
    6cc0:	01 97       	sbiw	r24, 0x01	; 1
    6cc2:	9e 83       	std	Y+6, r25	; 0x06
    6cc4:	8d 83       	std	Y+5, r24	; 0x05
    6cc6:	a9 01       	movw	r20, r18
    6cc8:	bf 01       	movw	r22, r30
    6cca:	ce 01       	movw	r24, r28
    6ccc:	01 96       	adiw	r24, 0x01	; 1
    6cce:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <vfprintf>
    6cd2:	4d 81       	ldd	r20, Y+5	; 0x05
    6cd4:	5e 81       	ldd	r21, Y+6	; 0x06
    6cd6:	57 fd       	sbrc	r21, 7
    6cd8:	0a c0       	rjmp	.+20     	; 0x6cee <vsnprintf_P+0x50>
    6cda:	2f 81       	ldd	r18, Y+7	; 0x07
    6cdc:	38 85       	ldd	r19, Y+8	; 0x08
    6cde:	42 17       	cp	r20, r18
    6ce0:	53 07       	cpc	r21, r19
    6ce2:	0c f4       	brge	.+2      	; 0x6ce6 <vsnprintf_P+0x48>
    6ce4:	9a 01       	movw	r18, r20
    6ce6:	f8 01       	movw	r30, r16
    6ce8:	e2 0f       	add	r30, r18
    6cea:	f3 1f       	adc	r31, r19
    6cec:	10 82       	st	Z, r1
    6cee:	2e 96       	adiw	r28, 0x0e	; 14
    6cf0:	e4 e0       	ldi	r30, 0x04	; 4
    6cf2:	0c 94 2b 33 	jmp	0x6656	; 0x6656 <__epilogue_restores__+0x1c>

00006cf6 <vfprintf>:
    6cf6:	ab e0       	ldi	r26, 0x0B	; 11
    6cf8:	b0 e0       	ldi	r27, 0x00	; 0
    6cfa:	e1 e8       	ldi	r30, 0x81	; 129
    6cfc:	f6 e3       	ldi	r31, 0x36	; 54
    6cfe:	0c 94 01 33 	jmp	0x6602	; 0x6602 <__prologue_saves__>
    6d02:	6c 01       	movw	r12, r24
    6d04:	7b 01       	movw	r14, r22
    6d06:	8a 01       	movw	r16, r20
    6d08:	fc 01       	movw	r30, r24
    6d0a:	17 82       	std	Z+7, r1	; 0x07
    6d0c:	16 82       	std	Z+6, r1	; 0x06
    6d0e:	83 81       	ldd	r24, Z+3	; 0x03
    6d10:	81 ff       	sbrs	r24, 1
    6d12:	cc c1       	rjmp	.+920    	; 0x70ac <vfprintf+0x3b6>
    6d14:	ce 01       	movw	r24, r28
    6d16:	01 96       	adiw	r24, 0x01	; 1
    6d18:	3c 01       	movw	r6, r24
    6d1a:	f6 01       	movw	r30, r12
    6d1c:	93 81       	ldd	r25, Z+3	; 0x03
    6d1e:	f7 01       	movw	r30, r14
    6d20:	93 fd       	sbrc	r25, 3
    6d22:	85 91       	lpm	r24, Z+
    6d24:	93 ff       	sbrs	r25, 3
    6d26:	81 91       	ld	r24, Z+
    6d28:	7f 01       	movw	r14, r30
    6d2a:	88 23       	and	r24, r24
    6d2c:	09 f4       	brne	.+2      	; 0x6d30 <vfprintf+0x3a>
    6d2e:	ba c1       	rjmp	.+884    	; 0x70a4 <vfprintf+0x3ae>
    6d30:	85 32       	cpi	r24, 0x25	; 37
    6d32:	39 f4       	brne	.+14     	; 0x6d42 <vfprintf+0x4c>
    6d34:	93 fd       	sbrc	r25, 3
    6d36:	85 91       	lpm	r24, Z+
    6d38:	93 ff       	sbrs	r25, 3
    6d3a:	81 91       	ld	r24, Z+
    6d3c:	7f 01       	movw	r14, r30
    6d3e:	85 32       	cpi	r24, 0x25	; 37
    6d40:	29 f4       	brne	.+10     	; 0x6d4c <vfprintf+0x56>
    6d42:	b6 01       	movw	r22, r12
    6d44:	90 e0       	ldi	r25, 0x00	; 0
    6d46:	0e 94 b4 3a 	call	0x7568	; 0x7568 <fputc>
    6d4a:	e7 cf       	rjmp	.-50     	; 0x6d1a <vfprintf+0x24>
    6d4c:	91 2c       	mov	r9, r1
    6d4e:	21 2c       	mov	r2, r1
    6d50:	31 2c       	mov	r3, r1
    6d52:	ff e1       	ldi	r31, 0x1F	; 31
    6d54:	f3 15       	cp	r31, r3
    6d56:	d8 f0       	brcs	.+54     	; 0x6d8e <vfprintf+0x98>
    6d58:	8b 32       	cpi	r24, 0x2B	; 43
    6d5a:	79 f0       	breq	.+30     	; 0x6d7a <vfprintf+0x84>
    6d5c:	38 f4       	brcc	.+14     	; 0x6d6c <vfprintf+0x76>
    6d5e:	80 32       	cpi	r24, 0x20	; 32
    6d60:	79 f0       	breq	.+30     	; 0x6d80 <vfprintf+0x8a>
    6d62:	83 32       	cpi	r24, 0x23	; 35
    6d64:	a1 f4       	brne	.+40     	; 0x6d8e <vfprintf+0x98>
    6d66:	23 2d       	mov	r18, r3
    6d68:	20 61       	ori	r18, 0x10	; 16
    6d6a:	1d c0       	rjmp	.+58     	; 0x6da6 <vfprintf+0xb0>
    6d6c:	8d 32       	cpi	r24, 0x2D	; 45
    6d6e:	61 f0       	breq	.+24     	; 0x6d88 <vfprintf+0x92>
    6d70:	80 33       	cpi	r24, 0x30	; 48
    6d72:	69 f4       	brne	.+26     	; 0x6d8e <vfprintf+0x98>
    6d74:	23 2d       	mov	r18, r3
    6d76:	21 60       	ori	r18, 0x01	; 1
    6d78:	16 c0       	rjmp	.+44     	; 0x6da6 <vfprintf+0xb0>
    6d7a:	83 2d       	mov	r24, r3
    6d7c:	82 60       	ori	r24, 0x02	; 2
    6d7e:	38 2e       	mov	r3, r24
    6d80:	e3 2d       	mov	r30, r3
    6d82:	e4 60       	ori	r30, 0x04	; 4
    6d84:	3e 2e       	mov	r3, r30
    6d86:	2a c0       	rjmp	.+84     	; 0x6ddc <vfprintf+0xe6>
    6d88:	f3 2d       	mov	r31, r3
    6d8a:	f8 60       	ori	r31, 0x08	; 8
    6d8c:	1d c0       	rjmp	.+58     	; 0x6dc8 <vfprintf+0xd2>
    6d8e:	37 fc       	sbrc	r3, 7
    6d90:	2d c0       	rjmp	.+90     	; 0x6dec <vfprintf+0xf6>
    6d92:	20 ed       	ldi	r18, 0xD0	; 208
    6d94:	28 0f       	add	r18, r24
    6d96:	2a 30       	cpi	r18, 0x0A	; 10
    6d98:	40 f0       	brcs	.+16     	; 0x6daa <vfprintf+0xb4>
    6d9a:	8e 32       	cpi	r24, 0x2E	; 46
    6d9c:	b9 f4       	brne	.+46     	; 0x6dcc <vfprintf+0xd6>
    6d9e:	36 fc       	sbrc	r3, 6
    6da0:	81 c1       	rjmp	.+770    	; 0x70a4 <vfprintf+0x3ae>
    6da2:	23 2d       	mov	r18, r3
    6da4:	20 64       	ori	r18, 0x40	; 64
    6da6:	32 2e       	mov	r3, r18
    6da8:	19 c0       	rjmp	.+50     	; 0x6ddc <vfprintf+0xe6>
    6daa:	36 fe       	sbrs	r3, 6
    6dac:	06 c0       	rjmp	.+12     	; 0x6dba <vfprintf+0xc4>
    6dae:	8a e0       	ldi	r24, 0x0A	; 10
    6db0:	98 9e       	mul	r9, r24
    6db2:	20 0d       	add	r18, r0
    6db4:	11 24       	eor	r1, r1
    6db6:	92 2e       	mov	r9, r18
    6db8:	11 c0       	rjmp	.+34     	; 0x6ddc <vfprintf+0xe6>
    6dba:	ea e0       	ldi	r30, 0x0A	; 10
    6dbc:	2e 9e       	mul	r2, r30
    6dbe:	20 0d       	add	r18, r0
    6dc0:	11 24       	eor	r1, r1
    6dc2:	22 2e       	mov	r2, r18
    6dc4:	f3 2d       	mov	r31, r3
    6dc6:	f0 62       	ori	r31, 0x20	; 32
    6dc8:	3f 2e       	mov	r3, r31
    6dca:	08 c0       	rjmp	.+16     	; 0x6ddc <vfprintf+0xe6>
    6dcc:	8c 36       	cpi	r24, 0x6C	; 108
    6dce:	21 f4       	brne	.+8      	; 0x6dd8 <vfprintf+0xe2>
    6dd0:	83 2d       	mov	r24, r3
    6dd2:	80 68       	ori	r24, 0x80	; 128
    6dd4:	38 2e       	mov	r3, r24
    6dd6:	02 c0       	rjmp	.+4      	; 0x6ddc <vfprintf+0xe6>
    6dd8:	88 36       	cpi	r24, 0x68	; 104
    6dda:	41 f4       	brne	.+16     	; 0x6dec <vfprintf+0xf6>
    6ddc:	f7 01       	movw	r30, r14
    6dde:	93 fd       	sbrc	r25, 3
    6de0:	85 91       	lpm	r24, Z+
    6de2:	93 ff       	sbrs	r25, 3
    6de4:	81 91       	ld	r24, Z+
    6de6:	7f 01       	movw	r14, r30
    6de8:	81 11       	cpse	r24, r1
    6dea:	b3 cf       	rjmp	.-154    	; 0x6d52 <vfprintf+0x5c>
    6dec:	98 2f       	mov	r25, r24
    6dee:	9f 7d       	andi	r25, 0xDF	; 223
    6df0:	95 54       	subi	r25, 0x45	; 69
    6df2:	93 30       	cpi	r25, 0x03	; 3
    6df4:	28 f4       	brcc	.+10     	; 0x6e00 <vfprintf+0x10a>
    6df6:	0c 5f       	subi	r16, 0xFC	; 252
    6df8:	1f 4f       	sbci	r17, 0xFF	; 255
    6dfa:	9f e3       	ldi	r25, 0x3F	; 63
    6dfc:	99 83       	std	Y+1, r25	; 0x01
    6dfe:	0d c0       	rjmp	.+26     	; 0x6e1a <vfprintf+0x124>
    6e00:	83 36       	cpi	r24, 0x63	; 99
    6e02:	31 f0       	breq	.+12     	; 0x6e10 <vfprintf+0x11a>
    6e04:	83 37       	cpi	r24, 0x73	; 115
    6e06:	71 f0       	breq	.+28     	; 0x6e24 <vfprintf+0x12e>
    6e08:	83 35       	cpi	r24, 0x53	; 83
    6e0a:	09 f0       	breq	.+2      	; 0x6e0e <vfprintf+0x118>
    6e0c:	59 c0       	rjmp	.+178    	; 0x6ec0 <vfprintf+0x1ca>
    6e0e:	21 c0       	rjmp	.+66     	; 0x6e52 <vfprintf+0x15c>
    6e10:	f8 01       	movw	r30, r16
    6e12:	80 81       	ld	r24, Z
    6e14:	89 83       	std	Y+1, r24	; 0x01
    6e16:	0e 5f       	subi	r16, 0xFE	; 254
    6e18:	1f 4f       	sbci	r17, 0xFF	; 255
    6e1a:	88 24       	eor	r8, r8
    6e1c:	83 94       	inc	r8
    6e1e:	91 2c       	mov	r9, r1
    6e20:	53 01       	movw	r10, r6
    6e22:	13 c0       	rjmp	.+38     	; 0x6e4a <vfprintf+0x154>
    6e24:	28 01       	movw	r4, r16
    6e26:	f2 e0       	ldi	r31, 0x02	; 2
    6e28:	4f 0e       	add	r4, r31
    6e2a:	51 1c       	adc	r5, r1
    6e2c:	f8 01       	movw	r30, r16
    6e2e:	a0 80       	ld	r10, Z
    6e30:	b1 80       	ldd	r11, Z+1	; 0x01
    6e32:	36 fe       	sbrs	r3, 6
    6e34:	03 c0       	rjmp	.+6      	; 0x6e3c <vfprintf+0x146>
    6e36:	69 2d       	mov	r22, r9
    6e38:	70 e0       	ldi	r23, 0x00	; 0
    6e3a:	02 c0       	rjmp	.+4      	; 0x6e40 <vfprintf+0x14a>
    6e3c:	6f ef       	ldi	r22, 0xFF	; 255
    6e3e:	7f ef       	ldi	r23, 0xFF	; 255
    6e40:	c5 01       	movw	r24, r10
    6e42:	0e 94 99 3a 	call	0x7532	; 0x7532 <strnlen>
    6e46:	4c 01       	movw	r8, r24
    6e48:	82 01       	movw	r16, r4
    6e4a:	f3 2d       	mov	r31, r3
    6e4c:	ff 77       	andi	r31, 0x7F	; 127
    6e4e:	3f 2e       	mov	r3, r31
    6e50:	16 c0       	rjmp	.+44     	; 0x6e7e <vfprintf+0x188>
    6e52:	28 01       	movw	r4, r16
    6e54:	22 e0       	ldi	r18, 0x02	; 2
    6e56:	42 0e       	add	r4, r18
    6e58:	51 1c       	adc	r5, r1
    6e5a:	f8 01       	movw	r30, r16
    6e5c:	a0 80       	ld	r10, Z
    6e5e:	b1 80       	ldd	r11, Z+1	; 0x01
    6e60:	36 fe       	sbrs	r3, 6
    6e62:	03 c0       	rjmp	.+6      	; 0x6e6a <vfprintf+0x174>
    6e64:	69 2d       	mov	r22, r9
    6e66:	70 e0       	ldi	r23, 0x00	; 0
    6e68:	02 c0       	rjmp	.+4      	; 0x6e6e <vfprintf+0x178>
    6e6a:	6f ef       	ldi	r22, 0xFF	; 255
    6e6c:	7f ef       	ldi	r23, 0xFF	; 255
    6e6e:	c5 01       	movw	r24, r10
    6e70:	0e 94 8e 3a 	call	0x751c	; 0x751c <strnlen_P>
    6e74:	4c 01       	movw	r8, r24
    6e76:	f3 2d       	mov	r31, r3
    6e78:	f0 68       	ori	r31, 0x80	; 128
    6e7a:	3f 2e       	mov	r3, r31
    6e7c:	82 01       	movw	r16, r4
    6e7e:	33 fc       	sbrc	r3, 3
    6e80:	1b c0       	rjmp	.+54     	; 0x6eb8 <vfprintf+0x1c2>
    6e82:	82 2d       	mov	r24, r2
    6e84:	90 e0       	ldi	r25, 0x00	; 0
    6e86:	88 16       	cp	r8, r24
    6e88:	99 06       	cpc	r9, r25
    6e8a:	b0 f4       	brcc	.+44     	; 0x6eb8 <vfprintf+0x1c2>
    6e8c:	b6 01       	movw	r22, r12
    6e8e:	80 e2       	ldi	r24, 0x20	; 32
    6e90:	90 e0       	ldi	r25, 0x00	; 0
    6e92:	0e 94 b4 3a 	call	0x7568	; 0x7568 <fputc>
    6e96:	2a 94       	dec	r2
    6e98:	f4 cf       	rjmp	.-24     	; 0x6e82 <vfprintf+0x18c>
    6e9a:	f5 01       	movw	r30, r10
    6e9c:	37 fc       	sbrc	r3, 7
    6e9e:	85 91       	lpm	r24, Z+
    6ea0:	37 fe       	sbrs	r3, 7
    6ea2:	81 91       	ld	r24, Z+
    6ea4:	5f 01       	movw	r10, r30
    6ea6:	b6 01       	movw	r22, r12
    6ea8:	90 e0       	ldi	r25, 0x00	; 0
    6eaa:	0e 94 b4 3a 	call	0x7568	; 0x7568 <fputc>
    6eae:	21 10       	cpse	r2, r1
    6eb0:	2a 94       	dec	r2
    6eb2:	21 e0       	ldi	r18, 0x01	; 1
    6eb4:	82 1a       	sub	r8, r18
    6eb6:	91 08       	sbc	r9, r1
    6eb8:	81 14       	cp	r8, r1
    6eba:	91 04       	cpc	r9, r1
    6ebc:	71 f7       	brne	.-36     	; 0x6e9a <vfprintf+0x1a4>
    6ebe:	e8 c0       	rjmp	.+464    	; 0x7090 <vfprintf+0x39a>
    6ec0:	84 36       	cpi	r24, 0x64	; 100
    6ec2:	11 f0       	breq	.+4      	; 0x6ec8 <vfprintf+0x1d2>
    6ec4:	89 36       	cpi	r24, 0x69	; 105
    6ec6:	41 f5       	brne	.+80     	; 0x6f18 <vfprintf+0x222>
    6ec8:	f8 01       	movw	r30, r16
    6eca:	37 fe       	sbrs	r3, 7
    6ecc:	07 c0       	rjmp	.+14     	; 0x6edc <vfprintf+0x1e6>
    6ece:	60 81       	ld	r22, Z
    6ed0:	71 81       	ldd	r23, Z+1	; 0x01
    6ed2:	82 81       	ldd	r24, Z+2	; 0x02
    6ed4:	93 81       	ldd	r25, Z+3	; 0x03
    6ed6:	0c 5f       	subi	r16, 0xFC	; 252
    6ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    6eda:	08 c0       	rjmp	.+16     	; 0x6eec <vfprintf+0x1f6>
    6edc:	60 81       	ld	r22, Z
    6ede:	71 81       	ldd	r23, Z+1	; 0x01
    6ee0:	07 2e       	mov	r0, r23
    6ee2:	00 0c       	add	r0, r0
    6ee4:	88 0b       	sbc	r24, r24
    6ee6:	99 0b       	sbc	r25, r25
    6ee8:	0e 5f       	subi	r16, 0xFE	; 254
    6eea:	1f 4f       	sbci	r17, 0xFF	; 255
    6eec:	f3 2d       	mov	r31, r3
    6eee:	ff 76       	andi	r31, 0x6F	; 111
    6ef0:	3f 2e       	mov	r3, r31
    6ef2:	97 ff       	sbrs	r25, 7
    6ef4:	09 c0       	rjmp	.+18     	; 0x6f08 <vfprintf+0x212>
    6ef6:	90 95       	com	r25
    6ef8:	80 95       	com	r24
    6efa:	70 95       	com	r23
    6efc:	61 95       	neg	r22
    6efe:	7f 4f       	sbci	r23, 0xFF	; 255
    6f00:	8f 4f       	sbci	r24, 0xFF	; 255
    6f02:	9f 4f       	sbci	r25, 0xFF	; 255
    6f04:	f0 68       	ori	r31, 0x80	; 128
    6f06:	3f 2e       	mov	r3, r31
    6f08:	2a e0       	ldi	r18, 0x0A	; 10
    6f0a:	30 e0       	ldi	r19, 0x00	; 0
    6f0c:	a3 01       	movw	r20, r6
    6f0e:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <__ultoa_invert>
    6f12:	88 2e       	mov	r8, r24
    6f14:	86 18       	sub	r8, r6
    6f16:	45 c0       	rjmp	.+138    	; 0x6fa2 <vfprintf+0x2ac>
    6f18:	85 37       	cpi	r24, 0x75	; 117
    6f1a:	31 f4       	brne	.+12     	; 0x6f28 <vfprintf+0x232>
    6f1c:	23 2d       	mov	r18, r3
    6f1e:	2f 7e       	andi	r18, 0xEF	; 239
    6f20:	b2 2e       	mov	r11, r18
    6f22:	2a e0       	ldi	r18, 0x0A	; 10
    6f24:	30 e0       	ldi	r19, 0x00	; 0
    6f26:	25 c0       	rjmp	.+74     	; 0x6f72 <vfprintf+0x27c>
    6f28:	93 2d       	mov	r25, r3
    6f2a:	99 7f       	andi	r25, 0xF9	; 249
    6f2c:	b9 2e       	mov	r11, r25
    6f2e:	8f 36       	cpi	r24, 0x6F	; 111
    6f30:	c1 f0       	breq	.+48     	; 0x6f62 <vfprintf+0x26c>
    6f32:	18 f4       	brcc	.+6      	; 0x6f3a <vfprintf+0x244>
    6f34:	88 35       	cpi	r24, 0x58	; 88
    6f36:	79 f0       	breq	.+30     	; 0x6f56 <vfprintf+0x260>
    6f38:	b5 c0       	rjmp	.+362    	; 0x70a4 <vfprintf+0x3ae>
    6f3a:	80 37       	cpi	r24, 0x70	; 112
    6f3c:	19 f0       	breq	.+6      	; 0x6f44 <vfprintf+0x24e>
    6f3e:	88 37       	cpi	r24, 0x78	; 120
    6f40:	21 f0       	breq	.+8      	; 0x6f4a <vfprintf+0x254>
    6f42:	b0 c0       	rjmp	.+352    	; 0x70a4 <vfprintf+0x3ae>
    6f44:	e9 2f       	mov	r30, r25
    6f46:	e0 61       	ori	r30, 0x10	; 16
    6f48:	be 2e       	mov	r11, r30
    6f4a:	b4 fe       	sbrs	r11, 4
    6f4c:	0d c0       	rjmp	.+26     	; 0x6f68 <vfprintf+0x272>
    6f4e:	fb 2d       	mov	r31, r11
    6f50:	f4 60       	ori	r31, 0x04	; 4
    6f52:	bf 2e       	mov	r11, r31
    6f54:	09 c0       	rjmp	.+18     	; 0x6f68 <vfprintf+0x272>
    6f56:	34 fe       	sbrs	r3, 4
    6f58:	0a c0       	rjmp	.+20     	; 0x6f6e <vfprintf+0x278>
    6f5a:	29 2f       	mov	r18, r25
    6f5c:	26 60       	ori	r18, 0x06	; 6
    6f5e:	b2 2e       	mov	r11, r18
    6f60:	06 c0       	rjmp	.+12     	; 0x6f6e <vfprintf+0x278>
    6f62:	28 e0       	ldi	r18, 0x08	; 8
    6f64:	30 e0       	ldi	r19, 0x00	; 0
    6f66:	05 c0       	rjmp	.+10     	; 0x6f72 <vfprintf+0x27c>
    6f68:	20 e1       	ldi	r18, 0x10	; 16
    6f6a:	30 e0       	ldi	r19, 0x00	; 0
    6f6c:	02 c0       	rjmp	.+4      	; 0x6f72 <vfprintf+0x27c>
    6f6e:	20 e1       	ldi	r18, 0x10	; 16
    6f70:	32 e0       	ldi	r19, 0x02	; 2
    6f72:	f8 01       	movw	r30, r16
    6f74:	b7 fe       	sbrs	r11, 7
    6f76:	07 c0       	rjmp	.+14     	; 0x6f86 <vfprintf+0x290>
    6f78:	60 81       	ld	r22, Z
    6f7a:	71 81       	ldd	r23, Z+1	; 0x01
    6f7c:	82 81       	ldd	r24, Z+2	; 0x02
    6f7e:	93 81       	ldd	r25, Z+3	; 0x03
    6f80:	0c 5f       	subi	r16, 0xFC	; 252
    6f82:	1f 4f       	sbci	r17, 0xFF	; 255
    6f84:	06 c0       	rjmp	.+12     	; 0x6f92 <vfprintf+0x29c>
    6f86:	60 81       	ld	r22, Z
    6f88:	71 81       	ldd	r23, Z+1	; 0x01
    6f8a:	80 e0       	ldi	r24, 0x00	; 0
    6f8c:	90 e0       	ldi	r25, 0x00	; 0
    6f8e:	0e 5f       	subi	r16, 0xFE	; 254
    6f90:	1f 4f       	sbci	r17, 0xFF	; 255
    6f92:	a3 01       	movw	r20, r6
    6f94:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <__ultoa_invert>
    6f98:	88 2e       	mov	r8, r24
    6f9a:	86 18       	sub	r8, r6
    6f9c:	fb 2d       	mov	r31, r11
    6f9e:	ff 77       	andi	r31, 0x7F	; 127
    6fa0:	3f 2e       	mov	r3, r31
    6fa2:	36 fe       	sbrs	r3, 6
    6fa4:	0d c0       	rjmp	.+26     	; 0x6fc0 <vfprintf+0x2ca>
    6fa6:	23 2d       	mov	r18, r3
    6fa8:	2e 7f       	andi	r18, 0xFE	; 254
    6faa:	a2 2e       	mov	r10, r18
    6fac:	89 14       	cp	r8, r9
    6fae:	58 f4       	brcc	.+22     	; 0x6fc6 <vfprintf+0x2d0>
    6fb0:	34 fe       	sbrs	r3, 4
    6fb2:	0b c0       	rjmp	.+22     	; 0x6fca <vfprintf+0x2d4>
    6fb4:	32 fc       	sbrc	r3, 2
    6fb6:	09 c0       	rjmp	.+18     	; 0x6fca <vfprintf+0x2d4>
    6fb8:	83 2d       	mov	r24, r3
    6fba:	8e 7e       	andi	r24, 0xEE	; 238
    6fbc:	a8 2e       	mov	r10, r24
    6fbe:	05 c0       	rjmp	.+10     	; 0x6fca <vfprintf+0x2d4>
    6fc0:	b8 2c       	mov	r11, r8
    6fc2:	a3 2c       	mov	r10, r3
    6fc4:	03 c0       	rjmp	.+6      	; 0x6fcc <vfprintf+0x2d6>
    6fc6:	b8 2c       	mov	r11, r8
    6fc8:	01 c0       	rjmp	.+2      	; 0x6fcc <vfprintf+0x2d6>
    6fca:	b9 2c       	mov	r11, r9
    6fcc:	a4 fe       	sbrs	r10, 4
    6fce:	0f c0       	rjmp	.+30     	; 0x6fee <vfprintf+0x2f8>
    6fd0:	fe 01       	movw	r30, r28
    6fd2:	e8 0d       	add	r30, r8
    6fd4:	f1 1d       	adc	r31, r1
    6fd6:	80 81       	ld	r24, Z
    6fd8:	80 33       	cpi	r24, 0x30	; 48
    6fda:	21 f4       	brne	.+8      	; 0x6fe4 <vfprintf+0x2ee>
    6fdc:	9a 2d       	mov	r25, r10
    6fde:	99 7e       	andi	r25, 0xE9	; 233
    6fe0:	a9 2e       	mov	r10, r25
    6fe2:	09 c0       	rjmp	.+18     	; 0x6ff6 <vfprintf+0x300>
    6fe4:	a2 fe       	sbrs	r10, 2
    6fe6:	06 c0       	rjmp	.+12     	; 0x6ff4 <vfprintf+0x2fe>
    6fe8:	b3 94       	inc	r11
    6fea:	b3 94       	inc	r11
    6fec:	04 c0       	rjmp	.+8      	; 0x6ff6 <vfprintf+0x300>
    6fee:	8a 2d       	mov	r24, r10
    6ff0:	86 78       	andi	r24, 0x86	; 134
    6ff2:	09 f0       	breq	.+2      	; 0x6ff6 <vfprintf+0x300>
    6ff4:	b3 94       	inc	r11
    6ff6:	a3 fc       	sbrc	r10, 3
    6ff8:	11 c0       	rjmp	.+34     	; 0x701c <vfprintf+0x326>
    6ffa:	a0 fe       	sbrs	r10, 0
    6ffc:	06 c0       	rjmp	.+12     	; 0x700a <vfprintf+0x314>
    6ffe:	b2 14       	cp	r11, r2
    7000:	88 f4       	brcc	.+34     	; 0x7024 <vfprintf+0x32e>
    7002:	28 0c       	add	r2, r8
    7004:	92 2c       	mov	r9, r2
    7006:	9b 18       	sub	r9, r11
    7008:	0e c0       	rjmp	.+28     	; 0x7026 <vfprintf+0x330>
    700a:	b2 14       	cp	r11, r2
    700c:	60 f4       	brcc	.+24     	; 0x7026 <vfprintf+0x330>
    700e:	b6 01       	movw	r22, r12
    7010:	80 e2       	ldi	r24, 0x20	; 32
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	0e 94 b4 3a 	call	0x7568	; 0x7568 <fputc>
    7018:	b3 94       	inc	r11
    701a:	f7 cf       	rjmp	.-18     	; 0x700a <vfprintf+0x314>
    701c:	b2 14       	cp	r11, r2
    701e:	18 f4       	brcc	.+6      	; 0x7026 <vfprintf+0x330>
    7020:	2b 18       	sub	r2, r11
    7022:	02 c0       	rjmp	.+4      	; 0x7028 <vfprintf+0x332>
    7024:	98 2c       	mov	r9, r8
    7026:	21 2c       	mov	r2, r1
    7028:	a4 fe       	sbrs	r10, 4
    702a:	10 c0       	rjmp	.+32     	; 0x704c <vfprintf+0x356>
    702c:	b6 01       	movw	r22, r12
    702e:	80 e3       	ldi	r24, 0x30	; 48
    7030:	90 e0       	ldi	r25, 0x00	; 0
    7032:	0e 94 b4 3a 	call	0x7568	; 0x7568 <fputc>
    7036:	a2 fe       	sbrs	r10, 2
    7038:	17 c0       	rjmp	.+46     	; 0x7068 <vfprintf+0x372>
    703a:	a1 fc       	sbrc	r10, 1
    703c:	03 c0       	rjmp	.+6      	; 0x7044 <vfprintf+0x34e>
    703e:	88 e7       	ldi	r24, 0x78	; 120
    7040:	90 e0       	ldi	r25, 0x00	; 0
    7042:	02 c0       	rjmp	.+4      	; 0x7048 <vfprintf+0x352>
    7044:	88 e5       	ldi	r24, 0x58	; 88
    7046:	90 e0       	ldi	r25, 0x00	; 0
    7048:	b6 01       	movw	r22, r12
    704a:	0c c0       	rjmp	.+24     	; 0x7064 <vfprintf+0x36e>
    704c:	8a 2d       	mov	r24, r10
    704e:	86 78       	andi	r24, 0x86	; 134
    7050:	59 f0       	breq	.+22     	; 0x7068 <vfprintf+0x372>
    7052:	a1 fe       	sbrs	r10, 1
    7054:	02 c0       	rjmp	.+4      	; 0x705a <vfprintf+0x364>
    7056:	8b e2       	ldi	r24, 0x2B	; 43
    7058:	01 c0       	rjmp	.+2      	; 0x705c <vfprintf+0x366>
    705a:	80 e2       	ldi	r24, 0x20	; 32
    705c:	a7 fc       	sbrc	r10, 7
    705e:	8d e2       	ldi	r24, 0x2D	; 45
    7060:	b6 01       	movw	r22, r12
    7062:	90 e0       	ldi	r25, 0x00	; 0
    7064:	0e 94 b4 3a 	call	0x7568	; 0x7568 <fputc>
    7068:	89 14       	cp	r8, r9
    706a:	38 f4       	brcc	.+14     	; 0x707a <vfprintf+0x384>
    706c:	b6 01       	movw	r22, r12
    706e:	80 e3       	ldi	r24, 0x30	; 48
    7070:	90 e0       	ldi	r25, 0x00	; 0
    7072:	0e 94 b4 3a 	call	0x7568	; 0x7568 <fputc>
    7076:	9a 94       	dec	r9
    7078:	f7 cf       	rjmp	.-18     	; 0x7068 <vfprintf+0x372>
    707a:	8a 94       	dec	r8
    707c:	f3 01       	movw	r30, r6
    707e:	e8 0d       	add	r30, r8
    7080:	f1 1d       	adc	r31, r1
    7082:	80 81       	ld	r24, Z
    7084:	b6 01       	movw	r22, r12
    7086:	90 e0       	ldi	r25, 0x00	; 0
    7088:	0e 94 b4 3a 	call	0x7568	; 0x7568 <fputc>
    708c:	81 10       	cpse	r8, r1
    708e:	f5 cf       	rjmp	.-22     	; 0x707a <vfprintf+0x384>
    7090:	22 20       	and	r2, r2
    7092:	09 f4       	brne	.+2      	; 0x7096 <vfprintf+0x3a0>
    7094:	42 ce       	rjmp	.-892    	; 0x6d1a <vfprintf+0x24>
    7096:	b6 01       	movw	r22, r12
    7098:	80 e2       	ldi	r24, 0x20	; 32
    709a:	90 e0       	ldi	r25, 0x00	; 0
    709c:	0e 94 b4 3a 	call	0x7568	; 0x7568 <fputc>
    70a0:	2a 94       	dec	r2
    70a2:	f6 cf       	rjmp	.-20     	; 0x7090 <vfprintf+0x39a>
    70a4:	f6 01       	movw	r30, r12
    70a6:	86 81       	ldd	r24, Z+6	; 0x06
    70a8:	97 81       	ldd	r25, Z+7	; 0x07
    70aa:	02 c0       	rjmp	.+4      	; 0x70b0 <vfprintf+0x3ba>
    70ac:	8f ef       	ldi	r24, 0xFF	; 255
    70ae:	9f ef       	ldi	r25, 0xFF	; 255
    70b0:	2b 96       	adiw	r28, 0x0b	; 11
    70b2:	e2 e1       	ldi	r30, 0x12	; 18
    70b4:	0c 94 1d 33 	jmp	0x663a	; 0x663a <__epilogue_restores__>

000070b8 <dtoa_prf>:
    70b8:	a9 e0       	ldi	r26, 0x09	; 9
    70ba:	b0 e0       	ldi	r27, 0x00	; 0
    70bc:	e2 e6       	ldi	r30, 0x62	; 98
    70be:	f8 e3       	ldi	r31, 0x38	; 56
    70c0:	0c 94 07 33 	jmp	0x660e	; 0x660e <__prologue_saves__+0xc>
    70c4:	6a 01       	movw	r12, r20
    70c6:	12 2f       	mov	r17, r18
    70c8:	b0 2e       	mov	r11, r16
    70ca:	2b e3       	ldi	r18, 0x3B	; 59
    70cc:	20 17       	cp	r18, r16
    70ce:	20 f0       	brcs	.+8      	; 0x70d8 <dtoa_prf+0x20>
    70d0:	ff 24       	eor	r15, r15
    70d2:	f3 94       	inc	r15
    70d4:	f0 0e       	add	r15, r16
    70d6:	02 c0       	rjmp	.+4      	; 0x70dc <dtoa_prf+0x24>
    70d8:	2c e3       	ldi	r18, 0x3C	; 60
    70da:	f2 2e       	mov	r15, r18
    70dc:	0f 2d       	mov	r16, r15
    70de:	27 e0       	ldi	r18, 0x07	; 7
    70e0:	ae 01       	movw	r20, r28
    70e2:	4f 5f       	subi	r20, 0xFF	; 255
    70e4:	5f 4f       	sbci	r21, 0xFF	; 255
    70e6:	0e 94 b6 39 	call	0x736c	; 0x736c <__ftoa_engine>
    70ea:	bc 01       	movw	r22, r24
    70ec:	49 81       	ldd	r20, Y+1	; 0x01
    70ee:	84 2f       	mov	r24, r20
    70f0:	89 70       	andi	r24, 0x09	; 9
    70f2:	81 30       	cpi	r24, 0x01	; 1
    70f4:	31 f0       	breq	.+12     	; 0x7102 <dtoa_prf+0x4a>
    70f6:	e1 fc       	sbrc	r14, 1
    70f8:	06 c0       	rjmp	.+12     	; 0x7106 <dtoa_prf+0x4e>
    70fa:	e0 fe       	sbrs	r14, 0
    70fc:	06 c0       	rjmp	.+12     	; 0x710a <dtoa_prf+0x52>
    70fe:	90 e2       	ldi	r25, 0x20	; 32
    7100:	05 c0       	rjmp	.+10     	; 0x710c <dtoa_prf+0x54>
    7102:	9d e2       	ldi	r25, 0x2D	; 45
    7104:	03 c0       	rjmp	.+6      	; 0x710c <dtoa_prf+0x54>
    7106:	9b e2       	ldi	r25, 0x2B	; 43
    7108:	01 c0       	rjmp	.+2      	; 0x710c <dtoa_prf+0x54>
    710a:	90 e0       	ldi	r25, 0x00	; 0
    710c:	5e 2d       	mov	r21, r14
    710e:	50 71       	andi	r21, 0x10	; 16
    7110:	43 ff       	sbrs	r20, 3
    7112:	3c c0       	rjmp	.+120    	; 0x718c <dtoa_prf+0xd4>
    7114:	91 11       	cpse	r25, r1
    7116:	02 c0       	rjmp	.+4      	; 0x711c <dtoa_prf+0x64>
    7118:	83 e0       	ldi	r24, 0x03	; 3
    711a:	01 c0       	rjmp	.+2      	; 0x711e <dtoa_prf+0x66>
    711c:	84 e0       	ldi	r24, 0x04	; 4
    711e:	81 17       	cp	r24, r17
    7120:	18 f4       	brcc	.+6      	; 0x7128 <dtoa_prf+0x70>
    7122:	21 2f       	mov	r18, r17
    7124:	28 1b       	sub	r18, r24
    7126:	01 c0       	rjmp	.+2      	; 0x712a <dtoa_prf+0x72>
    7128:	20 e0       	ldi	r18, 0x00	; 0
    712a:	51 11       	cpse	r21, r1
    712c:	0b c0       	rjmp	.+22     	; 0x7144 <dtoa_prf+0x8c>
    712e:	f6 01       	movw	r30, r12
    7130:	82 2f       	mov	r24, r18
    7132:	30 e2       	ldi	r19, 0x20	; 32
    7134:	88 23       	and	r24, r24
    7136:	19 f0       	breq	.+6      	; 0x713e <dtoa_prf+0x86>
    7138:	31 93       	st	Z+, r19
    713a:	81 50       	subi	r24, 0x01	; 1
    713c:	fb cf       	rjmp	.-10     	; 0x7134 <dtoa_prf+0x7c>
    713e:	c2 0e       	add	r12, r18
    7140:	d1 1c       	adc	r13, r1
    7142:	20 e0       	ldi	r18, 0x00	; 0
    7144:	99 23       	and	r25, r25
    7146:	29 f0       	breq	.+10     	; 0x7152 <dtoa_prf+0x9a>
    7148:	d6 01       	movw	r26, r12
    714a:	9c 93       	st	X, r25
    714c:	f6 01       	movw	r30, r12
    714e:	31 96       	adiw	r30, 0x01	; 1
    7150:	6f 01       	movw	r12, r30
    7152:	c6 01       	movw	r24, r12
    7154:	03 96       	adiw	r24, 0x03	; 3
    7156:	e2 fe       	sbrs	r14, 2
    7158:	0a c0       	rjmp	.+20     	; 0x716e <dtoa_prf+0xb6>
    715a:	3e e4       	ldi	r19, 0x4E	; 78
    715c:	d6 01       	movw	r26, r12
    715e:	3c 93       	st	X, r19
    7160:	41 e4       	ldi	r20, 0x41	; 65
    7162:	11 96       	adiw	r26, 0x01	; 1
    7164:	4c 93       	st	X, r20
    7166:	11 97       	sbiw	r26, 0x01	; 1
    7168:	12 96       	adiw	r26, 0x02	; 2
    716a:	3c 93       	st	X, r19
    716c:	06 c0       	rjmp	.+12     	; 0x717a <dtoa_prf+0xc2>
    716e:	3e e6       	ldi	r19, 0x6E	; 110
    7170:	f6 01       	movw	r30, r12
    7172:	30 83       	st	Z, r19
    7174:	41 e6       	ldi	r20, 0x61	; 97
    7176:	41 83       	std	Z+1, r20	; 0x01
    7178:	32 83       	std	Z+2, r19	; 0x02
    717a:	fc 01       	movw	r30, r24
    717c:	32 2f       	mov	r19, r18
    717e:	40 e2       	ldi	r20, 0x20	; 32
    7180:	33 23       	and	r19, r19
    7182:	09 f4       	brne	.+2      	; 0x7186 <dtoa_prf+0xce>
    7184:	42 c0       	rjmp	.+132    	; 0x720a <dtoa_prf+0x152>
    7186:	41 93       	st	Z+, r20
    7188:	31 50       	subi	r19, 0x01	; 1
    718a:	fa cf       	rjmp	.-12     	; 0x7180 <dtoa_prf+0xc8>
    718c:	42 ff       	sbrs	r20, 2
    718e:	44 c0       	rjmp	.+136    	; 0x7218 <dtoa_prf+0x160>
    7190:	91 11       	cpse	r25, r1
    7192:	02 c0       	rjmp	.+4      	; 0x7198 <dtoa_prf+0xe0>
    7194:	83 e0       	ldi	r24, 0x03	; 3
    7196:	01 c0       	rjmp	.+2      	; 0x719a <dtoa_prf+0xe2>
    7198:	84 e0       	ldi	r24, 0x04	; 4
    719a:	81 17       	cp	r24, r17
    719c:	18 f4       	brcc	.+6      	; 0x71a4 <dtoa_prf+0xec>
    719e:	21 2f       	mov	r18, r17
    71a0:	28 1b       	sub	r18, r24
    71a2:	01 c0       	rjmp	.+2      	; 0x71a6 <dtoa_prf+0xee>
    71a4:	20 e0       	ldi	r18, 0x00	; 0
    71a6:	51 11       	cpse	r21, r1
    71a8:	0b c0       	rjmp	.+22     	; 0x71c0 <dtoa_prf+0x108>
    71aa:	f6 01       	movw	r30, r12
    71ac:	82 2f       	mov	r24, r18
    71ae:	30 e2       	ldi	r19, 0x20	; 32
    71b0:	88 23       	and	r24, r24
    71b2:	19 f0       	breq	.+6      	; 0x71ba <dtoa_prf+0x102>
    71b4:	31 93       	st	Z+, r19
    71b6:	81 50       	subi	r24, 0x01	; 1
    71b8:	fb cf       	rjmp	.-10     	; 0x71b0 <dtoa_prf+0xf8>
    71ba:	c2 0e       	add	r12, r18
    71bc:	d1 1c       	adc	r13, r1
    71be:	20 e0       	ldi	r18, 0x00	; 0
    71c0:	99 23       	and	r25, r25
    71c2:	29 f0       	breq	.+10     	; 0x71ce <dtoa_prf+0x116>
    71c4:	d6 01       	movw	r26, r12
    71c6:	9c 93       	st	X, r25
    71c8:	f6 01       	movw	r30, r12
    71ca:	31 96       	adiw	r30, 0x01	; 1
    71cc:	6f 01       	movw	r12, r30
    71ce:	c6 01       	movw	r24, r12
    71d0:	03 96       	adiw	r24, 0x03	; 3
    71d2:	e2 fe       	sbrs	r14, 2
    71d4:	0b c0       	rjmp	.+22     	; 0x71ec <dtoa_prf+0x134>
    71d6:	39 e4       	ldi	r19, 0x49	; 73
    71d8:	d6 01       	movw	r26, r12
    71da:	3c 93       	st	X, r19
    71dc:	3e e4       	ldi	r19, 0x4E	; 78
    71de:	11 96       	adiw	r26, 0x01	; 1
    71e0:	3c 93       	st	X, r19
    71e2:	11 97       	sbiw	r26, 0x01	; 1
    71e4:	36 e4       	ldi	r19, 0x46	; 70
    71e6:	12 96       	adiw	r26, 0x02	; 2
    71e8:	3c 93       	st	X, r19
    71ea:	07 c0       	rjmp	.+14     	; 0x71fa <dtoa_prf+0x142>
    71ec:	39 e6       	ldi	r19, 0x69	; 105
    71ee:	f6 01       	movw	r30, r12
    71f0:	30 83       	st	Z, r19
    71f2:	3e e6       	ldi	r19, 0x6E	; 110
    71f4:	31 83       	std	Z+1, r19	; 0x01
    71f6:	36 e6       	ldi	r19, 0x66	; 102
    71f8:	32 83       	std	Z+2, r19	; 0x02
    71fa:	fc 01       	movw	r30, r24
    71fc:	32 2f       	mov	r19, r18
    71fe:	40 e2       	ldi	r20, 0x20	; 32
    7200:	33 23       	and	r19, r19
    7202:	19 f0       	breq	.+6      	; 0x720a <dtoa_prf+0x152>
    7204:	41 93       	st	Z+, r20
    7206:	31 50       	subi	r19, 0x01	; 1
    7208:	fb cf       	rjmp	.-10     	; 0x7200 <dtoa_prf+0x148>
    720a:	fc 01       	movw	r30, r24
    720c:	e2 0f       	add	r30, r18
    720e:	f1 1d       	adc	r31, r1
    7210:	10 82       	st	Z, r1
    7212:	8e ef       	ldi	r24, 0xFE	; 254
    7214:	9f ef       	ldi	r25, 0xFF	; 255
    7216:	a6 c0       	rjmp	.+332    	; 0x7364 <dtoa_prf+0x2ac>
    7218:	21 e0       	ldi	r18, 0x01	; 1
    721a:	30 e0       	ldi	r19, 0x00	; 0
    721c:	91 11       	cpse	r25, r1
    721e:	02 c0       	rjmp	.+4      	; 0x7224 <dtoa_prf+0x16c>
    7220:	20 e0       	ldi	r18, 0x00	; 0
    7222:	30 e0       	ldi	r19, 0x00	; 0
    7224:	16 16       	cp	r1, r22
    7226:	17 06       	cpc	r1, r23
    7228:	1c f4       	brge	.+6      	; 0x7230 <dtoa_prf+0x178>
    722a:	fb 01       	movw	r30, r22
    722c:	31 96       	adiw	r30, 0x01	; 1
    722e:	02 c0       	rjmp	.+4      	; 0x7234 <dtoa_prf+0x17c>
    7230:	e1 e0       	ldi	r30, 0x01	; 1
    7232:	f0 e0       	ldi	r31, 0x00	; 0
    7234:	2e 0f       	add	r18, r30
    7236:	3f 1f       	adc	r19, r31
    7238:	bb 20       	and	r11, r11
    723a:	21 f0       	breq	.+8      	; 0x7244 <dtoa_prf+0x18c>
    723c:	eb 2d       	mov	r30, r11
    723e:	f0 e0       	ldi	r31, 0x00	; 0
    7240:	31 96       	adiw	r30, 0x01	; 1
    7242:	02 c0       	rjmp	.+4      	; 0x7248 <dtoa_prf+0x190>
    7244:	e0 e0       	ldi	r30, 0x00	; 0
    7246:	f0 e0       	ldi	r31, 0x00	; 0
    7248:	2e 0f       	add	r18, r30
    724a:	3f 1f       	adc	r19, r31
    724c:	e1 2f       	mov	r30, r17
    724e:	f0 e0       	ldi	r31, 0x00	; 0
    7250:	2e 17       	cp	r18, r30
    7252:	3f 07       	cpc	r19, r31
    7254:	1c f4       	brge	.+6      	; 0x725c <dtoa_prf+0x1a4>
    7256:	12 1b       	sub	r17, r18
    7258:	21 2f       	mov	r18, r17
    725a:	01 c0       	rjmp	.+2      	; 0x725e <dtoa_prf+0x1a6>
    725c:	20 e0       	ldi	r18, 0x00	; 0
    725e:	8e 2d       	mov	r24, r14
    7260:	88 71       	andi	r24, 0x18	; 24
    7262:	59 f4       	brne	.+22     	; 0x727a <dtoa_prf+0x1c2>
    7264:	f6 01       	movw	r30, r12
    7266:	82 2f       	mov	r24, r18
    7268:	30 e2       	ldi	r19, 0x20	; 32
    726a:	88 23       	and	r24, r24
    726c:	19 f0       	breq	.+6      	; 0x7274 <dtoa_prf+0x1bc>
    726e:	31 93       	st	Z+, r19
    7270:	81 50       	subi	r24, 0x01	; 1
    7272:	fb cf       	rjmp	.-10     	; 0x726a <dtoa_prf+0x1b2>
    7274:	c2 0e       	add	r12, r18
    7276:	d1 1c       	adc	r13, r1
    7278:	20 e0       	ldi	r18, 0x00	; 0
    727a:	99 23       	and	r25, r25
    727c:	29 f0       	breq	.+10     	; 0x7288 <dtoa_prf+0x1d0>
    727e:	d6 01       	movw	r26, r12
    7280:	9c 93       	st	X, r25
    7282:	f6 01       	movw	r30, r12
    7284:	31 96       	adiw	r30, 0x01	; 1
    7286:	6f 01       	movw	r12, r30
    7288:	51 11       	cpse	r21, r1
    728a:	0b c0       	rjmp	.+22     	; 0x72a2 <dtoa_prf+0x1ea>
    728c:	f6 01       	movw	r30, r12
    728e:	82 2f       	mov	r24, r18
    7290:	90 e3       	ldi	r25, 0x30	; 48
    7292:	88 23       	and	r24, r24
    7294:	19 f0       	breq	.+6      	; 0x729c <dtoa_prf+0x1e4>
    7296:	91 93       	st	Z+, r25
    7298:	81 50       	subi	r24, 0x01	; 1
    729a:	fb cf       	rjmp	.-10     	; 0x7292 <dtoa_prf+0x1da>
    729c:	c2 0e       	add	r12, r18
    729e:	d1 1c       	adc	r13, r1
    72a0:	20 e0       	ldi	r18, 0x00	; 0
    72a2:	0f 2d       	mov	r16, r15
    72a4:	06 0f       	add	r16, r22
    72a6:	9a 81       	ldd	r25, Y+2	; 0x02
    72a8:	34 2f       	mov	r19, r20
    72aa:	30 71       	andi	r19, 0x10	; 16
    72ac:	44 ff       	sbrs	r20, 4
    72ae:	03 c0       	rjmp	.+6      	; 0x72b6 <dtoa_prf+0x1fe>
    72b0:	91 33       	cpi	r25, 0x31	; 49
    72b2:	09 f4       	brne	.+2      	; 0x72b6 <dtoa_prf+0x1fe>
    72b4:	01 50       	subi	r16, 0x01	; 1
    72b6:	10 16       	cp	r1, r16
    72b8:	24 f4       	brge	.+8      	; 0x72c2 <dtoa_prf+0x20a>
    72ba:	09 30       	cpi	r16, 0x09	; 9
    72bc:	18 f0       	brcs	.+6      	; 0x72c4 <dtoa_prf+0x20c>
    72be:	08 e0       	ldi	r16, 0x08	; 8
    72c0:	01 c0       	rjmp	.+2      	; 0x72c4 <dtoa_prf+0x20c>
    72c2:	01 e0       	ldi	r16, 0x01	; 1
    72c4:	ab 01       	movw	r20, r22
    72c6:	77 ff       	sbrs	r23, 7
    72c8:	02 c0       	rjmp	.+4      	; 0x72ce <dtoa_prf+0x216>
    72ca:	40 e0       	ldi	r20, 0x00	; 0
    72cc:	50 e0       	ldi	r21, 0x00	; 0
    72ce:	fb 01       	movw	r30, r22
    72d0:	e4 1b       	sub	r30, r20
    72d2:	f5 0b       	sbc	r31, r21
    72d4:	a1 e0       	ldi	r26, 0x01	; 1
    72d6:	b0 e0       	ldi	r27, 0x00	; 0
    72d8:	ac 0f       	add	r26, r28
    72da:	bd 1f       	adc	r27, r29
    72dc:	ea 0f       	add	r30, r26
    72de:	fb 1f       	adc	r31, r27
    72e0:	8e e2       	ldi	r24, 0x2E	; 46
    72e2:	a8 2e       	mov	r10, r24
    72e4:	4b 01       	movw	r8, r22
    72e6:	80 1a       	sub	r8, r16
    72e8:	91 08       	sbc	r9, r1
    72ea:	0b 2d       	mov	r16, r11
    72ec:	10 e0       	ldi	r17, 0x00	; 0
    72ee:	11 95       	neg	r17
    72f0:	01 95       	neg	r16
    72f2:	11 09       	sbc	r17, r1
    72f4:	4f 3f       	cpi	r20, 0xFF	; 255
    72f6:	bf ef       	ldi	r27, 0xFF	; 255
    72f8:	5b 07       	cpc	r21, r27
    72fa:	21 f4       	brne	.+8      	; 0x7304 <dtoa_prf+0x24c>
    72fc:	d6 01       	movw	r26, r12
    72fe:	ac 92       	st	X, r10
    7300:	11 96       	adiw	r26, 0x01	; 1
    7302:	6d 01       	movw	r12, r26
    7304:	64 17       	cp	r22, r20
    7306:	75 07       	cpc	r23, r21
    7308:	2c f0       	brlt	.+10     	; 0x7314 <dtoa_prf+0x25c>
    730a:	84 16       	cp	r8, r20
    730c:	95 06       	cpc	r9, r21
    730e:	14 f4       	brge	.+4      	; 0x7314 <dtoa_prf+0x25c>
    7310:	81 81       	ldd	r24, Z+1	; 0x01
    7312:	01 c0       	rjmp	.+2      	; 0x7316 <dtoa_prf+0x25e>
    7314:	80 e3       	ldi	r24, 0x30	; 48
    7316:	41 50       	subi	r20, 0x01	; 1
    7318:	51 09       	sbc	r21, r1
    731a:	31 96       	adiw	r30, 0x01	; 1
    731c:	d6 01       	movw	r26, r12
    731e:	11 96       	adiw	r26, 0x01	; 1
    7320:	7d 01       	movw	r14, r26
    7322:	40 17       	cp	r20, r16
    7324:	51 07       	cpc	r21, r17
    7326:	24 f0       	brlt	.+8      	; 0x7330 <dtoa_prf+0x278>
    7328:	d6 01       	movw	r26, r12
    732a:	8c 93       	st	X, r24
    732c:	67 01       	movw	r12, r14
    732e:	e2 cf       	rjmp	.-60     	; 0x72f4 <dtoa_prf+0x23c>
    7330:	64 17       	cp	r22, r20
    7332:	75 07       	cpc	r23, r21
    7334:	39 f4       	brne	.+14     	; 0x7344 <dtoa_prf+0x28c>
    7336:	96 33       	cpi	r25, 0x36	; 54
    7338:	20 f4       	brcc	.+8      	; 0x7342 <dtoa_prf+0x28a>
    733a:	95 33       	cpi	r25, 0x35	; 53
    733c:	19 f4       	brne	.+6      	; 0x7344 <dtoa_prf+0x28c>
    733e:	31 11       	cpse	r19, r1
    7340:	01 c0       	rjmp	.+2      	; 0x7344 <dtoa_prf+0x28c>
    7342:	81 e3       	ldi	r24, 0x31	; 49
    7344:	f6 01       	movw	r30, r12
    7346:	80 83       	st	Z, r24
    7348:	f7 01       	movw	r30, r14
    734a:	82 2f       	mov	r24, r18
    734c:	90 e2       	ldi	r25, 0x20	; 32
    734e:	88 23       	and	r24, r24
    7350:	19 f0       	breq	.+6      	; 0x7358 <dtoa_prf+0x2a0>
    7352:	91 93       	st	Z+, r25
    7354:	81 50       	subi	r24, 0x01	; 1
    7356:	fb cf       	rjmp	.-10     	; 0x734e <dtoa_prf+0x296>
    7358:	f7 01       	movw	r30, r14
    735a:	e2 0f       	add	r30, r18
    735c:	f1 1d       	adc	r31, r1
    735e:	10 82       	st	Z, r1
    7360:	80 e0       	ldi	r24, 0x00	; 0
    7362:	90 e0       	ldi	r25, 0x00	; 0
    7364:	29 96       	adiw	r28, 0x09	; 9
    7366:	ec e0       	ldi	r30, 0x0C	; 12
    7368:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__epilogue_restores__+0xc>

0000736c <__ftoa_engine>:
    736c:	28 30       	cpi	r18, 0x08	; 8
    736e:	08 f0       	brcs	.+2      	; 0x7372 <__ftoa_engine+0x6>
    7370:	27 e0       	ldi	r18, 0x07	; 7
    7372:	33 27       	eor	r19, r19
    7374:	da 01       	movw	r26, r20
    7376:	99 0f       	add	r25, r25
    7378:	31 1d       	adc	r19, r1
    737a:	87 fd       	sbrc	r24, 7
    737c:	91 60       	ori	r25, 0x01	; 1
    737e:	00 96       	adiw	r24, 0x00	; 0
    7380:	61 05       	cpc	r22, r1
    7382:	71 05       	cpc	r23, r1
    7384:	39 f4       	brne	.+14     	; 0x7394 <__ftoa_engine+0x28>
    7386:	32 60       	ori	r19, 0x02	; 2
    7388:	2e 5f       	subi	r18, 0xFE	; 254
    738a:	3d 93       	st	X+, r19
    738c:	30 e3       	ldi	r19, 0x30	; 48
    738e:	2a 95       	dec	r18
    7390:	e1 f7       	brne	.-8      	; 0x738a <__ftoa_engine+0x1e>
    7392:	08 95       	ret
    7394:	9f 3f       	cpi	r25, 0xFF	; 255
    7396:	30 f0       	brcs	.+12     	; 0x73a4 <__ftoa_engine+0x38>
    7398:	80 38       	cpi	r24, 0x80	; 128
    739a:	71 05       	cpc	r23, r1
    739c:	61 05       	cpc	r22, r1
    739e:	09 f0       	breq	.+2      	; 0x73a2 <__ftoa_engine+0x36>
    73a0:	3c 5f       	subi	r19, 0xFC	; 252
    73a2:	3c 5f       	subi	r19, 0xFC	; 252
    73a4:	3d 93       	st	X+, r19
    73a6:	91 30       	cpi	r25, 0x01	; 1
    73a8:	08 f0       	brcs	.+2      	; 0x73ac <__ftoa_engine+0x40>
    73aa:	80 68       	ori	r24, 0x80	; 128
    73ac:	91 1d       	adc	r25, r1
    73ae:	df 93       	push	r29
    73b0:	cf 93       	push	r28
    73b2:	1f 93       	push	r17
    73b4:	0f 93       	push	r16
    73b6:	ff 92       	push	r15
    73b8:	ef 92       	push	r14
    73ba:	19 2f       	mov	r17, r25
    73bc:	98 7f       	andi	r25, 0xF8	; 248
    73be:	96 95       	lsr	r25
    73c0:	e9 2f       	mov	r30, r25
    73c2:	96 95       	lsr	r25
    73c4:	96 95       	lsr	r25
    73c6:	e9 0f       	add	r30, r25
    73c8:	ff 27       	eor	r31, r31
    73ca:	ee 53       	subi	r30, 0x3E	; 62
    73cc:	ff 4f       	sbci	r31, 0xFF	; 255
    73ce:	99 27       	eor	r25, r25
    73d0:	33 27       	eor	r19, r19
    73d2:	ee 24       	eor	r14, r14
    73d4:	ff 24       	eor	r15, r15
    73d6:	a7 01       	movw	r20, r14
    73d8:	e7 01       	movw	r28, r14
    73da:	05 90       	lpm	r0, Z+
    73dc:	08 94       	sec
    73de:	07 94       	ror	r0
    73e0:	28 f4       	brcc	.+10     	; 0x73ec <__ftoa_engine+0x80>
    73e2:	36 0f       	add	r19, r22
    73e4:	e7 1e       	adc	r14, r23
    73e6:	f8 1e       	adc	r15, r24
    73e8:	49 1f       	adc	r20, r25
    73ea:	51 1d       	adc	r21, r1
    73ec:	66 0f       	add	r22, r22
    73ee:	77 1f       	adc	r23, r23
    73f0:	88 1f       	adc	r24, r24
    73f2:	99 1f       	adc	r25, r25
    73f4:	06 94       	lsr	r0
    73f6:	a1 f7       	brne	.-24     	; 0x73e0 <__ftoa_engine+0x74>
    73f8:	05 90       	lpm	r0, Z+
    73fa:	07 94       	ror	r0
    73fc:	28 f4       	brcc	.+10     	; 0x7408 <__ftoa_engine+0x9c>
    73fe:	e7 0e       	add	r14, r23
    7400:	f8 1e       	adc	r15, r24
    7402:	49 1f       	adc	r20, r25
    7404:	56 1f       	adc	r21, r22
    7406:	c1 1d       	adc	r28, r1
    7408:	77 0f       	add	r23, r23
    740a:	88 1f       	adc	r24, r24
    740c:	99 1f       	adc	r25, r25
    740e:	66 1f       	adc	r22, r22
    7410:	06 94       	lsr	r0
    7412:	a1 f7       	brne	.-24     	; 0x73fc <__ftoa_engine+0x90>
    7414:	05 90       	lpm	r0, Z+
    7416:	07 94       	ror	r0
    7418:	28 f4       	brcc	.+10     	; 0x7424 <__ftoa_engine+0xb8>
    741a:	f8 0e       	add	r15, r24
    741c:	49 1f       	adc	r20, r25
    741e:	56 1f       	adc	r21, r22
    7420:	c7 1f       	adc	r28, r23
    7422:	d1 1d       	adc	r29, r1
    7424:	88 0f       	add	r24, r24
    7426:	99 1f       	adc	r25, r25
    7428:	66 1f       	adc	r22, r22
    742a:	77 1f       	adc	r23, r23
    742c:	06 94       	lsr	r0
    742e:	a1 f7       	brne	.-24     	; 0x7418 <__ftoa_engine+0xac>
    7430:	05 90       	lpm	r0, Z+
    7432:	07 94       	ror	r0
    7434:	20 f4       	brcc	.+8      	; 0x743e <__ftoa_engine+0xd2>
    7436:	49 0f       	add	r20, r25
    7438:	56 1f       	adc	r21, r22
    743a:	c7 1f       	adc	r28, r23
    743c:	d8 1f       	adc	r29, r24
    743e:	99 0f       	add	r25, r25
    7440:	66 1f       	adc	r22, r22
    7442:	77 1f       	adc	r23, r23
    7444:	88 1f       	adc	r24, r24
    7446:	06 94       	lsr	r0
    7448:	a9 f7       	brne	.-22     	; 0x7434 <__ftoa_engine+0xc8>
    744a:	84 91       	lpm	r24, Z
    744c:	10 95       	com	r17
    744e:	17 70       	andi	r17, 0x07	; 7
    7450:	41 f0       	breq	.+16     	; 0x7462 <__ftoa_engine+0xf6>
    7452:	d6 95       	lsr	r29
    7454:	c7 95       	ror	r28
    7456:	57 95       	ror	r21
    7458:	47 95       	ror	r20
    745a:	f7 94       	ror	r15
    745c:	e7 94       	ror	r14
    745e:	1a 95       	dec	r17
    7460:	c1 f7       	brne	.-16     	; 0x7452 <__ftoa_engine+0xe6>
    7462:	e8 e6       	ldi	r30, 0x68	; 104
    7464:	f0 e0       	ldi	r31, 0x00	; 0
    7466:	68 94       	set
    7468:	15 90       	lpm	r1, Z+
    746a:	15 91       	lpm	r17, Z+
    746c:	35 91       	lpm	r19, Z+
    746e:	65 91       	lpm	r22, Z+
    7470:	95 91       	lpm	r25, Z+
    7472:	05 90       	lpm	r0, Z+
    7474:	7f e2       	ldi	r23, 0x2F	; 47
    7476:	73 95       	inc	r23
    7478:	e1 18       	sub	r14, r1
    747a:	f1 0a       	sbc	r15, r17
    747c:	43 0b       	sbc	r20, r19
    747e:	56 0b       	sbc	r21, r22
    7480:	c9 0b       	sbc	r28, r25
    7482:	d0 09       	sbc	r29, r0
    7484:	c0 f7       	brcc	.-16     	; 0x7476 <__ftoa_engine+0x10a>
    7486:	e1 0c       	add	r14, r1
    7488:	f1 1e       	adc	r15, r17
    748a:	43 1f       	adc	r20, r19
    748c:	56 1f       	adc	r21, r22
    748e:	c9 1f       	adc	r28, r25
    7490:	d0 1d       	adc	r29, r0
    7492:	7e f4       	brtc	.+30     	; 0x74b2 <__ftoa_engine+0x146>
    7494:	70 33       	cpi	r23, 0x30	; 48
    7496:	11 f4       	brne	.+4      	; 0x749c <__ftoa_engine+0x130>
    7498:	8a 95       	dec	r24
    749a:	e6 cf       	rjmp	.-52     	; 0x7468 <__ftoa_engine+0xfc>
    749c:	e8 94       	clt
    749e:	01 50       	subi	r16, 0x01	; 1
    74a0:	30 f0       	brcs	.+12     	; 0x74ae <__ftoa_engine+0x142>
    74a2:	08 0f       	add	r16, r24
    74a4:	0a f4       	brpl	.+2      	; 0x74a8 <__ftoa_engine+0x13c>
    74a6:	00 27       	eor	r16, r16
    74a8:	02 17       	cp	r16, r18
    74aa:	08 f4       	brcc	.+2      	; 0x74ae <__ftoa_engine+0x142>
    74ac:	20 2f       	mov	r18, r16
    74ae:	23 95       	inc	r18
    74b0:	02 2f       	mov	r16, r18
    74b2:	7a 33       	cpi	r23, 0x3A	; 58
    74b4:	28 f0       	brcs	.+10     	; 0x74c0 <__ftoa_engine+0x154>
    74b6:	79 e3       	ldi	r23, 0x39	; 57
    74b8:	7d 93       	st	X+, r23
    74ba:	2a 95       	dec	r18
    74bc:	e9 f7       	brne	.-6      	; 0x74b8 <__ftoa_engine+0x14c>
    74be:	10 c0       	rjmp	.+32     	; 0x74e0 <__ftoa_engine+0x174>
    74c0:	7d 93       	st	X+, r23
    74c2:	2a 95       	dec	r18
    74c4:	89 f6       	brne	.-94     	; 0x7468 <__ftoa_engine+0xfc>
    74c6:	06 94       	lsr	r0
    74c8:	97 95       	ror	r25
    74ca:	67 95       	ror	r22
    74cc:	37 95       	ror	r19
    74ce:	17 95       	ror	r17
    74d0:	17 94       	ror	r1
    74d2:	e1 18       	sub	r14, r1
    74d4:	f1 0a       	sbc	r15, r17
    74d6:	43 0b       	sbc	r20, r19
    74d8:	56 0b       	sbc	r21, r22
    74da:	c9 0b       	sbc	r28, r25
    74dc:	d0 09       	sbc	r29, r0
    74de:	98 f0       	brcs	.+38     	; 0x7506 <__ftoa_engine+0x19a>
    74e0:	23 95       	inc	r18
    74e2:	7e 91       	ld	r23, -X
    74e4:	73 95       	inc	r23
    74e6:	7a 33       	cpi	r23, 0x3A	; 58
    74e8:	08 f0       	brcs	.+2      	; 0x74ec <__ftoa_engine+0x180>
    74ea:	70 e3       	ldi	r23, 0x30	; 48
    74ec:	7c 93       	st	X, r23
    74ee:	20 13       	cpse	r18, r16
    74f0:	b8 f7       	brcc	.-18     	; 0x74e0 <__ftoa_engine+0x174>
    74f2:	7e 91       	ld	r23, -X
    74f4:	70 61       	ori	r23, 0x10	; 16
    74f6:	7d 93       	st	X+, r23
    74f8:	30 f0       	brcs	.+12     	; 0x7506 <__ftoa_engine+0x19a>
    74fa:	83 95       	inc	r24
    74fc:	71 e3       	ldi	r23, 0x31	; 49
    74fe:	7d 93       	st	X+, r23
    7500:	70 e3       	ldi	r23, 0x30	; 48
    7502:	2a 95       	dec	r18
    7504:	e1 f7       	brne	.-8      	; 0x74fe <__ftoa_engine+0x192>
    7506:	11 24       	eor	r1, r1
    7508:	ef 90       	pop	r14
    750a:	ff 90       	pop	r15
    750c:	0f 91       	pop	r16
    750e:	1f 91       	pop	r17
    7510:	cf 91       	pop	r28
    7512:	df 91       	pop	r29
    7514:	99 27       	eor	r25, r25
    7516:	87 fd       	sbrc	r24, 7
    7518:	90 95       	com	r25
    751a:	08 95       	ret

0000751c <strnlen_P>:
    751c:	fc 01       	movw	r30, r24
    751e:	05 90       	lpm	r0, Z+
    7520:	61 50       	subi	r22, 0x01	; 1
    7522:	70 40       	sbci	r23, 0x00	; 0
    7524:	01 10       	cpse	r0, r1
    7526:	d8 f7       	brcc	.-10     	; 0x751e <strnlen_P+0x2>
    7528:	80 95       	com	r24
    752a:	90 95       	com	r25
    752c:	8e 0f       	add	r24, r30
    752e:	9f 1f       	adc	r25, r31
    7530:	08 95       	ret

00007532 <strnlen>:
    7532:	fc 01       	movw	r30, r24
    7534:	61 50       	subi	r22, 0x01	; 1
    7536:	70 40       	sbci	r23, 0x00	; 0
    7538:	01 90       	ld	r0, Z+
    753a:	01 10       	cpse	r0, r1
    753c:	d8 f7       	brcc	.-10     	; 0x7534 <strnlen+0x2>
    753e:	80 95       	com	r24
    7540:	90 95       	com	r25
    7542:	8e 0f       	add	r24, r30
    7544:	9f 1f       	adc	r25, r31
    7546:	08 95       	ret

00007548 <strrev>:
    7548:	dc 01       	movw	r26, r24
    754a:	fc 01       	movw	r30, r24
    754c:	67 2f       	mov	r22, r23
    754e:	71 91       	ld	r23, Z+
    7550:	77 23       	and	r23, r23
    7552:	e1 f7       	brne	.-8      	; 0x754c <strrev+0x4>
    7554:	32 97       	sbiw	r30, 0x02	; 2
    7556:	04 c0       	rjmp	.+8      	; 0x7560 <strrev+0x18>
    7558:	7c 91       	ld	r23, X
    755a:	6d 93       	st	X+, r22
    755c:	70 83       	st	Z, r23
    755e:	62 91       	ld	r22, -Z
    7560:	ae 17       	cp	r26, r30
    7562:	bf 07       	cpc	r27, r31
    7564:	c8 f3       	brcs	.-14     	; 0x7558 <strrev+0x10>
    7566:	08 95       	ret

00007568 <fputc>:
    7568:	0f 93       	push	r16
    756a:	1f 93       	push	r17
    756c:	cf 93       	push	r28
    756e:	df 93       	push	r29
    7570:	fb 01       	movw	r30, r22
    7572:	23 81       	ldd	r18, Z+3	; 0x03
    7574:	21 fd       	sbrc	r18, 1
    7576:	03 c0       	rjmp	.+6      	; 0x757e <fputc+0x16>
    7578:	8f ef       	ldi	r24, 0xFF	; 255
    757a:	9f ef       	ldi	r25, 0xFF	; 255
    757c:	2c c0       	rjmp	.+88     	; 0x75d6 <fputc+0x6e>
    757e:	22 ff       	sbrs	r18, 2
    7580:	16 c0       	rjmp	.+44     	; 0x75ae <fputc+0x46>
    7582:	46 81       	ldd	r20, Z+6	; 0x06
    7584:	57 81       	ldd	r21, Z+7	; 0x07
    7586:	24 81       	ldd	r18, Z+4	; 0x04
    7588:	35 81       	ldd	r19, Z+5	; 0x05
    758a:	42 17       	cp	r20, r18
    758c:	53 07       	cpc	r21, r19
    758e:	44 f4       	brge	.+16     	; 0x75a0 <fputc+0x38>
    7590:	a0 81       	ld	r26, Z
    7592:	b1 81       	ldd	r27, Z+1	; 0x01
    7594:	9d 01       	movw	r18, r26
    7596:	2f 5f       	subi	r18, 0xFF	; 255
    7598:	3f 4f       	sbci	r19, 0xFF	; 255
    759a:	31 83       	std	Z+1, r19	; 0x01
    759c:	20 83       	st	Z, r18
    759e:	8c 93       	st	X, r24
    75a0:	26 81       	ldd	r18, Z+6	; 0x06
    75a2:	37 81       	ldd	r19, Z+7	; 0x07
    75a4:	2f 5f       	subi	r18, 0xFF	; 255
    75a6:	3f 4f       	sbci	r19, 0xFF	; 255
    75a8:	37 83       	std	Z+7, r19	; 0x07
    75aa:	26 83       	std	Z+6, r18	; 0x06
    75ac:	14 c0       	rjmp	.+40     	; 0x75d6 <fputc+0x6e>
    75ae:	8b 01       	movw	r16, r22
    75b0:	ec 01       	movw	r28, r24
    75b2:	fb 01       	movw	r30, r22
    75b4:	00 84       	ldd	r0, Z+8	; 0x08
    75b6:	f1 85       	ldd	r31, Z+9	; 0x09
    75b8:	e0 2d       	mov	r30, r0
    75ba:	09 95       	icall
    75bc:	89 2b       	or	r24, r25
    75be:	e1 f6       	brne	.-72     	; 0x7578 <fputc+0x10>
    75c0:	d8 01       	movw	r26, r16
    75c2:	16 96       	adiw	r26, 0x06	; 6
    75c4:	8d 91       	ld	r24, X+
    75c6:	9c 91       	ld	r25, X
    75c8:	17 97       	sbiw	r26, 0x07	; 7
    75ca:	01 96       	adiw	r24, 0x01	; 1
    75cc:	17 96       	adiw	r26, 0x07	; 7
    75ce:	9c 93       	st	X, r25
    75d0:	8e 93       	st	-X, r24
    75d2:	16 97       	sbiw	r26, 0x06	; 6
    75d4:	ce 01       	movw	r24, r28
    75d6:	df 91       	pop	r29
    75d8:	cf 91       	pop	r28
    75da:	1f 91       	pop	r17
    75dc:	0f 91       	pop	r16
    75de:	08 95       	ret

000075e0 <__ultoa_invert>:
    75e0:	fa 01       	movw	r30, r20
    75e2:	aa 27       	eor	r26, r26
    75e4:	28 30       	cpi	r18, 0x08	; 8
    75e6:	51 f1       	breq	.+84     	; 0x763c <__ultoa_invert+0x5c>
    75e8:	20 31       	cpi	r18, 0x10	; 16
    75ea:	81 f1       	breq	.+96     	; 0x764c <__ultoa_invert+0x6c>
    75ec:	e8 94       	clt
    75ee:	6f 93       	push	r22
    75f0:	6e 7f       	andi	r22, 0xFE	; 254
    75f2:	6e 5f       	subi	r22, 0xFE	; 254
    75f4:	7f 4f       	sbci	r23, 0xFF	; 255
    75f6:	8f 4f       	sbci	r24, 0xFF	; 255
    75f8:	9f 4f       	sbci	r25, 0xFF	; 255
    75fa:	af 4f       	sbci	r26, 0xFF	; 255
    75fc:	b1 e0       	ldi	r27, 0x01	; 1
    75fe:	3e d0       	rcall	.+124    	; 0x767c <__ultoa_invert+0x9c>
    7600:	b4 e0       	ldi	r27, 0x04	; 4
    7602:	3c d0       	rcall	.+120    	; 0x767c <__ultoa_invert+0x9c>
    7604:	67 0f       	add	r22, r23
    7606:	78 1f       	adc	r23, r24
    7608:	89 1f       	adc	r24, r25
    760a:	9a 1f       	adc	r25, r26
    760c:	a1 1d       	adc	r26, r1
    760e:	68 0f       	add	r22, r24
    7610:	79 1f       	adc	r23, r25
    7612:	8a 1f       	adc	r24, r26
    7614:	91 1d       	adc	r25, r1
    7616:	a1 1d       	adc	r26, r1
    7618:	6a 0f       	add	r22, r26
    761a:	71 1d       	adc	r23, r1
    761c:	81 1d       	adc	r24, r1
    761e:	91 1d       	adc	r25, r1
    7620:	a1 1d       	adc	r26, r1
    7622:	20 d0       	rcall	.+64     	; 0x7664 <__ultoa_invert+0x84>
    7624:	09 f4       	brne	.+2      	; 0x7628 <__ultoa_invert+0x48>
    7626:	68 94       	set
    7628:	3f 91       	pop	r19
    762a:	2a e0       	ldi	r18, 0x0A	; 10
    762c:	26 9f       	mul	r18, r22
    762e:	11 24       	eor	r1, r1
    7630:	30 19       	sub	r19, r0
    7632:	30 5d       	subi	r19, 0xD0	; 208
    7634:	31 93       	st	Z+, r19
    7636:	de f6       	brtc	.-74     	; 0x75ee <__ultoa_invert+0xe>
    7638:	cf 01       	movw	r24, r30
    763a:	08 95       	ret
    763c:	46 2f       	mov	r20, r22
    763e:	47 70       	andi	r20, 0x07	; 7
    7640:	40 5d       	subi	r20, 0xD0	; 208
    7642:	41 93       	st	Z+, r20
    7644:	b3 e0       	ldi	r27, 0x03	; 3
    7646:	0f d0       	rcall	.+30     	; 0x7666 <__ultoa_invert+0x86>
    7648:	c9 f7       	brne	.-14     	; 0x763c <__ultoa_invert+0x5c>
    764a:	f6 cf       	rjmp	.-20     	; 0x7638 <__ultoa_invert+0x58>
    764c:	46 2f       	mov	r20, r22
    764e:	4f 70       	andi	r20, 0x0F	; 15
    7650:	40 5d       	subi	r20, 0xD0	; 208
    7652:	4a 33       	cpi	r20, 0x3A	; 58
    7654:	18 f0       	brcs	.+6      	; 0x765c <__ultoa_invert+0x7c>
    7656:	49 5d       	subi	r20, 0xD9	; 217
    7658:	31 fd       	sbrc	r19, 1
    765a:	40 52       	subi	r20, 0x20	; 32
    765c:	41 93       	st	Z+, r20
    765e:	02 d0       	rcall	.+4      	; 0x7664 <__ultoa_invert+0x84>
    7660:	a9 f7       	brne	.-22     	; 0x764c <__ultoa_invert+0x6c>
    7662:	ea cf       	rjmp	.-44     	; 0x7638 <__ultoa_invert+0x58>
    7664:	b4 e0       	ldi	r27, 0x04	; 4
    7666:	a6 95       	lsr	r26
    7668:	97 95       	ror	r25
    766a:	87 95       	ror	r24
    766c:	77 95       	ror	r23
    766e:	67 95       	ror	r22
    7670:	ba 95       	dec	r27
    7672:	c9 f7       	brne	.-14     	; 0x7666 <__ultoa_invert+0x86>
    7674:	00 97       	sbiw	r24, 0x00	; 0
    7676:	61 05       	cpc	r22, r1
    7678:	71 05       	cpc	r23, r1
    767a:	08 95       	ret
    767c:	9b 01       	movw	r18, r22
    767e:	ac 01       	movw	r20, r24
    7680:	0a 2e       	mov	r0, r26
    7682:	06 94       	lsr	r0
    7684:	57 95       	ror	r21
    7686:	47 95       	ror	r20
    7688:	37 95       	ror	r19
    768a:	27 95       	ror	r18
    768c:	ba 95       	dec	r27
    768e:	c9 f7       	brne	.-14     	; 0x7682 <__ultoa_invert+0xa2>
    7690:	62 0f       	add	r22, r18
    7692:	73 1f       	adc	r23, r19
    7694:	84 1f       	adc	r24, r20
    7696:	95 1f       	adc	r25, r21
    7698:	a0 1d       	adc	r26, r0
    769a:	08 95       	ret

0000769c <__do_global_dtors>:
    769c:	13 e0       	ldi	r17, 0x03	; 3
    769e:	cd e9       	ldi	r28, 0x9D	; 157
    76a0:	d3 e0       	ldi	r29, 0x03	; 3
    76a2:	04 c0       	rjmp	.+8      	; 0x76ac <__do_global_dtors+0x10>
    76a4:	fe 01       	movw	r30, r28
    76a6:	0e 94 4c 33 	call	0x6698	; 0x6698 <__tablejump2__>
    76aa:	21 96       	adiw	r28, 0x01	; 1
    76ac:	cf 39       	cpi	r28, 0x9F	; 159
    76ae:	d1 07       	cpc	r29, r17
    76b0:	c9 f7       	brne	.-14     	; 0x76a4 <__do_global_dtors+0x8>
    76b2:	f8 94       	cli

000076b4 <__stop_program>:
    76b4:	ff cf       	rjmp	.-2      	; 0x76b4 <__stop_program>
